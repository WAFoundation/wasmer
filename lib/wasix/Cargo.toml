[package]
name = "wasmer-wasix"
version = "0.36.0"
description = "WASI and WASIX implementation library for Wasmer WebAssembly runtime"
categories = ["wasm", "os"]
keywords = ["wasm", "webassembly", "wasi", "sandbox", "ABI"]
readme = "README.md"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true

[dependencies]
wasmer-package.workspace = true
wasmer-wasix-types = { workspace = true, features = ["enable-serde"] }
wasmer-types = { path = "../types", version = "=6.0.0-alpha.1", default-features = false }
wasmer = { path = "../api", version = "=6.0.0-alpha.1", default-features = false, features = [
	"wat",
	"js-serializable-module",
] }
virtual-mio = { workspace = true }
virtual-fs = { path = "../virtual-fs", version = "0.22.0", default-features = false, features = [
	"webc-fs",
] }
virtual-net = { workspace = true, features = ["rkyv"] }
wasmer-journal = { workspace = true }
wasmer-config = { version = "0.13.0", path = "../config" }

http.workspace = true
dashmap.workspace = true
base64.workspace = true
webc.workspace = true
serde_yaml.workspace = true
rkyv.workspace = true
shared-buffer.workspace = true
hyper = { workspace = true, features = ["server"], optional = true }
derive_more.workspace = true

xxhash-rust = { workspace = true, features = ["xxh64"] }
rusty_pool = { workspace = true, optional = true }
cfg-if = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
getrandom = { workspace = true }
typetag = { workspace = true, optional = true }
serde = { workspace = true, features = ["derive"] }
bincode = { workspace = true }
chrono = { workspace = true, features = ["wasmbind", "std", "clock"], optional = true }
bytes = { workspace = true }
anyhow = { workspace = true }
sha2 = { workspace = true }
waker-fn = { workspace = true }
cooked-waker = { workspace = true }
rand = { workspace = true }
tokio = { workspace = true, features = [
	"sync",
	"macros",
	"time",
	"rt",
], default-features = false }
tokio-stream = { workspace = true, features = ["sync"] }
futures = { workspace = true }
# used by feature='os'
async-trait = { workspace = true }
urlencoding = { workspace = true }
serde_derive = { workspace = true }
serde_json = { workspace = true }
weezl = { workspace = true }
hex = { workspace = true }
linked_hash_set = { workspace = true }
heapless = { workspace = true }
once_cell = { workspace = true }
pin-project = { workspace = true }
semver = { workspace = true }
tempfile = { workspace = true }
num_enum = { workspace = true }
# Used by the WCGI runner
wcgi = { workspace = true, optional = true }
wcgi-host = { workspace = true, optional = true }
tower-http = { workspace = true, features = ["trace", "util", "catch-panic", "cors"], optional = true }
tower = { workspace = true, features = ["make", "util"], optional = true }
url = { workspace = true }
bytecheck = { workspace = true }
blake3 = { workspace = true }
petgraph = { workspace = true }
lz4_flex = { workspace = true }
rayon = { workspace = true, optional = true }
wasm-bindgen = { workspace = true, optional = true }
js-sys = { workspace = true, optional = true }
wasm-bindgen-futures = { workspace = true, optional = true }
web-sys = { workspace = true, features = ["Request", "RequestInit", "Window", "WorkerGlobalScope", "RequestMode", "Response", "Headers"], optional = true }
hyper-util = { workspace = true, features = ["server", "server-graceful", "tokio", "service", "client"], optional = true }
http-body-util = { workspace = true, optional = true }
toml = { workspace = true }
pin-utils = { workspace = true }

[target.'cfg(not(any(target_arch = "riscv64", target_arch = "loongarch64")))'.dependencies.reqwest]
workspace = true
default-features = false
features = ["rustls-tls", "json", "stream", "socks", "blocking"]
optional = true

[target.'cfg(any(target_arch = "riscv64", target_arch = "loongarch64"))'.dependencies.reqwest]
workspace = true
default-features = false
features = ["native-tls", "json", "stream", "socks", "blocking"]
optional = true

[target.'cfg(unix)'.dependencies]
libc.workspace = true

[target.'cfg(all(unix, not(target_os="ios")))'.dependencies]
termios = { version = "0.3" }

[target.'cfg(windows)'.dependencies]
windows-sys = { version = "0.59", features = [
	"Win32_System_SystemInformation",
] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
terminal_size = { version = "0.3.0" }

[dev-dependencies]
wasmer = { path = "../api", version = "=6.0.0-alpha.1", default-features = false, features = [
	"wat",
	"js-serializable-module",
] }
tokio = { workspace = true, features = [
	"sync",
	"macros",
	"rt",
], default-features = false }
pretty_assertions.workspace = true
tracing-test = { workspace = true }
wasm-bindgen-test = { workspace = true }
env_logger = { workspace = true }
log = { workspace = true }
assert-panic = { workspace = true }

[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
wasm-bindgen-test = "0.3.0"
tracing-wasm = "0.2"

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tracing-subscriber = { version = "^0.3" }
wasmer = { path = "../api", version = "=6.0.0-alpha.1", default-features = false, features = [
	"wat",
	"js-serializable-module",
	"cranelift",
] }

[features]
default = ["sys-default"]

time = ["tokio/time"]
ctrlc = ["tokio/signal"]

webc_runner_rt_wcgi = [
	"hyper",
	"hyper-util",
	"http-body-util",
	"wcgi",
	"wcgi-host",
	"tower",
	"tower-http",
]
webc_runner_rt_dcgi = ["webc_runner_rt_wcgi", "journal"]
webc_runner_rt_dproxy = [
	"hyper",
	"hyper-util",
	"http-body-util",
	"tower",
	"tower-http",
	"journal",
]

sys = ["webc/mmap", "time", "virtual-mio/sys"]
sys-default = [
	"sys",
	"logging",
	"host-fs",
	"journal",
	"sys-poll",
	"sys-thread",
	"host-vnet",
	"host-threads",
	"host-reqwest",
	"wasmer/sys",
	"ctrlc",
]
sys-poll = []
extra-logging = []
sys-thread = ["tokio/rt", "tokio/time", "tokio/rt-multi-thread", "rusty_pool"]
journal = ["tokio/fs", "wasmer-journal/log-file"]

# Deprecated. Kept it for compatibility
compiler = []

js = [
	"virtual-fs/no-time",
	"getrandom/js",
	"chrono",
	"js-sys",
	"wasm-bindgen",
	"wasm-bindgen-futures",
	"web-sys",
]
js-default = ["js"]
test-js = ["js", "wasmer/wat"]

host-vnet = ["virtual-net/host-net"]
host-threads = []
host-reqwest = ["reqwest"]
host-fs = ["virtual-fs/host-fs"]
remote-vnet = ["virtual-net/remote"]

logging = ["tracing/log"]
disable-all-logging = ["tracing/release_max_level_off", "tracing/max_level_off"]
enable-serde = [
	"typetag",
	"virtual-fs/enable-serde",
	"wasmer-wasix-types/enable-serde",
]

[package.metadata.docs.rs]
features = [
	"wasmer/sys",
	"webc_runner_rt_wcgi",
	"webc_runner_rt_dcgi",
	"webc_runner_rt_dproxy",
	"sys-default",
]
rustc-args = ["--cfg", "docsrs"]
