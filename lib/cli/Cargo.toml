[package]
name = "wasmer-cli"
description = "Wasmer CLI"
categories = ["wasm", "command-line-interface"]
keywords = ["wasm", "webassembly", "cli"]
readme = "README.md"
default-run = "wasmer"
authors.workspace = true
edition.workspace = true
homepage.workspace = true
license.workspace = true
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[[bin]]
name = "wasmer"
path = "src/bin/wasmer.rs"
doc = false
required-features = ["backend"]

[[bin]]
name = "wasmer-headless"
path = "src/bin/wasmer_headless.rs"
doc = false
required-features = ["headless"]

[features]
# Don't add the compiler features in default, please add them on the Makefile
# since we might want to autoconfigure them depending on the availability on the host.
default = [
	"sys",
	"wat",
	"wast",
	"journal",
	"wasmer-artifact-create",
	"static-artifact-create",
]

# # Tun-tap client for connecting to Wasmer Edge VPNs
# tun-tap = [
# 	"dep:tun-tap",
# 	"virtual-net/tokio-tungstenite",
# 	"tokio-tungstenite",
# 	"mio",
# 	"mac_address",
# 	"dep:interfaces",
# ]
journal = ["wasmer-wasix/journal"]
fuse = ["dep:fuser", "dep:time01", "dep:shared-buffer", "dep:rkyv"]
backend = []
coredump = ["wasm-coredump-builder"]
sys = ["compiler", "wasmer-vm"]
v8 = ["backend", "wasmer/v8"]
wamr = ["backend", "wasmer/wamr"]
wasmi = ["backend", "wasmer/wasmi"]
jsc = ["backend", "wasmer/jsc", "wasmer/std"]
wast = ["wasmer-wast"]
host-net = ["virtual-net/host-net"]
wat = ["wasmer/wat"]
compiler = [
	"backend",
	"wasmer/compiler",
	"wasmer-compiler/translator",
	"wasmer-compiler/compiler",
]
wasmer-artifact-create = [
	"compiler",
	"wasmer/wasmer-artifact-load",
	"wasmer/wasmer-artifact-create",
	"wasmer-compiler/wasmer-artifact-load",
	"wasmer-compiler/wasmer-artifact-create",
]
static-artifact-create = [
	"compiler",
	"wasmer/static-artifact-load",
	"wasmer/static-artifact-create",
	"wasmer-compiler/static-artifact-load",
	"wasmer-compiler/static-artifact-create",
]
wasmer-artifact-load = [
	"compiler",
	"wasmer/wasmer-artifact-load",
	"wasmer-compiler/wasmer-artifact-load",
]
static-artifact-load = [
	"compiler",
	"wasmer/static-artifact-load",
	"wasmer-compiler/static-artifact-load",
]
singlepass = ["wasmer-compiler-singlepass", "compiler"]
cranelift = ["wasmer-compiler-cranelift", "compiler"]
llvm = ["wasmer-compiler-llvm", "compiler"]
disable-all-logging = [
	"wasmer-wasix/disable-all-logging",
	"log/release_max_level_off",
]
headless = []
headless-minimal = ["headless", "disable-all-logging"]
telemetry = []

# Optional
enable-serde = [
	"wasmer/enable-serde",
	"wasmer-vm/enable-serde",
	"wasmer-compiler/enable-serde",
	"wasmer-wasix/enable-serde",
]

[dependencies]
# Repo-local dependencies.

wasmer = { version = "=6.0.0-alpha.1", path = "../api", default-features = false }
wasmer-compiler = { version = "=6.0.0-alpha.1", path = "../compiler", features = [
	"compiler",
], optional = true }
wasmer-compiler-cranelift = { version = "=6.0.0-alpha.1", path = "../compiler-cranelift", optional = true }
wasmer-compiler-singlepass = { version = "=6.0.0-alpha.1", path = "../compiler-singlepass", optional = true }
wasmer-compiler-llvm = { version = "=6.0.0-alpha.1", path = "../compiler-llvm", optional = true }
wasmer-package.workspace = true

wasmer-vm = { workspace = true, optional = true }
wasmer-wasix = { path = "../wasix", version = "=0.36.0", features = [
	"logging",
	"webc_runner_rt_wcgi",
	"webc_runner_rt_dcgi",
	"webc_runner_rt_dproxy",
	"host-fs",
	"ctrlc",
] }
wasmer-wast = { workspace = true, optional = true }
wasmer-types = { version = "=6.0.0-alpha.1", path = "../types", features = [
	"enable-serde",
] }
virtual-fs = { version = "0.22.0", path = "../virtual-fs", default-features = false, features = [
	"host-fs",
] }
virtual-net = { workspace = true }
virtual-mio = { workspace = true }

# Wasmer-owned dependencies.

webc = { workspace = true }
wasmer-backend-api = { version = "=0.5.0", path = "../backend-api" }

# Used by the mount command

shared-buffer = { workspace = true, optional = true }
rkyv = { workspace = true, optional = true }
fuser = { workspace = true, optional = true }
time01 = { workspace = true, optional = true }


# Third-party dependencies.

http.workspace = true
is-terminal = { workspace = true }
colored = { workspace = true }
anyhow = { workspace = true }
bytesize = { workspace = true }
cfg-if = { workspace = true }
tempfile = { workspace = true }
serde = { workspace = true, features = ["derive"] }
dirs = { workspace = true }
serde_json = { workspace = true }
target-lexicon = { version = "0.12", features = ["std"] }
wasmer-config = { version = "0.13.0", path = "../config" }
indexmap = { workspace = true }
walkdir = { workspace = true }
regex = { workspace = true }
toml.workspace = true
url = { workspace = true }
libc.workspace = true
parking_lot = { workspace = true }
dialoguer = { workspace = true }
hex = { workspace = true }
flate2 = { workspace = true }
cargo_metadata = { workspace = true }
tar = { workspace = true }
bytes = { workspace = true }
thiserror = { workspace = true }
log = { workspace = true }
semver = { workspace = true }
pathdiff = { workspace = true }
sha2 = { workspace = true }
object = { workspace = true }
wasm-coredump-builder = { workspace = true, optional = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true, features = ["env-filter", "fmt", "json"] }
async-trait = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }
once_cell = { workspace = true }
indicatif = { workspace = true }
opener = { workspace = true }
normpath = { workspace = true }
hyper = { workspace = true, features = ["server"] }
hyper-util = { workspace = true, features = ["tokio"] }
http-body-util = { workspace = true }
futures = { workspace = true }
humantime = { workspace = true }
interfaces = { workspace = true, optional = true }

uuid = { workspace = true, features = ["v4"] }
time = { workspace = true, features = ["macros"] }
serde_yaml = { workspace = true }
comfy-table = { workspace = true }


# Used by tuntap and connect
futures-util = { workspace = true }
mio = { workspace = true, optional = true }
tokio-tungstenite = { version = "0.21.0", features = [
	"rustls-tls-webpki-roots",
	"stream",
], optional = true }
mac_address = { workspace = true, optional = true }
#tun-tap = { version = "0.1.4", features = ["tokio"], optional = true }

clap_complete = { workspace = true }
clap_mangen = { workspace = true }
zip = { workspace = true, features = ["deflate"] }
console = { workspace = true }
dotenvy = { workspace = true }
lzma-rs = { workspace = true }

# NOTE: Must use different features for clap because the "color" feature does not
# work on wasi due to the anstream dependency not compiling.
[target.'cfg(not(target_family = "wasm"))'.dependencies]
clap = { version = "4.4.0", features = ["derive", "env"] }
[target.'cfg(target_family = "wasm")'.dependencies]
clap = { version = "4.4.0", default-features = false, features = [
	"std",
	"help",
	"usage",
	"error-context",
	"suggestions",
	"derive",
	"env",
] }

[target.'cfg(not(any(target_arch = "riscv64", target_arch = "loongarch64")))'.dependencies]
reqwest = { workspace = true, default-features = false, features = [
	"rustls-tls",
	"json",
	"multipart",
	"gzip",
] }

[target.'cfg(any(target_arch = "riscv64", target_arch = "loongarch64"))'.dependencies]
reqwest = { workspace = true, default-features = false, features = [
	"native-tls",
	"json",
	"multipart",
] }


[build-dependencies]
chrono = { workspace = true, features = ["std", "clock"] }

[target.'cfg(target_os = "linux")'.dependencies]
unix_mode = "0.1.3"


[dev-dependencies]
assert_cmd = { workspace = true }
predicates = "3.0.3"
pretty_assertions.workspace = true

[target.'cfg(target_os = "windows")'.dependencies]
colored = "2.0.0"

[package.metadata.binstall]
pkg-fmt = "tgz"

[package.metadata.binstall.overrides.aarch64-apple-darwin]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-darwin-arm64.{ archive-format }"
bin-dir = "bin/{ bin }"

[package.metadata.binstall.overrides.x86_64-apple-darwin]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-darwin-amd64.{ archive-format }"
bin-dir = "bin/{ bin }"

[package.metadata.binstall.overrides.aarch64-unknown-linux-gnu]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-linux-aarch64.{ archive-format }"
bin-dir = "bin/{ bin }"

[package.metadata.binstall.overrides.riscv64gc-unknown-linux-gnu]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-linux-riscv64gc.{ archive-format }"
bin-dir = "bin/{ bin }"

[package.metadata.binstall.overrides.x86_64-unknown-linux-gnu]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-linux-amd64.{ archive-format }"
bin-dir = "bin/{ bin }"

[package.metadata.binstall.overrides.x86_64-unknown-linux-musl]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-linux-musl-amd64.{ archive-format }"
bin-dir = "bin/{ bin }"

[package.metadata.binstall.overrides.x86_64-pc-windows-msvc]
pkg-url = "{ repo }/releases/download/v{ version }/wasmer-windows-amd64.{ archive-format }"
bin-dir = "bin/{ bin }.exe"

[package.metadata.docs.rs]
rustc-args = ["--cfg", "docsrs"]
