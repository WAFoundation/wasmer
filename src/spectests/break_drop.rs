// Rust test file autogenerated with cargo build (build/spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/break_drop.wast
#![allow(
    warnings,
    dead_code
)]
use wabt::wat2wasm;

use crate::runtime::types::Val;
use crate::webassembly::{compile, instantiate, ImportObject, Instance, ResultObject};

use super::_common::{spectest_importobject, NaNCheck};

// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func))
      (func (;0;) (type 0)
        block  ;; label = @1
          br 0 (;@1;)
        end)
      (func (;1;) (type 0)
        block  ;; label = @1
          i32.const 1
          br_if 0 (;@1;)
        end)
      (func (;2;) (type 0)
        block  ;; label = @1
          i32.const 0
          br_table 0 (;@1;)
        end)
      (export \"br\" (func 0))
      (export \"br_if\" (func 1))
      (export \"br_table\" (func 2)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(&wasm_binary[..], &spectest_importobject(), None)
        .expect("WASM can't be instantiated")
}

fn start_module_1(result_object: &mut ResultObject) {
    // TODO Review is explicit start needed? Start now called in runtime::Instance::new()
    //result_object.instance.start();
}

// Line 7
fn c1_l7_action_invoke(result_object: &mut ResultObject) {
    println!("Executing function {}", "c1_l7_action_invoke");
    let result = result_object
        .instance
        .call("c1_l7_action_invoke", &vec![][..])
        .expect("Missing result in c1_l7_action_invoke");
    assert_eq!(result, None);
}

// Line 8
fn c2_l8_action_invoke(result_object: &mut ResultObject) {
    println!("Executing function {}", "c2_l8_action_invoke");
    let result = result_object
        .instance
        .call("c2_l8_action_invoke", &vec![][..])
        .expect("Missing result in c2_l8_action_invoke");
    assert_eq!(result, None);
}

// Line 9
fn c3_l9_action_invoke(result_object: &mut ResultObject) {
    println!("Executing function {}", "c3_l9_action_invoke");
    let result = result_object
        .instance
        .call("c3_l9_action_invoke", &vec![][..])
        .expect("Missing result in c3_l9_action_invoke");
    assert_eq!(result, None);
}

#[test]
fn test_module_1() {
    let mut result_object = create_module_1();
    // We group the calls together
    start_module_1(&mut result_object);
    c1_l7_action_invoke(&mut result_object);
    c2_l8_action_invoke(&mut result_object);
    c3_l9_action_invoke(&mut result_object);
}
