// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/f32_.wast
#![allow(
    warnings,
    dead_code
)]
use wabt::wat2wasm;

use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, Instance, Export};
use super::_common::{
    spectest_importobject,
    NaNCheck,
};


// Line 5
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param f32 f32) (result f32)))
      (type (;1;) (func (param f32) (result f32)))
      (func (;0;) (type 0) (param f32 f32) (result f32)
        get_local 0
        get_local 1
        f32.add)
      (func (;1;) (type 0) (param f32 f32) (result f32)
        get_local 0
        get_local 1
        f32.sub)
      (func (;2;) (type 0) (param f32 f32) (result f32)
        get_local 0
        get_local 1
        f32.mul)
      (func (;3;) (type 0) (param f32 f32) (result f32)
        get_local 0
        get_local 1
        f32.div)
      (func (;4;) (type 1) (param f32) (result f32)
        get_local 0
        f32.sqrt)
      (func (;5;) (type 0) (param f32 f32) (result f32)
        get_local 0
        get_local 1
        f32.min)
      (func (;6;) (type 0) (param f32 f32) (result f32)
        get_local 0
        get_local 1
        f32.max)
      (func (;7;) (type 1) (param f32) (result f32)
        get_local 0
        f32.ceil)
      (func (;8;) (type 1) (param f32) (result f32)
        get_local 0
        f32.floor)
      (func (;9;) (type 1) (param f32) (result f32)
        get_local 0
        f32.trunc)
      (func (;10;) (type 1) (param f32) (result f32)
        get_local 0
        f32.nearest)
      (export \"add\" (func 0))
      (export \"sub\" (func 1))
      (export \"mul\" (func 2))
      (export \"div\" (func 3))
      (export \"sqrt\" (func 4))
      (export \"min\" (func 5))
      (export \"max\" (func 6))
      (export \"ceil\" (func 7))
      (export \"floor\" (func 8))
      (export \"trunc\" (func 9))
      (export \"nearest\" (func 10)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

fn start_module_1(result_object: &ResultObject) {
    result_object.instance.start();
}

// Line 19
fn c1_l19_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1_l19_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 20
fn c2_l20_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2_l20_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 21
fn c3_l21_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c3_l21_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 22
fn c4_l22_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c4_l22_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 23
fn c5_l23_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c5_l23_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 24
fn c6_l24_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c6_l24_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 25
fn c7_l25_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c7_l25_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 26
fn c8_l26_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c8_l26_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 27
fn c9_l27_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c9_l27_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 28
fn c10_l28_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c10_l28_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 29
fn c11_l29_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c11_l29_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 30
fn c12_l30_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c12_l30_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 31
fn c13_l31_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c13_l31_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 32
fn c14_l32_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c14_l32_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 33
fn c15_l33_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c15_l33_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 34
fn c16_l34_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c16_l34_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 35
fn c17_l35_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c17_l35_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 36
fn c18_l36_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c18_l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 37
fn c19_l37_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c19_l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 38
fn c20_l38_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c20_l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 39
fn c21_l39_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c21_l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 40
fn c22_l40_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c22_l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 41
fn c23_l41_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c23_l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 42
fn c24_l42_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c24_l42_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 43
fn c25_l43_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c25_l43_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 44
fn c26_l44_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c26_l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 45
fn c27_l45_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c27_l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 46
fn c28_l46_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c28_l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 47
fn c29_l47_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c29_l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 48
fn c30_l48_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c30_l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 49
fn c31_l49_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c31_l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 50
fn c32_l50_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c32_l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 51
fn c33_l51_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c33_l51_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 52
fn c34_l52_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c34_l52_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 53
fn c35_l53_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c35_l53_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 54
fn c36_l54_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c36_l54_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 55
fn c37_l55_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c37_l55_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 56
fn c38_l56_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c38_l56_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 57
fn c39_l57_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c39_l57_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 58
fn c40_l58_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c40_l58_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 59
fn c41_l59_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c41_l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 60
fn c42_l60_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c42_l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 61
fn c43_l61_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c43_l61_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 62
fn c44_l62_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c44_l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 63
fn c45_l63_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c45_l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000003 as f32);
}

// Line 64
fn c46_l64_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c46_l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 65
fn c47_l65_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c47_l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 66
fn c48_l66_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c48_l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000003 as f32);
}

// Line 67
fn c49_l67_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c49_l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754945 as f32);
}

// Line 68
fn c50_l68_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c50_l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 69
fn c51_l69_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c51_l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 70
fn c52_l70_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c52_l70_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754945 as f32);
}

// Line 71
fn c53_l71_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c53_l71_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 72
fn c54_l72_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c54_l72_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 73
fn c55_l73_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c55_l73_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 74
fn c56_l74_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c56_l74_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 75
fn c57_l75_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c57_l75_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 76
fn c58_l76_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c58_l76_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 77
fn c59_l77_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c59_l77_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 78
fn c60_l78_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c60_l78_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 79
fn c61_l79_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c61_l79_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 80
fn c62_l80_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c62_l80_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 81
fn c63_l81_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c63_l81_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 82
fn c64_l82_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c64_l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 83
fn c65_l83_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c65_l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 84
fn c66_l84_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c66_l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 85
fn c67_l85_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c67_l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 86
fn c68_l86_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c68_l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 87
fn c69_l87_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c69_l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 88
fn c70_l88_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c70_l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 89
fn c71_l89_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c71_l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 90
fn c72_l90_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c72_l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 91
fn c73_l91_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c73_l91_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 92
fn c74_l92_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c74_l92_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 93
fn c75_l93_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c75_l93_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 94
fn c76_l94_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c76_l94_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 95
fn c77_l95_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c77_l95_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 96
fn c78_l96_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c78_l96_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 97
fn c79_l97_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c79_l97_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 98
fn c80_l98_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c80_l98_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 99
fn c81_l99_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c81_l99_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 100
fn c82_l100_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c82_l100_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 101
fn c83_l101_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c83_l101_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 102
fn c84_l102_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c84_l102_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 103
fn c85_l103_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c85_l103_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754945 as f32);
}

// Line 104
fn c86_l104_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c86_l104_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 105
fn c87_l105_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c87_l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 106
fn c88_l106_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c88_l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754945 as f32);
}

// Line 107
fn c89_l107_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c89_l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000023509887 as f32);
}

// Line 108
fn c90_l108_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c90_l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 109
fn c91_l109_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c91_l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 110
fn c92_l110_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c92_l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000023509887 as f32);
}

// Line 111
fn c93_l111_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c93_l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 112
fn c94_l112_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c94_l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 113
fn c95_l113_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c95_l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 114
fn c96_l114_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c96_l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 115
fn c97_l115_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c97_l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 116
fn c98_l116_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c98_l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 117
fn c99_l117_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c99_l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 118
fn c100_l118_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c100_l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 119
fn c101_l119_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c101_l119_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 120
fn c102_l120_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c102_l120_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 121
fn c103_l121_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c103_l121_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 122
fn c104_l122_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c104_l122_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 123
fn c105_l123_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c105_l123_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 124
fn c106_l124_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c106_l124_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 125
fn c107_l125_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c107_l125_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 126
fn c108_l126_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c108_l126_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 127
fn c109_l127_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c109_l127_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 128
fn c110_l128_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c110_l128_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 129
fn c111_l129_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c111_l129_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 130
fn c112_l130_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c112_l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 131
fn c113_l131_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c113_l131_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 132
fn c114_l132_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c114_l132_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 133
fn c115_l133_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c115_l133_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 134
fn c116_l134_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c116_l134_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 135
fn c117_l135_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c117_l135_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 136
fn c118_l136_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c118_l136_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 137
fn c119_l137_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c119_l137_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 138
fn c120_l138_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c120_l138_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 139
fn c121_l139_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c121_l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 140
fn c122_l140_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c122_l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 141
fn c123_l141_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c123_l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 142
fn c124_l142_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c124_l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 143
fn c125_l143_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c125_l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 144
fn c126_l144_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c126_l144_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 145
fn c127_l145_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c127_l145_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 146
fn c128_l146_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c128_l146_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 147
fn c129_l147_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c129_l147_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 148
fn c130_l148_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c130_l148_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 149
fn c131_l149_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c131_l149_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 150
fn c132_l150_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c132_l150_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 151
fn c133_l151_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c133_l151_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 152
fn c134_l152_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c134_l152_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 153
fn c135_l153_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c135_l153_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 154
fn c136_l154_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c136_l154_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 155
fn c137_l155_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c137_l155_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.5 as f32);
}

// Line 156
fn c138_l156_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c138_l156_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 157
fn c139_l157_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c139_l157_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 158
fn c140_l158_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c140_l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.5 as f32);
}

// Line 159
fn c141_l159_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c141_l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.7831855 as f32);
}

// Line 160
fn c142_l160_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c142_l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 5.7831855 as f32);
}

// Line 161
fn c143_l161_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c143_l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -5.7831855 as f32);
}

// Line 162
fn c144_l162_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c144_l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.7831855 as f32);
}

// Line 163
fn c145_l163_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c145_l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 164
fn c146_l164_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c146_l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 165
fn c147_l165_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c147_l165_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 166
fn c148_l166_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c148_l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 167
fn c149_l167_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c149_l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 168
fn c150_l168_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c150_l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 169
fn c151_l169_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c151_l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 170
fn c152_l170_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c152_l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 171
fn c153_l171_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c153_l171_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 172
fn c154_l172_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c154_l172_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 173
fn c155_l173_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c155_l173_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 174
fn c156_l174_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c156_l174_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 175
fn c157_l175_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c157_l175_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 176
fn c158_l176_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c158_l176_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 177
fn c159_l177_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c159_l177_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 178
fn c160_l178_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c160_l178_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 179
fn c161_l179_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c161_l179_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 180
fn c162_l180_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c162_l180_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 181
fn c163_l181_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c163_l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 182
fn c164_l182_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c164_l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 183
fn c165_l183_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c165_l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 184
fn c166_l184_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c166_l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 185
fn c167_l185_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c167_l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 186
fn c168_l186_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c168_l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 187
fn c169_l187_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c169_l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 188
fn c170_l188_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c170_l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 189
fn c171_l189_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c171_l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 190
fn c172_l190_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c172_l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 191
fn c173_l191_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c173_l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.5 as f32);
}

// Line 192
fn c174_l192_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c174_l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 193
fn c175_l193_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c175_l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 194
fn c176_l194_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c176_l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.5 as f32);
}

// Line 195
fn c177_l195_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c177_l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -2.0 as f32);
}

// Line 196
fn c178_l196_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c178_l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 197
fn c179_l197_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c179_l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 198
fn c180_l198_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c180_l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 2.0 as f32);
}

// Line 199
fn c181_l199_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c181_l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -7.2831855 as f32);
}

// Line 200
fn c182_l200_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c182_l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 5.2831855 as f32);
}

// Line 201
fn c183_l201_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c183_l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -5.2831855 as f32);
}

// Line 202
fn c184_l202_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c184_l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 7.2831855 as f32);
}

// Line 203
fn c185_l203_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c185_l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 204
fn c186_l204_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c186_l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 205
fn c187_l205_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c187_l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 206
fn c188_l206_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c188_l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 207
fn c189_l207_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c189_l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 208
fn c190_l208_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c190_l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 209
fn c191_l209_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c191_l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 210
fn c192_l210_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c192_l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 211
fn c193_l211_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c193_l211_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 212
fn c194_l212_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c194_l212_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 213
fn c195_l213_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c195_l213_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 214
fn c196_l214_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c196_l214_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 215
fn c197_l215_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c197_l215_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 216
fn c198_l216_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c198_l216_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 217
fn c199_l217_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c199_l217_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 218
fn c200_l218_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c200_l218_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 219
fn c201_l219_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c201_l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 220
fn c202_l220_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c202_l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 221
fn c203_l221_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c203_l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 222
fn c204_l222_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c204_l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 223
fn c205_l223_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c205_l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 224
fn c206_l224_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c206_l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 225
fn c207_l225_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c207_l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 226
fn c208_l226_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c208_l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 227
fn c209_l227_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c209_l227_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 228
fn c210_l228_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c210_l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 229
fn c211_l229_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c211_l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 230
fn c212_l230_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c212_l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 231
fn c213_l231_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c213_l231_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -6.7831855 as f32);
}

// Line 232
fn c214_l232_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c214_l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -5.7831855 as f32);
}

// Line 233
fn c215_l233_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c215_l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 5.7831855 as f32);
}

// Line 234
fn c216_l234_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c216_l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 6.7831855 as f32);
}

// Line 235
fn c217_l235_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c217_l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -7.2831855 as f32);
}

// Line 236
fn c218_l236_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c218_l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -5.2831855 as f32);
}

// Line 237
fn c219_l237_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c219_l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 5.2831855 as f32);
}

// Line 238
fn c220_l238_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c220_l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 7.2831855 as f32);
}

// Line 239
fn c221_l239_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c221_l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -12.566371 as f32);
}

// Line 240
fn c222_l240_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c222_l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 241
fn c223_l241_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c223_l241_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 242
fn c224_l242_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c224_l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 12.566371 as f32);
}

// Line 243
fn c225_l243_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c225_l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 244
fn c226_l244_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c226_l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 245
fn c227_l245_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c227_l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 246
fn c228_l246_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c228_l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 247
fn c229_l247_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c229_l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 248
fn c230_l248_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c230_l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 249
fn c231_l249_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c231_l249_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 250
fn c232_l250_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c232_l250_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 251
fn c233_l251_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c233_l251_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 252
fn c234_l252_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c234_l252_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 253
fn c235_l253_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c235_l253_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 254
fn c236_l254_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c236_l254_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 255
fn c237_l255_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c237_l255_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 256
fn c238_l256_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c238_l256_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 257
fn c239_l257_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c239_l257_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 258
fn c240_l258_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c240_l258_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 259
fn c241_l259_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c241_l259_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 260
fn c242_l260_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c242_l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 261
fn c243_l261_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c243_l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 262
fn c244_l262_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c244_l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 263
fn c245_l263_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c245_l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 264
fn c246_l264_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c246_l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 265
fn c247_l265_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c247_l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 266
fn c248_l266_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c248_l266_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 267
fn c249_l267_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c249_l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 268
fn c250_l268_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c250_l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 269
fn c251_l269_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c251_l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 270
fn c252_l270_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c252_l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 271
fn c253_l271_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c253_l271_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 272
fn c254_l272_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c254_l272_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 273
fn c255_l273_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c255_l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 274
fn c256_l274_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c256_l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 275
fn c257_l275_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c257_l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 276
fn c258_l276_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c258_l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 277
fn c259_l277_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c259_l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 278
fn c260_l278_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c260_l278_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 279
fn c261_l279_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c261_l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 280
fn c262_l280_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c262_l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 281
fn c263_l281_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c263_l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 282
fn c264_l282_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c264_l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 283
fn c265_l283_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c265_l283_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 284
fn c266_l284_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c266_l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 285
fn c267_l285_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c267_l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 286
fn c268_l286_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c268_l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 287
fn c269_l287_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c269_l287_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 288
fn c270_l288_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c270_l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 289
fn c271_l289_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c271_l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 290
fn c272_l290_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c272_l290_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 291
fn c273_l291_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c273_l291_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 292
fn c274_l292_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c274_l292_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 293
fn c275_l293_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c275_l293_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 294
fn c276_l294_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c276_l294_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 295
fn c277_l295_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c277_l295_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 296
fn c278_l296_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c278_l296_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 297
fn c279_l297_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c279_l297_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 298
fn c280_l298_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c280_l298_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 299
fn c281_l299_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c281_l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 300
fn c282_l300_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c282_l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 301
fn c283_l301_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c283_l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 302
fn c284_l302_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c284_l302_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 303
fn c285_l303_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c285_l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 304
fn c286_l304_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c286_l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 305
fn c287_l305_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c287_l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 306
fn c288_l306_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c288_l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 307
fn c289_l307_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c289_l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 308
fn c290_l308_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c290_l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 309
fn c291_l309_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c291_l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 310
fn c292_l310_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c292_l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 311
fn c293_l311_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c293_l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 312
fn c294_l312_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c294_l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 313
fn c295_l313_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c295_l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 314
fn c296_l314_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c296_l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 315
fn c297_l315_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c297_l315_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 316
fn c298_l316_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c298_l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 317
fn c299_l317_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c299_l317_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 318
fn c300_l318_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c300_l318_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 319
fn c301_l319_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c301_l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 320
fn c302_l320_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c302_l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 321
fn c303_l321_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c303_l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 322
fn c304_l322_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c304_l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 323
fn c305_l323_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c305_l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 324
fn c306_l324_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c306_l324_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 325
fn c307_l325_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c307_l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 326
fn c308_l326_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c308_l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 327
fn c309_l327_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c309_l327_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 328
fn c310_l328_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c310_l328_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 329
fn c311_l329_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c311_l329_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 330
fn c312_l330_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c312_l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 331
fn c313_l331_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c313_l331_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 332
fn c314_l332_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c314_l332_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 333
fn c315_l333_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c315_l333_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 334
fn c316_l334_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c316_l334_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 335
fn c317_l335_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c317_l335_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 336
fn c318_l336_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c318_l336_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 337
fn c319_l337_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c319_l337_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 338
fn c320_l338_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c320_l338_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 339
fn c321_l339_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c321_l339_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 340
fn c322_l340_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c322_l340_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 341
fn c323_l341_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c323_l341_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 342
fn c324_l342_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c324_l342_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 343
fn c325_l343_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c325_l343_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 344
fn c326_l344_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c326_l344_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 345
fn c327_l345_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c327_l345_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 346
fn c328_l346_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c328_l346_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 347
fn c329_l347_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c329_l347_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 348
fn c330_l348_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c330_l348_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 349
fn c331_l349_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c331_l349_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 350
fn c332_l350_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c332_l350_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 351
fn c333_l351_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c333_l351_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 352
fn c334_l352_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c334_l352_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 353
fn c335_l353_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c335_l353_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 354
fn c336_l354_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c336_l354_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 355
fn c337_l355_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c337_l355_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 356
fn c338_l356_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c338_l356_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 357
fn c339_l357_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c339_l357_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 358
fn c340_l358_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c340_l358_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 359
fn c341_l359_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c341_l359_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 360
fn c342_l360_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c342_l360_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 361
fn c343_l361_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c343_l361_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 362
fn c344_l362_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c344_l362_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 363
fn c345_l363_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c345_l363_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 364
fn c346_l364_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c346_l364_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 365
fn c347_l365_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c347_l365_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 366
fn c348_l366_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c348_l366_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 367
fn c349_l367_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c349_l367_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 368
fn c350_l368_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c350_l368_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 369
fn c351_l369_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c351_l369_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 370
fn c352_l370_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c352_l370_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 371
fn c353_l371_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c353_l371_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 372
fn c354_l372_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c354_l372_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 373
fn c355_l373_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c355_l373_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 374
fn c356_l374_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c356_l374_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 375
fn c357_l375_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c357_l375_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 376
fn c358_l376_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c358_l376_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 377
fn c359_l377_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c359_l377_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 378
fn c360_l378_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c360_l378_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 379
fn c361_l379_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c361_l379_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 380
fn c362_l380_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c362_l380_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 381
fn c363_l381_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c363_l381_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 382
fn c364_l382_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c364_l382_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 383
fn c365_l383_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c365_l383_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 384
fn c366_l384_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c366_l384_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 385
fn c367_l385_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c367_l385_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 386
fn c368_l386_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c368_l386_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 387
fn c369_l387_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c369_l387_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 388
fn c370_l388_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c370_l388_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 389
fn c371_l389_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c371_l389_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 390
fn c372_l390_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c372_l390_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 391
fn c373_l391_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c373_l391_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 392
fn c374_l392_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c374_l392_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 393
fn c375_l393_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c375_l393_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 394
fn c376_l394_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c376_l394_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 395
fn c377_l395_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c377_l395_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 396
fn c378_l396_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c378_l396_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 397
fn c379_l397_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c379_l397_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 398
fn c380_l398_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c380_l398_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 399
fn c381_l399_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c381_l399_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 400
fn c382_l400_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c382_l400_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 401
fn c383_l401_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c383_l401_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 402
fn c384_l402_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c384_l402_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 403
fn c385_l403_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c385_l403_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 404
fn c386_l404_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c386_l404_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 405
fn c387_l405_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c387_l405_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 406
fn c388_l406_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c388_l406_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 407
fn c389_l407_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c389_l407_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 408
fn c390_l408_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c390_l408_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 409
fn c391_l409_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c391_l409_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 410
fn c392_l410_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c392_l410_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 411
fn c393_l411_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c393_l411_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 412
fn c394_l412_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c394_l412_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 413
fn c395_l413_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c395_l413_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 414
fn c396_l414_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c396_l414_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 415
fn c397_l415_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c397_l415_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 416
fn c398_l416_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c398_l416_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 417
fn c399_l417_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c399_l417_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 418
fn c400_l418_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c400_l418_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 419
fn c401_l419_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c401_l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 420
fn c402_l420_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c402_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 421
fn c403_l421_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c403_l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 422
fn c404_l422_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c404_l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 423
fn c405_l423_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c405_l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 424
fn c406_l424_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c406_l424_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 425
fn c407_l425_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c407_l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 426
fn c408_l426_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c408_l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 427
fn c409_l427_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c409_l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 428
fn c410_l428_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c410_l428_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 429
fn c411_l429_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c411_l429_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 430
fn c412_l430_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c412_l430_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 431
fn c413_l431_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c413_l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 432
fn c414_l432_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c414_l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 433
fn c415_l433_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c415_l433_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 434
fn c416_l434_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c416_l434_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 435
fn c417_l435_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c417_l435_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 436
fn c418_l436_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c418_l436_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 437
fn c419_l437_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c419_l437_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 438
fn c420_l438_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c420_l438_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 439
fn c421_l439_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c421_l439_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 440
fn c422_l440_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c422_l440_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 441
fn c423_l441_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c423_l441_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 442
fn c424_l442_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c424_l442_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 443
fn c425_l443_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c425_l443_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 444
fn c426_l444_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c426_l444_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 445
fn c427_l445_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c427_l445_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 446
fn c428_l446_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c428_l446_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 447
fn c429_l447_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c429_l447_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 448
fn c430_l448_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c430_l448_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 449
fn c431_l449_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c431_l449_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 450
fn c432_l450_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c432_l450_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 451
fn c433_l451_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c433_l451_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 452
fn c434_l452_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c434_l452_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 453
fn c435_l453_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c435_l453_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 454
fn c436_l454_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c436_l454_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 455
fn c437_l455_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c437_l455_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 456
fn c438_l456_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c438_l456_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 457
fn c439_l457_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c439_l457_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 458
fn c440_l458_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c440_l458_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 459
fn c441_l459_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c441_l459_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 460
fn c442_l460_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c442_l460_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 461
fn c443_l461_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c443_l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 462
fn c444_l462_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c444_l462_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 463
fn c445_l463_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c445_l463_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 464
fn c446_l464_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c446_l464_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000003 as f32);
}

// Line 465
fn c447_l465_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c447_l465_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000003 as f32);
}

// Line 466
fn c448_l466_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c448_l466_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 467
fn c449_l467_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c449_l467_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 468
fn c450_l468_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c450_l468_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754945 as f32);
}

// Line 469
fn c451_l469_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c451_l469_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754945 as f32);
}

// Line 470
fn c452_l470_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c452_l470_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 471
fn c453_l471_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c453_l471_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 472
fn c454_l472_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c454_l472_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 473
fn c455_l473_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c455_l473_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 474
fn c456_l474_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c456_l474_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 475
fn c457_l475_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c457_l475_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 476
fn c458_l476_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c458_l476_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 477
fn c459_l477_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c459_l477_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 478
fn c460_l478_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c460_l478_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 479
fn c461_l479_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c461_l479_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 480
fn c462_l480_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c462_l480_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 481
fn c463_l481_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c463_l481_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 482
fn c464_l482_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c464_l482_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 483
fn c465_l483_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c465_l483_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 484
fn c466_l484_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c466_l484_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 485
fn c467_l485_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c467_l485_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 486
fn c468_l486_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c468_l486_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 487
fn c469_l487_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c469_l487_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 488
fn c470_l488_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c470_l488_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 489
fn c471_l489_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c471_l489_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 490
fn c472_l490_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c472_l490_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 491
fn c473_l491_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c473_l491_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 492
fn c474_l492_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c474_l492_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 493
fn c475_l493_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c475_l493_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 494
fn c476_l494_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c476_l494_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 495
fn c477_l495_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c477_l495_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 496
fn c478_l496_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c478_l496_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 497
fn c479_l497_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c479_l497_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 498
fn c480_l498_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c480_l498_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 499
fn c481_l499_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c481_l499_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 500
fn c482_l500_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c482_l500_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 501
fn c483_l501_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c483_l501_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 502
fn c484_l502_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c484_l502_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 503
fn c485_l503_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c485_l503_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754942 as f32);
}

// Line 504
fn c486_l504_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c486_l504_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754945 as f32);
}

// Line 505
fn c487_l505_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c487_l505_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754945 as f32);
}

// Line 506
fn c488_l506_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c488_l506_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754942 as f32);
}

// Line 507
fn c489_l507_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c489_l507_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 508
fn c490_l508_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c490_l508_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000023509887 as f32);
}

// Line 509
fn c491_l509_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c491_l509_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000023509887 as f32);
}

// Line 510
fn c492_l510_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c492_l510_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 511
fn c493_l511_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c493_l511_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 512
fn c494_l512_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c494_l512_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 513
fn c495_l513_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c495_l513_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 514
fn c496_l514_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c496_l514_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 515
fn c497_l515_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c497_l515_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 516
fn c498_l516_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c498_l516_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 517
fn c499_l517_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c499_l517_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 518
fn c500_l518_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c500_l518_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 519
fn c501_l519_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c501_l519_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 520
fn c502_l520_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c502_l520_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 521
fn c503_l521_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c503_l521_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 522
fn c504_l522_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c504_l522_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 523
fn c505_l523_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c505_l523_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 524
fn c506_l524_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c506_l524_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 525
fn c507_l525_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c507_l525_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 526
fn c508_l526_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c508_l526_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 527
fn c509_l527_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c509_l527_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 528
fn c510_l528_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c510_l528_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 529
fn c511_l529_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c511_l529_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 530
fn c512_l530_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c512_l530_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 531
fn c513_l531_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c513_l531_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 532
fn c514_l532_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c514_l532_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 533
fn c515_l533_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c515_l533_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 534
fn c516_l534_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c516_l534_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 535
fn c517_l535_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c517_l535_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 536
fn c518_l536_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c518_l536_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 537
fn c519_l537_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c519_l537_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 538
fn c520_l538_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c520_l538_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 539
fn c521_l539_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c521_l539_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 540
fn c522_l540_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c522_l540_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 541
fn c523_l541_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c523_l541_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 542
fn c524_l542_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c524_l542_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 543
fn c525_l543_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c525_l543_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 544
fn c526_l544_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c526_l544_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 545
fn c527_l545_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c527_l545_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 546
fn c528_l546_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c528_l546_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 547
fn c529_l547_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c529_l547_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 548
fn c530_l548_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c530_l548_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 549
fn c531_l549_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c531_l549_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 550
fn c532_l550_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c532_l550_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 551
fn c533_l551_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c533_l551_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 552
fn c534_l552_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c534_l552_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 553
fn c535_l553_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c535_l553_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 554
fn c536_l554_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c536_l554_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 555
fn c537_l555_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c537_l555_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 556
fn c538_l556_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c538_l556_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.5 as f32);
}

// Line 557
fn c539_l557_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c539_l557_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.5 as f32);
}

// Line 558
fn c540_l558_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c540_l558_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 559
fn c541_l559_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c541_l559_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 5.7831855 as f32);
}

// Line 560
fn c542_l560_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c542_l560_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.7831855 as f32);
}

// Line 561
fn c543_l561_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c543_l561_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.7831855 as f32);
}

// Line 562
fn c544_l562_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c544_l562_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -5.7831855 as f32);
}

// Line 563
fn c545_l563_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c545_l563_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 564
fn c546_l564_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c546_l564_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 565
fn c547_l565_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c547_l565_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 566
fn c548_l566_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c548_l566_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 567
fn c549_l567_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c549_l567_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 568
fn c550_l568_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c550_l568_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 569
fn c551_l569_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c551_l569_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 570
fn c552_l570_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c552_l570_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 571
fn c553_l571_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c553_l571_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 572
fn c554_l572_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c554_l572_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 573
fn c555_l573_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c555_l573_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 574
fn c556_l574_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c556_l574_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 575
fn c557_l575_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c557_l575_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 576
fn c558_l576_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c558_l576_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 577
fn c559_l577_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c559_l577_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 578
fn c560_l578_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c560_l578_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 579
fn c561_l579_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c561_l579_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 580
fn c562_l580_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c562_l580_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 581
fn c563_l581_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c563_l581_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 582
fn c564_l582_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c564_l582_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 583
fn c565_l583_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c565_l583_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 584
fn c566_l584_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c566_l584_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 585
fn c567_l585_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c567_l585_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 586
fn c568_l586_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c568_l586_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 587
fn c569_l587_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c569_l587_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 588
fn c570_l588_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c570_l588_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 589
fn c571_l589_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c571_l589_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 590
fn c572_l590_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c572_l590_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 591
fn c573_l591_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c573_l591_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 592
fn c574_l592_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c574_l592_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.5 as f32);
}

// Line 593
fn c575_l593_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c575_l593_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.5 as f32);
}

// Line 594
fn c576_l594_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c576_l594_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 595
fn c577_l595_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c577_l595_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 596
fn c578_l596_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c578_l596_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -2.0 as f32);
}

// Line 597
fn c579_l597_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c579_l597_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 2.0 as f32);
}

// Line 598
fn c580_l598_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c580_l598_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 599
fn c581_l599_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c581_l599_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 5.2831855 as f32);
}

// Line 600
fn c582_l600_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c582_l600_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -7.2831855 as f32);
}

// Line 601
fn c583_l601_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c583_l601_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 7.2831855 as f32);
}

// Line 602
fn c584_l602_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c584_l602_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -5.2831855 as f32);
}

// Line 603
fn c585_l603_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c585_l603_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 604
fn c586_l604_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c586_l604_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 605
fn c587_l605_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c587_l605_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 606
fn c588_l606_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c588_l606_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 607
fn c589_l607_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c589_l607_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 608
fn c590_l608_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c590_l608_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 609
fn c591_l609_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c591_l609_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 610
fn c592_l610_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c592_l610_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 611
fn c593_l611_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c593_l611_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 612
fn c594_l612_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c594_l612_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 613
fn c595_l613_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c595_l613_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 614
fn c596_l614_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c596_l614_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 615
fn c597_l615_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c597_l615_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 616
fn c598_l616_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c598_l616_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 617
fn c599_l617_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c599_l617_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 618
fn c600_l618_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c600_l618_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 619
fn c601_l619_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c601_l619_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 620
fn c602_l620_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c602_l620_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 621
fn c603_l621_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c603_l621_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 622
fn c604_l622_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c604_l622_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 623
fn c605_l623_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c605_l623_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 624
fn c606_l624_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c606_l624_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 625
fn c607_l625_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c607_l625_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 626
fn c608_l626_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c608_l626_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 627
fn c609_l627_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c609_l627_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 628
fn c610_l628_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c610_l628_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 629
fn c611_l629_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c611_l629_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 630
fn c612_l630_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c612_l630_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 631
fn c613_l631_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c613_l631_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -5.7831855 as f32);
}

// Line 632
fn c614_l632_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c614_l632_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -6.7831855 as f32);
}

// Line 633
fn c615_l633_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c615_l633_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 6.7831855 as f32);
}

// Line 634
fn c616_l634_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c616_l634_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 5.7831855 as f32);
}

// Line 635
fn c617_l635_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c617_l635_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -5.2831855 as f32);
}

// Line 636
fn c618_l636_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c618_l636_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -7.2831855 as f32);
}

// Line 637
fn c619_l637_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c619_l637_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 7.2831855 as f32);
}

// Line 638
fn c620_l638_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c620_l638_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 5.2831855 as f32);
}

// Line 639
fn c621_l639_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c621_l639_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 640
fn c622_l640_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c622_l640_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -12.566371 as f32);
}

// Line 641
fn c623_l641_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c623_l641_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 12.566371 as f32);
}

// Line 642
fn c624_l642_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c624_l642_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 643
fn c625_l643_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c625_l643_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 644
fn c626_l644_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c626_l644_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 645
fn c627_l645_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c627_l645_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 646
fn c628_l646_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c628_l646_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 647
fn c629_l647_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c629_l647_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 648
fn c630_l648_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c630_l648_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 649
fn c631_l649_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c631_l649_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 650
fn c632_l650_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c632_l650_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 651
fn c633_l651_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c633_l651_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 652
fn c634_l652_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c634_l652_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 653
fn c635_l653_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c635_l653_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 654
fn c636_l654_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c636_l654_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 655
fn c637_l655_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c637_l655_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 656
fn c638_l656_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c638_l656_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 657
fn c639_l657_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c639_l657_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 658
fn c640_l658_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c640_l658_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 659
fn c641_l659_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c641_l659_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 660
fn c642_l660_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c642_l660_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 661
fn c643_l661_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c643_l661_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 662
fn c644_l662_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c644_l662_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 663
fn c645_l663_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c645_l663_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 664
fn c646_l664_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c646_l664_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 665
fn c647_l665_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c647_l665_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 666
fn c648_l666_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c648_l666_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 667
fn c649_l667_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c649_l667_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 668
fn c650_l668_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c650_l668_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 669
fn c651_l669_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c651_l669_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 670
fn c652_l670_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c652_l670_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 671
fn c653_l671_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c653_l671_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 672
fn c654_l672_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c654_l672_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 673
fn c655_l673_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c655_l673_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 674
fn c656_l674_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c656_l674_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 675
fn c657_l675_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c657_l675_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 676
fn c658_l676_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c658_l676_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 677
fn c659_l677_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c659_l677_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 678
fn c660_l678_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c660_l678_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 679
fn c661_l679_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c661_l679_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 680
fn c662_l680_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c662_l680_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 681
fn c663_l681_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c663_l681_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 682
fn c664_l682_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c664_l682_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 683
fn c665_l683_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c665_l683_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 684
fn c666_l684_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c666_l684_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 685
fn c667_l685_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c667_l685_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 686
fn c668_l686_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c668_l686_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 687
fn c669_l687_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c669_l687_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 688
fn c670_l688_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c670_l688_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 689
fn c671_l689_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c671_l689_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 690
fn c672_l690_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c672_l690_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 691
fn c673_l691_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c673_l691_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 692
fn c674_l692_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c674_l692_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 693
fn c675_l693_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c675_l693_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 694
fn c676_l694_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c676_l694_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 695
fn c677_l695_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c677_l695_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 696
fn c678_l696_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c678_l696_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 697
fn c679_l697_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c679_l697_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 698
fn c680_l698_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c680_l698_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 699
fn c681_l699_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c681_l699_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 700
fn c682_l700_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c682_l700_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 701
fn c683_l701_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c683_l701_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 702
fn c684_l702_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c684_l702_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 703
fn c685_l703_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c685_l703_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 704
fn c686_l704_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c686_l704_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 705
fn c687_l705_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c687_l705_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 706
fn c688_l706_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c688_l706_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 707
fn c689_l707_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c689_l707_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 708
fn c690_l708_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c690_l708_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 709
fn c691_l709_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c691_l709_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 710
fn c692_l710_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c692_l710_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 711
fn c693_l711_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c693_l711_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 712
fn c694_l712_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c694_l712_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 713
fn c695_l713_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c695_l713_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 714
fn c696_l714_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c696_l714_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 715
fn c697_l715_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c697_l715_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 716
fn c698_l716_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c698_l716_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 717
fn c699_l717_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c699_l717_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 718
fn c700_l718_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c700_l718_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 719
fn c701_l719_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c701_l719_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 720
fn c702_l720_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c702_l720_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 721
fn c703_l721_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c703_l721_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 722
fn c704_l722_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c704_l722_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 723
fn c705_l723_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c705_l723_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 724
fn c706_l724_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c706_l724_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 725
fn c707_l725_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c707_l725_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 726
fn c708_l726_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c708_l726_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 727
fn c709_l727_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c709_l727_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 728
fn c710_l728_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c710_l728_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 729
fn c711_l729_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c711_l729_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 730
fn c712_l730_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c712_l730_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 731
fn c713_l731_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c713_l731_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 732
fn c714_l732_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c714_l732_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 733
fn c715_l733_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c715_l733_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 734
fn c716_l734_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c716_l734_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 735
fn c717_l735_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c717_l735_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 736
fn c718_l736_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c718_l736_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 737
fn c719_l737_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c719_l737_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 738
fn c720_l738_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c720_l738_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 739
fn c721_l739_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c721_l739_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 740
fn c722_l740_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c722_l740_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 741
fn c723_l741_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c723_l741_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 742
fn c724_l742_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c724_l742_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 743
fn c725_l743_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c725_l743_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 744
fn c726_l744_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c726_l744_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 745
fn c727_l745_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c727_l745_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 746
fn c728_l746_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c728_l746_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 747
fn c729_l747_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c729_l747_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 748
fn c730_l748_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c730_l748_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 749
fn c731_l749_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c731_l749_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 750
fn c732_l750_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c732_l750_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 751
fn c733_l751_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c733_l751_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 752
fn c734_l752_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c734_l752_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 753
fn c735_l753_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c735_l753_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 754
fn c736_l754_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c736_l754_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 755
fn c737_l755_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c737_l755_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 756
fn c738_l756_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c738_l756_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 757
fn c739_l757_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c739_l757_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 758
fn c740_l758_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c740_l758_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 759
fn c741_l759_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c741_l759_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 760
fn c742_l760_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c742_l760_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 761
fn c743_l761_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c743_l761_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 762
fn c744_l762_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c744_l762_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 763
fn c745_l763_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c745_l763_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 764
fn c746_l764_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c746_l764_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 765
fn c747_l765_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c747_l765_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 766
fn c748_l766_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c748_l766_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 767
fn c749_l767_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c749_l767_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 768
fn c750_l768_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c750_l768_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 769
fn c751_l769_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c751_l769_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 770
fn c752_l770_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c752_l770_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 771
fn c753_l771_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c753_l771_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 772
fn c754_l772_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c754_l772_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 773
fn c755_l773_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c755_l773_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 774
fn c756_l774_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c756_l774_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 775
fn c757_l775_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c757_l775_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 776
fn c758_l776_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c758_l776_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 777
fn c759_l777_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c759_l777_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 778
fn c760_l778_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c760_l778_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 779
fn c761_l779_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c761_l779_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 780
fn c762_l780_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c762_l780_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 781
fn c763_l781_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c763_l781_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 782
fn c764_l782_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c764_l782_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 783
fn c765_l783_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c765_l783_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 784
fn c766_l784_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c766_l784_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 785
fn c767_l785_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c767_l785_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 786
fn c768_l786_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c768_l786_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 787
fn c769_l787_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c769_l787_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 788
fn c770_l788_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c770_l788_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 789
fn c771_l789_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c771_l789_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 790
fn c772_l790_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c772_l790_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 791
fn c773_l791_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c773_l791_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 792
fn c774_l792_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c774_l792_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 793
fn c775_l793_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c775_l793_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 794
fn c776_l794_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c776_l794_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 795
fn c777_l795_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c777_l795_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 796
fn c778_l796_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c778_l796_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 797
fn c779_l797_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c779_l797_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 798
fn c780_l798_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c780_l798_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 799
fn c781_l799_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c781_l799_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 800
fn c782_l800_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c782_l800_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 801
fn c783_l801_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c783_l801_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 802
fn c784_l802_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c784_l802_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 803
fn c785_l803_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c785_l803_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 804
fn c786_l804_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c786_l804_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 805
fn c787_l805_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c787_l805_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 806
fn c788_l806_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c788_l806_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 807
fn c789_l807_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c789_l807_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 808
fn c790_l808_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c790_l808_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 809
fn c791_l809_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c791_l809_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 810
fn c792_l810_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c792_l810_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 811
fn c793_l811_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c793_l811_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 812
fn c794_l812_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c794_l812_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 813
fn c795_l813_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c795_l813_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 814
fn c796_l814_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c796_l814_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 815
fn c797_l815_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c797_l815_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 816
fn c798_l816_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c798_l816_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 817
fn c799_l817_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c799_l817_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 818
fn c800_l818_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c800_l818_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 819
fn c801_l819_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c801_l819_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 820
fn c802_l820_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c802_l820_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 821
fn c803_l821_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c803_l821_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 822
fn c804_l822_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c804_l822_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 823
fn c805_l823_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c805_l823_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 824
fn c806_l824_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c806_l824_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 825
fn c807_l825_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c807_l825_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 826
fn c808_l826_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c808_l826_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 827
fn c809_l827_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c809_l827_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 828
fn c810_l828_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c810_l828_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 829
fn c811_l829_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c811_l829_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 830
fn c812_l830_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c812_l830_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 831
fn c813_l831_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c813_l831_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 832
fn c814_l832_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c814_l832_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 833
fn c815_l833_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c815_l833_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 834
fn c816_l834_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c816_l834_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 835
fn c817_l835_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c817_l835_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 836
fn c818_l836_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c818_l836_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 837
fn c819_l837_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c819_l837_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 838
fn c820_l838_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c820_l838_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 839
fn c821_l839_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c821_l839_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 840
fn c822_l840_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c822_l840_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 841
fn c823_l841_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c823_l841_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 842
fn c824_l842_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c824_l842_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 843
fn c825_l843_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c825_l843_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 844
fn c826_l844_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c826_l844_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 845
fn c827_l845_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c827_l845_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 846
fn c828_l846_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c828_l846_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 847
fn c829_l847_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c829_l847_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 848
fn c830_l848_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c830_l848_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 849
fn c831_l849_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c831_l849_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 850
fn c832_l850_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c832_l850_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 851
fn c833_l851_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c833_l851_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 852
fn c834_l852_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c834_l852_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 853
fn c835_l853_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c835_l853_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 854
fn c836_l854_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c836_l854_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 855
fn c837_l855_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c837_l855_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 856
fn c838_l856_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c838_l856_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 857
fn c839_l857_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c839_l857_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 858
fn c840_l858_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c840_l858_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 859
fn c841_l859_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c841_l859_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 860
fn c842_l860_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c842_l860_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 861
fn c843_l861_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c843_l861_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 862
fn c844_l862_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c844_l862_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 863
fn c845_l863_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c845_l863_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 864
fn c846_l864_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c846_l864_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 865
fn c847_l865_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c847_l865_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 866
fn c848_l866_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c848_l866_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 867
fn c849_l867_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c849_l867_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 868
fn c850_l868_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c850_l868_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 869
fn c851_l869_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c851_l869_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 870
fn c852_l870_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c852_l870_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 871
fn c853_l871_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c853_l871_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 872
fn c854_l872_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c854_l872_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 873
fn c855_l873_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c855_l873_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 874
fn c856_l874_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c856_l874_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 875
fn c857_l875_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c857_l875_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 876
fn c858_l876_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c858_l876_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 877
fn c859_l877_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c859_l877_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 878
fn c860_l878_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c860_l878_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 879
fn c861_l879_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c861_l879_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000008 as f32);
}

// Line 880
fn c862_l880_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c862_l880_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000008 as f32);
}

// Line 881
fn c863_l881_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c863_l881_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000008 as f32);
}

// Line 882
fn c864_l882_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c864_l882_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000008 as f32);
}

// Line 883
fn c865_l883_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c865_l883_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.00000047683713 as f32);
}

// Line 884
fn c866_l884_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c866_l884_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.00000047683713 as f32);
}

// Line 885
fn c867_l885_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c867_l885_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.00000047683713 as f32);
}

// Line 886
fn c868_l886_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c868_l886_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.00000047683713 as f32);
}

// Line 887
fn c869_l887_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c869_l887_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 888
fn c870_l888_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c870_l888_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 889
fn c871_l889_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c871_l889_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 890
fn c872_l890_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c872_l890_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 891
fn c873_l891_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c873_l891_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 892
fn c874_l892_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c874_l892_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 893
fn c875_l893_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c875_l893_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 894
fn c876_l894_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c876_l894_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 895
fn c877_l895_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c877_l895_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 896
fn c878_l896_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c878_l896_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 897
fn c879_l897_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c879_l897_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 898
fn c880_l898_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c880_l898_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 899
fn c881_l899_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c881_l899_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 900
fn c882_l900_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c882_l900_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 901
fn c883_l901_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c883_l901_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 902
fn c884_l902_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c884_l902_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 903
fn c885_l903_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c885_l903_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 904
fn c886_l904_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c886_l904_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 905
fn c887_l905_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c887_l905_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 906
fn c888_l906_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c888_l906_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 907
fn c889_l907_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c889_l907_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 908
fn c890_l908_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c890_l908_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 909
fn c891_l909_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c891_l909_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 910
fn c892_l910_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c892_l910_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 911
fn c893_l911_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c893_l911_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000005877472 as f32);
}

// Line 912
fn c894_l912_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c894_l912_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000005877472 as f32);
}

// Line 913
fn c895_l913_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c895_l913_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000005877472 as f32);
}

// Line 914
fn c896_l914_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c896_l914_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000005877472 as f32);
}

// Line 915
fn c897_l915_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c897_l915_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 916
fn c898_l916_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c898_l916_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 917
fn c899_l917_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c899_l917_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 918
fn c900_l918_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c900_l918_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 919
fn c901_l919_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c901_l919_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.00000000000000000000000000000000000007385849 as f32);
}

// Line 920
fn c902_l920_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c902_l920_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.00000000000000000000000000000000000007385849 as f32);
}

// Line 921
fn c903_l921_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c903_l921_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.00000000000000000000000000000000000007385849 as f32);
}

// Line 922
fn c904_l922_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c904_l922_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.00000000000000000000000000000000000007385849 as f32);
}

// Line 923
fn c905_l923_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c905_l923_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 3.9999998 as f32);
}

// Line 924
fn c906_l924_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c906_l924_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -3.9999998 as f32);
}

// Line 925
fn c907_l925_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c907_l925_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -3.9999998 as f32);
}

// Line 926
fn c908_l926_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c908_l926_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 3.9999998 as f32);
}

// Line 927
fn c909_l927_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c909_l927_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 928
fn c910_l928_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c910_l928_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 929
fn c911_l929_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c911_l929_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 930
fn c912_l930_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c912_l930_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 931
fn c913_l931_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c913_l931_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 932
fn c914_l932_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c914_l932_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 933
fn c915_l933_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c915_l933_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 934
fn c916_l934_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c916_l934_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 935
fn c917_l935_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c917_l935_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 936
fn c918_l936_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c918_l936_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 937
fn c919_l937_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c919_l937_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 938
fn c920_l938_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c920_l938_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 939
fn c921_l939_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c921_l939_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 940
fn c922_l940_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c922_l940_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 941
fn c923_l941_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c923_l941_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 942
fn c924_l942_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c924_l942_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 943
fn c925_l943_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c925_l943_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 944
fn c926_l944_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c926_l944_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 945
fn c927_l945_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c927_l945_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 946
fn c928_l946_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c928_l946_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 947
fn c929_l947_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c929_l947_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000005877472 as f32);
}

// Line 948
fn c930_l948_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c930_l948_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000005877472 as f32);
}

// Line 949
fn c931_l949_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c931_l949_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000005877472 as f32);
}

// Line 950
fn c932_l950_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c932_l950_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000005877472 as f32);
}

// Line 951
fn c933_l951_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c933_l951_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.25 as f32);
}

// Line 952
fn c934_l952_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c934_l952_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.25 as f32);
}

// Line 953
fn c935_l953_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c935_l953_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.25 as f32);
}

// Line 954
fn c936_l954_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c936_l954_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.25 as f32);
}

// Line 955
fn c937_l955_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c937_l955_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 956
fn c938_l956_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c938_l956_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 957
fn c939_l957_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c939_l957_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 958
fn c940_l958_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c940_l958_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 959
fn c941_l959_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c941_l959_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 3.1415927 as f32);
}

// Line 960
fn c942_l960_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c942_l960_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -3.1415927 as f32);
}

// Line 961
fn c943_l961_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c943_l961_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -3.1415927 as f32);
}

// Line 962
fn c944_l962_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c944_l962_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 3.1415927 as f32);
}

// Line 963
fn c945_l963_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c945_l963_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 170141170000000000000000000000000000000.0 as f32);
}

// Line 964
fn c946_l964_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c946_l964_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -170141170000000000000000000000000000000.0 as f32);
}

// Line 965
fn c947_l965_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c947_l965_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -170141170000000000000000000000000000000.0 as f32);
}

// Line 966
fn c948_l966_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c948_l966_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 170141170000000000000000000000000000000.0 as f32);
}

// Line 967
fn c949_l967_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c949_l967_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 968
fn c950_l968_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c950_l968_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 969
fn c951_l969_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c951_l969_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 970
fn c952_l970_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c952_l970_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 971
fn c953_l971_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c953_l971_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 972
fn c954_l972_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c954_l972_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 973
fn c955_l973_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c955_l973_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 974
fn c956_l974_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c956_l974_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 975
fn c957_l975_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c957_l975_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 976
fn c958_l976_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c958_l976_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 977
fn c959_l977_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c959_l977_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 978
fn c960_l978_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c960_l978_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 979
fn c961_l979_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c961_l979_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 980
fn c962_l980_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c962_l980_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 981
fn c963_l981_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c963_l981_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 982
fn c964_l982_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c964_l982_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 983
fn c965_l983_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c965_l983_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 984
fn c966_l984_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c966_l984_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 985
fn c967_l985_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c967_l985_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 986
fn c968_l986_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c968_l986_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 987
fn c969_l987_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c969_l987_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 988
fn c970_l988_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c970_l988_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 989
fn c971_l989_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c971_l989_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 990
fn c972_l990_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c972_l990_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 991
fn c973_l991_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c973_l991_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 992
fn c974_l992_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c974_l992_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 993
fn c975_l993_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c975_l993_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 994
fn c976_l994_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c976_l994_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 995
fn c977_l995_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c977_l995_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 996
fn c978_l996_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c978_l996_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 997
fn c979_l997_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c979_l997_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 998
fn c980_l998_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c980_l998_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 999
fn c981_l999_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c981_l999_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1000
fn c982_l1000_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c982_l1000_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1001
fn c983_l1001_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c983_l1001_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1002
fn c984_l1002_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c984_l1002_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1003
fn c985_l1003_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c985_l1003_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1004
fn c986_l1004_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c986_l1004_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1005
fn c987_l1005_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c987_l1005_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1006
fn c988_l1006_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c988_l1006_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1007
fn c989_l1007_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c989_l1007_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1008
fn c990_l1008_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c990_l1008_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1009
fn c991_l1009_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c991_l1009_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1010
fn c992_l1010_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c992_l1010_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1011
fn c993_l1011_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c993_l1011_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1012
fn c994_l1012_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c994_l1012_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1013
fn c995_l1013_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c995_l1013_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1014
fn c996_l1014_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c996_l1014_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1015
fn c997_l1015_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c997_l1015_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1016
fn c998_l1016_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c998_l1016_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1017
fn c999_l1017_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c999_l1017_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1018
fn c1000_l1018_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1000_l1018_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1019
fn c1001_l1019_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1001_l1019_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1020
fn c1002_l1020_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1002_l1020_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1021
fn c1003_l1021_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1003_l1021_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1022
fn c1004_l1022_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1004_l1022_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1023
fn c1005_l1023_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1005_l1023_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000008 as f32);
}

// Line 1024
fn c1006_l1024_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1006_l1024_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000008 as f32);
}

// Line 1025
fn c1007_l1025_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1007_l1025_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000008 as f32);
}

// Line 1026
fn c1008_l1026_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1008_l1026_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000008 as f32);
}

// Line 1027
fn c1009_l1027_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1009_l1027_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.00000000000000000000000000000000000007385849 as f32);
}

// Line 1028
fn c1010_l1028_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1010_l1028_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.00000000000000000000000000000000000007385849 as f32);
}

// Line 1029
fn c1011_l1029_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1011_l1029_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.00000000000000000000000000000000000007385849 as f32);
}

// Line 1030
fn c1012_l1030_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1012_l1030_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.00000000000000000000000000000000000007385849 as f32);
}

// Line 1031
fn c1013_l1031_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1013_l1031_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 3.1415927 as f32);
}

// Line 1032
fn c1014_l1032_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1014_l1032_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -3.1415927 as f32);
}

// Line 1033
fn c1015_l1033_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1015_l1033_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -3.1415927 as f32);
}

// Line 1034
fn c1016_l1034_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1016_l1034_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 3.1415927 as f32);
}

// Line 1035
fn c1017_l1035_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1017_l1035_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1036
fn c1018_l1036_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1018_l1036_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1037
fn c1019_l1037_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1019_l1037_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1038
fn c1020_l1038_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1020_l1038_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1039
fn c1021_l1039_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1021_l1039_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 39.47842 as f32);
}

// Line 1040
fn c1022_l1040_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1022_l1040_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -39.47842 as f32);
}

// Line 1041
fn c1023_l1041_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1023_l1041_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -39.47842 as f32);
}

// Line 1042
fn c1024_l1042_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1024_l1042_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 39.47842 as f32);
}

// Line 1043
fn c1025_l1043_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1025_l1043_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1044
fn c1026_l1044_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1026_l1044_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1045
fn c1027_l1045_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1027_l1045_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1046
fn c1028_l1046_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1028_l1046_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1047
fn c1029_l1047_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1029_l1047_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1048
fn c1030_l1048_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1030_l1048_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1049
fn c1031_l1049_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1031_l1049_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1050
fn c1032_l1050_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1032_l1050_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1051
fn c1033_l1051_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1033_l1051_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1052
fn c1034_l1052_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1034_l1052_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1053
fn c1035_l1053_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1035_l1053_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1054
fn c1036_l1054_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1036_l1054_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1055
fn c1037_l1055_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1037_l1055_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1056
fn c1038_l1056_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1038_l1056_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1057
fn c1039_l1057_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1039_l1057_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1058
fn c1040_l1058_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1040_l1058_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1059
fn c1041_l1059_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1041_l1059_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1060
fn c1042_l1060_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1042_l1060_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1061
fn c1043_l1061_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1043_l1061_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1062
fn c1044_l1062_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1044_l1062_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1063
fn c1045_l1063_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1045_l1063_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.00000047683713 as f32);
}

// Line 1064
fn c1046_l1064_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1046_l1064_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.00000047683713 as f32);
}

// Line 1065
fn c1047_l1065_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1047_l1065_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.00000047683713 as f32);
}

// Line 1066
fn c1048_l1066_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1048_l1066_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.00000047683713 as f32);
}

// Line 1067
fn c1049_l1067_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1049_l1067_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 3.9999998 as f32);
}

// Line 1068
fn c1050_l1068_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1050_l1068_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -3.9999998 as f32);
}

// Line 1069
fn c1051_l1069_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1051_l1069_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -3.9999998 as f32);
}

// Line 1070
fn c1052_l1070_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1052_l1070_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 3.9999998 as f32);
}

// Line 1071
fn c1053_l1071_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1053_l1071_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 170141170000000000000000000000000000000.0 as f32);
}

// Line 1072
fn c1054_l1072_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1054_l1072_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -170141170000000000000000000000000000000.0 as f32);
}

// Line 1073
fn c1055_l1073_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1055_l1073_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -170141170000000000000000000000000000000.0 as f32);
}

// Line 1074
fn c1056_l1074_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1056_l1074_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 170141170000000000000000000000000000000.0 as f32);
}

// Line 1075
fn c1057_l1075_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1057_l1075_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1076
fn c1058_l1076_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1058_l1076_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1077
fn c1059_l1077_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1059_l1077_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1078
fn c1060_l1078_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1060_l1078_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1079
fn c1061_l1079_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1061_l1079_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1080
fn c1062_l1080_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1062_l1080_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1081
fn c1063_l1081_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1063_l1081_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1082
fn c1064_l1082_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1064_l1082_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1083
fn c1065_l1083_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1065_l1083_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1084
fn c1066_l1084_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1066_l1084_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1085
fn c1067_l1085_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1067_l1085_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1086
fn c1068_l1086_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1068_l1086_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1087
fn c1069_l1087_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1069_l1087_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1088
fn c1070_l1088_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1070_l1088_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1089
fn c1071_l1089_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1071_l1089_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1090
fn c1072_l1090_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1072_l1090_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1091
fn c1073_l1091_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1073_l1091_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1092
fn c1074_l1092_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1074_l1092_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1093
fn c1075_l1093_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1075_l1093_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1094
fn c1076_l1094_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1076_l1094_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1095
fn c1077_l1095_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1077_l1095_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1096
fn c1078_l1096_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1078_l1096_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1097
fn c1079_l1097_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1079_l1097_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1098
fn c1080_l1098_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1080_l1098_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1099
fn c1081_l1099_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1081_l1099_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1100
fn c1082_l1100_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1082_l1100_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1101
fn c1083_l1101_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1083_l1101_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1102
fn c1084_l1102_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1084_l1102_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1103
fn c1085_l1103_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1085_l1103_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1104
fn c1086_l1104_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1086_l1104_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1105
fn c1087_l1105_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1087_l1105_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1106
fn c1088_l1106_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1088_l1106_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1107
fn c1089_l1107_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1089_l1107_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1108
fn c1090_l1108_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1090_l1108_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1109
fn c1091_l1109_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1091_l1109_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1110
fn c1092_l1110_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1092_l1110_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1111
fn c1093_l1111_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1093_l1111_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1112
fn c1094_l1112_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1094_l1112_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1113
fn c1095_l1113_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1095_l1113_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1114
fn c1096_l1114_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1096_l1114_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1115
fn c1097_l1115_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1097_l1115_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1116
fn c1098_l1116_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1098_l1116_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1117
fn c1099_l1117_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1099_l1117_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1118
fn c1100_l1118_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1100_l1118_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1119
fn c1101_l1119_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1101_l1119_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1120
fn c1102_l1120_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1102_l1120_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1121
fn c1103_l1121_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1103_l1121_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1122
fn c1104_l1122_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1104_l1122_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1123
fn c1105_l1123_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1105_l1123_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1124
fn c1106_l1124_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1106_l1124_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1125
fn c1107_l1125_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1107_l1125_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1126
fn c1108_l1126_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1108_l1126_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1127
fn c1109_l1127_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1109_l1127_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1128
fn c1110_l1128_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1110_l1128_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1129
fn c1111_l1129_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1111_l1129_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1130
fn c1112_l1130_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1112_l1130_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1131
fn c1113_l1131_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1113_l1131_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1132
fn c1114_l1132_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1114_l1132_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1133
fn c1115_l1133_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1115_l1133_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1134
fn c1116_l1134_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1116_l1134_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1135
fn c1117_l1135_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1117_l1135_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1136
fn c1118_l1136_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1118_l1136_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1137
fn c1119_l1137_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1119_l1137_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1138
fn c1120_l1138_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1120_l1138_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1139
fn c1121_l1139_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1121_l1139_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1140
fn c1122_l1140_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1122_l1140_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1141
fn c1123_l1141_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1123_l1141_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1142
fn c1124_l1142_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1124_l1142_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1143
fn c1125_l1143_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1125_l1143_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1144
fn c1126_l1144_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1126_l1144_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1145
fn c1127_l1145_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1127_l1145_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1146
fn c1128_l1146_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1128_l1146_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1147
fn c1129_l1147_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1129_l1147_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1148
fn c1130_l1148_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1130_l1148_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1149
fn c1131_l1149_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1131_l1149_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1150
fn c1132_l1150_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1132_l1150_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1151
fn c1133_l1151_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1133_l1151_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1152
fn c1134_l1152_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1134_l1152_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1153
fn c1135_l1153_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1135_l1153_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1154
fn c1136_l1154_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1136_l1154_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1155
fn c1137_l1155_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1137_l1155_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1156
fn c1138_l1156_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1138_l1156_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1157
fn c1139_l1157_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1139_l1157_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1158
fn c1140_l1158_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1140_l1158_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1159
fn c1141_l1159_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1141_l1159_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1160
fn c1142_l1160_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1142_l1160_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1161
fn c1143_l1161_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1143_l1161_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1162
fn c1144_l1162_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1144_l1162_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1163
fn c1145_l1163_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1145_l1163_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1164
fn c1146_l1164_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1146_l1164_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1165
fn c1147_l1165_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1147_l1165_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1166
fn c1148_l1166_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1148_l1166_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1167
fn c1149_l1167_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1149_l1167_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1168
fn c1150_l1168_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1150_l1168_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1169
fn c1151_l1169_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1151_l1169_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1170
fn c1152_l1170_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1152_l1170_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1171
fn c1153_l1171_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1153_l1171_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1172
fn c1154_l1172_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1154_l1172_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1173
fn c1155_l1173_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1155_l1173_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1174
fn c1156_l1174_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1156_l1174_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1175
fn c1157_l1175_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1157_l1175_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1176
fn c1158_l1176_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1158_l1176_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1177
fn c1159_l1177_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1159_l1177_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1178
fn c1160_l1178_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1160_l1178_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1179
fn c1161_l1179_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1161_l1179_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1180
fn c1162_l1180_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1162_l1180_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1181
fn c1163_l1181_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1163_l1181_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1182
fn c1164_l1182_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1164_l1182_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1183
fn c1165_l1183_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1165_l1183_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1184
fn c1166_l1184_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1166_l1184_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1185
fn c1167_l1185_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1167_l1185_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1186
fn c1168_l1186_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1168_l1186_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1187
fn c1169_l1187_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1169_l1187_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1188
fn c1170_l1188_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1170_l1188_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1189
fn c1171_l1189_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1171_l1189_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1190
fn c1172_l1190_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1172_l1190_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1191
fn c1173_l1191_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1173_l1191_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1192
fn c1174_l1192_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1174_l1192_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1193
fn c1175_l1193_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1175_l1193_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1194
fn c1176_l1194_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1176_l1194_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1195
fn c1177_l1195_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1177_l1195_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1196
fn c1178_l1196_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1178_l1196_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1197
fn c1179_l1197_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1179_l1197_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1198
fn c1180_l1198_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1180_l1198_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1199
fn c1181_l1199_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1181_l1199_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1200
fn c1182_l1200_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1182_l1200_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1201
fn c1183_l1201_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1183_l1201_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1202
fn c1184_l1202_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1184_l1202_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1203
fn c1185_l1203_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1185_l1203_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1204
fn c1186_l1204_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1186_l1204_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1205
fn c1187_l1205_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1187_l1205_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1206
fn c1188_l1206_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1188_l1206_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1207
fn c1189_l1207_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1189_l1207_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1208
fn c1190_l1208_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1190_l1208_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1209
fn c1191_l1209_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1191_l1209_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1210
fn c1192_l1210_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1192_l1210_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1211
fn c1193_l1211_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1193_l1211_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1212
fn c1194_l1212_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1194_l1212_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1213
fn c1195_l1213_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1195_l1213_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1214
fn c1196_l1214_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1196_l1214_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1215
fn c1197_l1215_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1197_l1215_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1216
fn c1198_l1216_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1198_l1216_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1217
fn c1199_l1217_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1199_l1217_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1218
fn c1200_l1218_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1200_l1218_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1219
fn c1201_l1219_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1201_l1219_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1220
fn c1202_l1220_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1202_l1220_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1221
fn c1203_l1221_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1203_l1221_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1222
fn c1204_l1222_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1204_l1222_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1223
fn c1205_l1223_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1205_l1223_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1224
fn c1206_l1224_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1206_l1224_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1225
fn c1207_l1225_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1207_l1225_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1226
fn c1208_l1226_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1208_l1226_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1227
fn c1209_l1227_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1209_l1227_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1228
fn c1210_l1228_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1210_l1228_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1229
fn c1211_l1229_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1211_l1229_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1230
fn c1212_l1230_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1212_l1230_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1231
fn c1213_l1231_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1213_l1231_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1232
fn c1214_l1232_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1214_l1232_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1233
fn c1215_l1233_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1215_l1233_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1234
fn c1216_l1234_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1216_l1234_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1235
fn c1217_l1235_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1217_l1235_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1236
fn c1218_l1236_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1218_l1236_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1237
fn c1219_l1237_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1219_l1237_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1238
fn c1220_l1238_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1220_l1238_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1239
fn c1221_l1239_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1221_l1239_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1240
fn c1222_l1240_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1222_l1240_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1241
fn c1223_l1241_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1223_l1241_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1242
fn c1224_l1242_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1224_l1242_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1243
fn c1225_l1243_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1225_l1243_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1244
fn c1226_l1244_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1226_l1244_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1245
fn c1227_l1245_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1227_l1245_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1246
fn c1228_l1246_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1228_l1246_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1247
fn c1229_l1247_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1229_l1247_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1248
fn c1230_l1248_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1230_l1248_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1249
fn c1231_l1249_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1231_l1249_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1250
fn c1232_l1250_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1232_l1250_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1251
fn c1233_l1251_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1233_l1251_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1252
fn c1234_l1252_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1234_l1252_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1253
fn c1235_l1253_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1235_l1253_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1254
fn c1236_l1254_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1236_l1254_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1255
fn c1237_l1255_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1237_l1255_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1256
fn c1238_l1256_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1238_l1256_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1257
fn c1239_l1257_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1239_l1257_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1258
fn c1240_l1258_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1240_l1258_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1259
fn c1241_l1259_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1241_l1259_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1260
fn c1242_l1260_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1242_l1260_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1261
fn c1243_l1261_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1243_l1261_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1262
fn c1244_l1262_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1244_l1262_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1263
fn c1245_l1263_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1245_l1263_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1264
fn c1246_l1264_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1246_l1264_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1265
fn c1247_l1265_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1247_l1265_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1266
fn c1248_l1266_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1248_l1266_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1267
fn c1249_l1267_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1249_l1267_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.00000011920929 as f32);
}

// Line 1268
fn c1250_l1268_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1250_l1268_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.00000011920929 as f32);
}

// Line 1269
fn c1251_l1269_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1251_l1269_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.00000011920929 as f32);
}

// Line 1270
fn c1252_l1270_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1252_l1270_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.00000011920929 as f32);
}

// Line 1271
fn c1253_l1271_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1253_l1271_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000003 as f32);
}

// Line 1272
fn c1254_l1272_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1254_l1272_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000003 as f32);
}

// Line 1273
fn c1255_l1273_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1255_l1273_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000003 as f32);
}

// Line 1274
fn c1256_l1274_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1256_l1274_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000003 as f32);
}

// Line 1275
fn c1257_l1275_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1257_l1275_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1276
fn c1258_l1276_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1258_l1276_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1277
fn c1259_l1277_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1259_l1277_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1278
fn c1260_l1278_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1260_l1278_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1279
fn c1261_l1279_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1261_l1279_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1280
fn c1262_l1280_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1262_l1280_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1281
fn c1263_l1281_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1263_l1281_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1282
fn c1264_l1282_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1264_l1282_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1283
fn c1265_l1283_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1265_l1283_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1284
fn c1266_l1284_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1266_l1284_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1285
fn c1267_l1285_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1267_l1285_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1286
fn c1268_l1286_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1268_l1286_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1287
fn c1269_l1287_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1269_l1287_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1288
fn c1270_l1288_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1270_l1288_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1289
fn c1271_l1289_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1271_l1289_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1290
fn c1272_l1290_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1272_l1290_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1291
fn c1273_l1291_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1273_l1291_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1292
fn c1274_l1292_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1274_l1292_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1293
fn c1275_l1293_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1275_l1293_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1294
fn c1276_l1294_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1276_l1294_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1295
fn c1277_l1295_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1277_l1295_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1296
fn c1278_l1296_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1278_l1296_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1297
fn c1279_l1297_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1279_l1297_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1298
fn c1280_l1298_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1280_l1298_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1299
fn c1281_l1299_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1281_l1299_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1300
fn c1282_l1300_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1282_l1300_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1301
fn c1283_l1301_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1283_l1301_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1302
fn c1284_l1302_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1284_l1302_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1303
fn c1285_l1303_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1285_l1303_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 8388608.0 as f32);
}

// Line 1304
fn c1286_l1304_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1286_l1304_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -8388608.0 as f32);
}

// Line 1305
fn c1287_l1305_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1287_l1305_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -8388608.0 as f32);
}

// Line 1306
fn c1288_l1306_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1288_l1306_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 8388608.0 as f32);
}

// Line 1307
fn c1289_l1307_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1289_l1307_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1308
fn c1290_l1308_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1290_l1308_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1309
fn c1291_l1309_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1291_l1309_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1310
fn c1292_l1310_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1292_l1310_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1311
fn c1293_l1311_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1293_l1311_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000023509887 as f32);
}

// Line 1312
fn c1294_l1312_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1294_l1312_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000023509887 as f32);
}

// Line 1313
fn c1295_l1313_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1295_l1313_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000023509887 as f32);
}

// Line 1314
fn c1296_l1314_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1296_l1314_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000023509887 as f32);
}

// Line 1315
fn c1297_l1315_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1297_l1315_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1316
fn c1298_l1316_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1298_l1316_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1317
fn c1299_l1317_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1299_l1317_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1318
fn c1300_l1318_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1300_l1318_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1319
fn c1301_l1319_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1301_l1319_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000001870857 as f32);
}

// Line 1320
fn c1302_l1320_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1302_l1320_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000001870857 as f32);
}

// Line 1321
fn c1303_l1321_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1303_l1321_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000001870857 as f32);
}

// Line 1322
fn c1304_l1322_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1304_l1322_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000001870857 as f32);
}

// Line 1323
fn c1305_l1323_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1305_l1323_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1324
fn c1306_l1324_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1306_l1324_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1325
fn c1307_l1325_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1307_l1325_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1326
fn c1308_l1326_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1308_l1326_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1327
fn c1309_l1327_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1309_l1327_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1328
fn c1310_l1328_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1310_l1328_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1329
fn c1311_l1329_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1311_l1329_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1330
fn c1312_l1330_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1312_l1330_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1331
fn c1313_l1331_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1313_l1331_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1332
fn c1314_l1332_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1314_l1332_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1333
fn c1315_l1333_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1315_l1333_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1334
fn c1316_l1334_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1316_l1334_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1335
fn c1317_l1335_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1317_l1335_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1336
fn c1318_l1336_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1318_l1336_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1337
fn c1319_l1337_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1319_l1337_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1338
fn c1320_l1338_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1320_l1338_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1339
fn c1321_l1339_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1321_l1339_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1340
fn c1322_l1340_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1322_l1340_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1341
fn c1323_l1341_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1323_l1341_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1342
fn c1324_l1342_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1324_l1342_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1343
fn c1325_l1343_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1325_l1343_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1344
fn c1326_l1344_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1326_l1344_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1345
fn c1327_l1345_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1327_l1345_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1346
fn c1328_l1346_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1328_l1346_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1347
fn c1329_l1347_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1329_l1347_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 42535296000000000000000000000000000000.0 as f32);
}

// Line 1348
fn c1330_l1348_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1330_l1348_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -42535296000000000000000000000000000000.0 as f32);
}

// Line 1349
fn c1331_l1349_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1331_l1349_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -42535296000000000000000000000000000000.0 as f32);
}

// Line 1350
fn c1332_l1350_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1332_l1350_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 42535296000000000000000000000000000000.0 as f32);
}

// Line 1351
fn c1333_l1351_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1333_l1351_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1352
fn c1334_l1352_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1334_l1352_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1353
fn c1335_l1353_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1335_l1353_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1354
fn c1336_l1354_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1336_l1354_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1355
fn c1337_l1355_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1337_l1355_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1356
fn c1338_l1356_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1338_l1356_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1357
fn c1339_l1357_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1339_l1357_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1358
fn c1340_l1358_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1340_l1358_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1359
fn c1341_l1359_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1341_l1359_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.07957747 as f32);
}

// Line 1360
fn c1342_l1360_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1342_l1360_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.07957747 as f32);
}

// Line 1361
fn c1343_l1361_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1343_l1361_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.07957747 as f32);
}

// Line 1362
fn c1344_l1362_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1344_l1362_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.07957747 as f32);
}

// Line 1363
fn c1345_l1363_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1345_l1363_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000001469368 as f32);
}

// Line 1364
fn c1346_l1364_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1346_l1364_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000001469368 as f32);
}

// Line 1365
fn c1347_l1365_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1347_l1365_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000001469368 as f32);
}

// Line 1366
fn c1348_l1366_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1348_l1366_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000001469368 as f32);
}

// Line 1367
fn c1349_l1367_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1349_l1367_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1368
fn c1350_l1368_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1350_l1368_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1369
fn c1351_l1369_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1351_l1369_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1370
fn c1352_l1370_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1352_l1370_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1371
fn c1353_l1371_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1353_l1371_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1372
fn c1354_l1372_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1354_l1372_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1373
fn c1355_l1373_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1355_l1373_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1374
fn c1356_l1374_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1356_l1374_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1375
fn c1357_l1375_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1357_l1375_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1376
fn c1358_l1376_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1358_l1376_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1377
fn c1359_l1377_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1359_l1377_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1378
fn c1360_l1378_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1360_l1378_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1379
fn c1361_l1379_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1361_l1379_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1380
fn c1362_l1380_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1362_l1380_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1381
fn c1363_l1381_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1363_l1381_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1382
fn c1364_l1382_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1364_l1382_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1383
fn c1365_l1383_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1365_l1383_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1384
fn c1366_l1384_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1366_l1384_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1385
fn c1367_l1385_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1367_l1385_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1386
fn c1368_l1386_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1368_l1386_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1387
fn c1369_l1387_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1369_l1387_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 85070590000000000000000000000000000000.0 as f32);
}

// Line 1388
fn c1370_l1388_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1370_l1388_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -85070590000000000000000000000000000000.0 as f32);
}

// Line 1389
fn c1371_l1389_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1371_l1389_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -85070590000000000000000000000000000000.0 as f32);
}

// Line 1390
fn c1372_l1390_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1372_l1390_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 85070590000000000000000000000000000000.0 as f32);
}

// Line 1391
fn c1373_l1391_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1373_l1391_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 2.0 as f32);
}

// Line 1392
fn c1374_l1392_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1374_l1392_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -2.0 as f32);
}

// Line 1393
fn c1375_l1393_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1375_l1393_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -2.0 as f32);
}

// Line 1394
fn c1376_l1394_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1376_l1394_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 2.0 as f32);
}

// Line 1395
fn c1377_l1395_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1377_l1395_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1396
fn c1378_l1396_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1378_l1396_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1397
fn c1379_l1397_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1379_l1397_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1398
fn c1380_l1398_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1380_l1398_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1399
fn c1381_l1399_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1381_l1399_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.15915494 as f32);
}

// Line 1400
fn c1382_l1400_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1382_l1400_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.15915494 as f32);
}

// Line 1401
fn c1383_l1401_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1383_l1401_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.15915494 as f32);
}

// Line 1402
fn c1384_l1402_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1384_l1402_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.15915494 as f32);
}

// Line 1403
fn c1385_l1403_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1385_l1403_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000002938736 as f32);
}

// Line 1404
fn c1386_l1404_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1386_l1404_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000002938736 as f32);
}

// Line 1405
fn c1387_l1405_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1387_l1405_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000002938736 as f32);
}

// Line 1406
fn c1388_l1406_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1388_l1406_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000002938736 as f32);
}

// Line 1407
fn c1389_l1407_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1389_l1407_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1408
fn c1390_l1408_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1390_l1408_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1409
fn c1391_l1409_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1391_l1409_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1410
fn c1392_l1410_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1392_l1410_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1411
fn c1393_l1411_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1393_l1411_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1412
fn c1394_l1412_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1394_l1412_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1413
fn c1395_l1413_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1395_l1413_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1414
fn c1396_l1414_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1396_l1414_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1415
fn c1397_l1415_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1397_l1415_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1416
fn c1398_l1416_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1398_l1416_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1417
fn c1399_l1417_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1399_l1417_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1418
fn c1400_l1418_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1400_l1418_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1419
fn c1401_l1419_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1401_l1419_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1420
fn c1402_l1420_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1402_l1420_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1421
fn c1403_l1421_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1403_l1421_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1422
fn c1404_l1422_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1404_l1422_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1423
fn c1405_l1423_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1405_l1423_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1424
fn c1406_l1424_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1406_l1424_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1425
fn c1407_l1425_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1407_l1425_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1426
fn c1408_l1426_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1408_l1426_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1427
fn c1409_l1427_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1409_l1427_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1428
fn c1410_l1428_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1410_l1428_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1429
fn c1411_l1429_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1411_l1429_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1430
fn c1412_l1430_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1412_l1430_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1431
fn c1413_l1431_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1413_l1431_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 12.566371 as f32);
}

// Line 1432
fn c1414_l1432_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1414_l1432_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -12.566371 as f32);
}

// Line 1433
fn c1415_l1433_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1415_l1433_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -12.566371 as f32);
}

// Line 1434
fn c1416_l1434_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1416_l1434_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 12.566371 as f32);
}

// Line 1435
fn c1417_l1435_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1417_l1435_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1436
fn c1418_l1436_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1418_l1436_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1437
fn c1419_l1437_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1419_l1437_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1438
fn c1420_l1438_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1420_l1438_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1439
fn c1421_l1439_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1421_l1439_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1440
fn c1422_l1440_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1422_l1440_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1441
fn c1423_l1441_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1423_l1441_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1442
fn c1424_l1442_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1424_l1442_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1443
fn c1425_l1443_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1425_l1443_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000018464624 as f32);
}

// Line 1444
fn c1426_l1444_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1426_l1444_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000018464624 as f32);
}

// Line 1445
fn c1427_l1445_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1427_l1445_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000018464624 as f32);
}

// Line 1446
fn c1428_l1446_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1428_l1446_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000018464624 as f32);
}

// Line 1447
fn c1429_l1447_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1429_l1447_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1448
fn c1430_l1448_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1430_l1448_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1449
fn c1431_l1449_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1431_l1449_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1450
fn c1432_l1450_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1432_l1450_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1451
fn c1433_l1451_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1433_l1451_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1452
fn c1434_l1452_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1434_l1452_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1453
fn c1435_l1453_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1435_l1453_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1454
fn c1436_l1454_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1436_l1454_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1455
fn c1437_l1455_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1437_l1455_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1456
fn c1438_l1456_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1438_l1456_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1457
fn c1439_l1457_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1439_l1457_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1458
fn c1440_l1458_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1440_l1458_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1459
fn c1441_l1459_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1441_l1459_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1460
fn c1442_l1460_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1442_l1460_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1461
fn c1443_l1461_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1443_l1461_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1462
fn c1444_l1462_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1444_l1462_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1463
fn c1445_l1463_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1445_l1463_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1464
fn c1446_l1464_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1446_l1464_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1465
fn c1447_l1465_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1447_l1465_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1466
fn c1448_l1466_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1448_l1466_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1467
fn c1449_l1467_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1449_l1467_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1468
fn c1450_l1468_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1450_l1468_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1469
fn c1451_l1469_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1451_l1469_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1470
fn c1452_l1470_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1452_l1470_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1471
fn c1453_l1471_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1453_l1471_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1472
fn c1454_l1472_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1454_l1472_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1473
fn c1455_l1473_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1455_l1473_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1474
fn c1456_l1474_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1456_l1474_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1475
fn c1457_l1475_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1457_l1475_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1476
fn c1458_l1476_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1458_l1476_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1477
fn c1459_l1477_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1459_l1477_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1478
fn c1460_l1478_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1460_l1478_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1479
fn c1461_l1479_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1461_l1479_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 54157613000000000000000000000000000000.0 as f32);
}

// Line 1480
fn c1462_l1480_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1462_l1480_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -54157613000000000000000000000000000000.0 as f32);
}

// Line 1481
fn c1463_l1481_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1463_l1481_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -54157613000000000000000000000000000000.0 as f32);
}

// Line 1482
fn c1464_l1482_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1464_l1482_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 54157613000000000000000000000000000000.0 as f32);
}

// Line 1483
fn c1465_l1483_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1465_l1483_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1484
fn c1466_l1484_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1466_l1484_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1485
fn c1467_l1485_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1467_l1485_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1486
fn c1468_l1486_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1468_l1486_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1487
fn c1469_l1487_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1469_l1487_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1488
fn c1470_l1488_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1470_l1488_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1489
fn c1471_l1489_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1471_l1489_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1490
fn c1472_l1490_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1472_l1490_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1491
fn c1473_l1491_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1473_l1491_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1492
fn c1474_l1492_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1474_l1492_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1493
fn c1475_l1493_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1475_l1493_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1494
fn c1476_l1494_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1476_l1494_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1495
fn c1477_l1495_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1477_l1495_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1496
fn c1478_l1496_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1478_l1496_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1497
fn c1479_l1497_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1479_l1497_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1498
fn c1480_l1498_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1480_l1498_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1499
fn c1481_l1499_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1481_l1499_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1500
fn c1482_l1500_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1482_l1500_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1501
fn c1483_l1501_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1483_l1501_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1502
fn c1484_l1502_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1484_l1502_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1503
fn c1485_l1503_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1485_l1503_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1504
fn c1486_l1504_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1486_l1504_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1505
fn c1487_l1505_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1487_l1505_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1506
fn c1488_l1506_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1488_l1506_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1507
fn c1489_l1507_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1489_l1507_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1508
fn c1490_l1508_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1490_l1508_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1509
fn c1491_l1509_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1491_l1509_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1510
fn c1492_l1510_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1492_l1510_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1511
fn c1493_l1511_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1493_l1511_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1512
fn c1494_l1512_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1494_l1512_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1513
fn c1495_l1513_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1495_l1513_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1514
fn c1496_l1514_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1496_l1514_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1515
fn c1497_l1515_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1497_l1515_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1516
fn c1498_l1516_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1498_l1516_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1517
fn c1499_l1517_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1499_l1517_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1518
fn c1500_l1518_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1500_l1518_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1519
fn c1501_l1519_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1501_l1519_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1520
fn c1502_l1520_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1502_l1520_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1521
fn c1503_l1521_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1503_l1521_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1522
fn c1504_l1522_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1504_l1522_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1523
fn c1505_l1523_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1505_l1523_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1524
fn c1506_l1524_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1506_l1524_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1525
fn c1507_l1525_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1507_l1525_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1526
fn c1508_l1526_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1508_l1526_action_invoke");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1527
fn c1509_l1527_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1509_l1527_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1528
fn c1510_l1528_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1510_l1528_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1529
fn c1511_l1529_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1511_l1529_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1530
fn c1512_l1530_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1512_l1530_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1531
fn c1513_l1531_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1513_l1531_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1532
fn c1514_l1532_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1514_l1532_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1533
fn c1515_l1533_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1515_l1533_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1534
fn c1516_l1534_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1516_l1534_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1535
fn c1517_l1535_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1517_l1535_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1536
fn c1518_l1536_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1518_l1536_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1537
fn c1519_l1537_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1519_l1537_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1538
fn c1520_l1538_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1520_l1538_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1539
fn c1521_l1539_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1521_l1539_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1540
fn c1522_l1540_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1522_l1540_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1541
fn c1523_l1541_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1523_l1541_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1542
fn c1524_l1542_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1524_l1542_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1543
fn c1525_l1543_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1525_l1543_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1544
fn c1526_l1544_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1526_l1544_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1545
fn c1527_l1545_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1527_l1545_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1546
fn c1528_l1546_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1528_l1546_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1547
fn c1529_l1547_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1529_l1547_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1548
fn c1530_l1548_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1530_l1548_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1549
fn c1531_l1549_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1531_l1549_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1550
fn c1532_l1550_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1532_l1550_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1551
fn c1533_l1551_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1533_l1551_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1552
fn c1534_l1552_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1534_l1552_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1553
fn c1535_l1553_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1535_l1553_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1554
fn c1536_l1554_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1536_l1554_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1555
fn c1537_l1555_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1537_l1555_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1556
fn c1538_l1556_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1538_l1556_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1557
fn c1539_l1557_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1539_l1557_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1558
fn c1540_l1558_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1540_l1558_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1559
fn c1541_l1559_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1541_l1559_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1560
fn c1542_l1560_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1542_l1560_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1561
fn c1543_l1561_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1543_l1561_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1562
fn c1544_l1562_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1544_l1562_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1563
fn c1545_l1563_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1545_l1563_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1564
fn c1546_l1564_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1546_l1564_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1565
fn c1547_l1565_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1547_l1565_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1566
fn c1548_l1566_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1548_l1566_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1567
fn c1549_l1567_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1549_l1567_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1568
fn c1550_l1568_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1550_l1568_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1569
fn c1551_l1569_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1551_l1569_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1570
fn c1552_l1570_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1552_l1570_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1571
fn c1553_l1571_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1553_l1571_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1572
fn c1554_l1572_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1554_l1572_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1573
fn c1555_l1573_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1555_l1573_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1574
fn c1556_l1574_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1556_l1574_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1575
fn c1557_l1575_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1557_l1575_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1576
fn c1558_l1576_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1558_l1576_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1577
fn c1559_l1577_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1559_l1577_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1578
fn c1560_l1578_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1560_l1578_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1579
fn c1561_l1579_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1561_l1579_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1580
fn c1562_l1580_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1562_l1580_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1581
fn c1563_l1581_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1563_l1581_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1582
fn c1564_l1582_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1564_l1582_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1583
fn c1565_l1583_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1565_l1583_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1584
fn c1566_l1584_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1566_l1584_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1585
fn c1567_l1585_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1567_l1585_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1586
fn c1568_l1586_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1568_l1586_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1587
fn c1569_l1587_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1569_l1587_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1588
fn c1570_l1588_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1570_l1588_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1589
fn c1571_l1589_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1571_l1589_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1590
fn c1572_l1590_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1572_l1590_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1591
fn c1573_l1591_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1573_l1591_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1592
fn c1574_l1592_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1574_l1592_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1593
fn c1575_l1593_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1575_l1593_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1594
fn c1576_l1594_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1576_l1594_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1595
fn c1577_l1595_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1577_l1595_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1596
fn c1578_l1596_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1578_l1596_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1597
fn c1579_l1597_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1579_l1597_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1598
fn c1580_l1598_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1580_l1598_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1599
fn c1581_l1599_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1581_l1599_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1600
fn c1582_l1600_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1582_l1600_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1601
fn c1583_l1601_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1583_l1601_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1602
fn c1584_l1602_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1584_l1602_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1603
fn c1585_l1603_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1585_l1603_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1604
fn c1586_l1604_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1586_l1604_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1605
fn c1587_l1605_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1587_l1605_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1606
fn c1588_l1606_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1588_l1606_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1607
fn c1589_l1607_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1589_l1607_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1608
fn c1590_l1608_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1590_l1608_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1609
fn c1591_l1609_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1591_l1609_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1610
fn c1592_l1610_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1592_l1610_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1611
fn c1593_l1611_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1593_l1611_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1612
fn c1594_l1612_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1594_l1612_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1613
fn c1595_l1613_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1595_l1613_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1614
fn c1596_l1614_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1596_l1614_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1615
fn c1597_l1615_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1597_l1615_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1616
fn c1598_l1616_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1598_l1616_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1617
fn c1599_l1617_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1599_l1617_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1618
fn c1600_l1618_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1600_l1618_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1619
fn c1601_l1619_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1601_l1619_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1620
fn c1602_l1620_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1602_l1620_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1621
fn c1603_l1621_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1603_l1621_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1622
fn c1604_l1622_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1604_l1622_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1623
fn c1605_l1623_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1605_l1623_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1624
fn c1606_l1624_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1606_l1624_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1625
fn c1607_l1625_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1607_l1625_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1626
fn c1608_l1626_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1608_l1626_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1627
fn c1609_l1627_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1609_l1627_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1628
fn c1610_l1628_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1610_l1628_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1629
fn c1611_l1629_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1611_l1629_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1630
fn c1612_l1630_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1612_l1630_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1631
fn c1613_l1631_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1613_l1631_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1632
fn c1614_l1632_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1614_l1632_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1633
fn c1615_l1633_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1615_l1633_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1634
fn c1616_l1634_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1616_l1634_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1635
fn c1617_l1635_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1617_l1635_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1636
fn c1618_l1636_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1618_l1636_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1637
fn c1619_l1637_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1619_l1637_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1638
fn c1620_l1638_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1620_l1638_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1639
fn c1621_l1639_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1621_l1639_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1640
fn c1622_l1640_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1622_l1640_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1641
fn c1623_l1641_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1623_l1641_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1642
fn c1624_l1642_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1624_l1642_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1643
fn c1625_l1643_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1625_l1643_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1644
fn c1626_l1644_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1626_l1644_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1645
fn c1627_l1645_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1627_l1645_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1646
fn c1628_l1646_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1628_l1646_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1647
fn c1629_l1647_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1629_l1647_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1648
fn c1630_l1648_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1630_l1648_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1649
fn c1631_l1649_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1631_l1649_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1650
fn c1632_l1650_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1632_l1650_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1651
fn c1633_l1651_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1633_l1651_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1652
fn c1634_l1652_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1634_l1652_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1653
fn c1635_l1653_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1635_l1653_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1654
fn c1636_l1654_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1636_l1654_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1655
fn c1637_l1655_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1637_l1655_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1656
fn c1638_l1656_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1638_l1656_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1657
fn c1639_l1657_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1639_l1657_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1658
fn c1640_l1658_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1640_l1658_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1659
fn c1641_l1659_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1641_l1659_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1660
fn c1642_l1660_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1642_l1660_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1661
fn c1643_l1661_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1643_l1661_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1662
fn c1644_l1662_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1644_l1662_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1663
fn c1645_l1663_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1645_l1663_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1664
fn c1646_l1664_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1646_l1664_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1665
fn c1647_l1665_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1647_l1665_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1666
fn c1648_l1666_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1648_l1666_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1667
fn c1649_l1667_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1649_l1667_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1668
fn c1650_l1668_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1650_l1668_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1669
fn c1651_l1669_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1651_l1669_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1670
fn c1652_l1670_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1652_l1670_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1671
fn c1653_l1671_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1653_l1671_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1672
fn c1654_l1672_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1654_l1672_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1673
fn c1655_l1673_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1655_l1673_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1674
fn c1656_l1674_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1656_l1674_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1675
fn c1657_l1675_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1657_l1675_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1676
fn c1658_l1676_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1658_l1676_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1677
fn c1659_l1677_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1659_l1677_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1678
fn c1660_l1678_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1660_l1678_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1679
fn c1661_l1679_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1661_l1679_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1680
fn c1662_l1680_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1662_l1680_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1681
fn c1663_l1681_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1663_l1681_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1682
fn c1664_l1682_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1664_l1682_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1683
fn c1665_l1683_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1665_l1683_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1684
fn c1666_l1684_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1666_l1684_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1685
fn c1667_l1685_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1667_l1685_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1686
fn c1668_l1686_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1668_l1686_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1687
fn c1669_l1687_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1669_l1687_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1688
fn c1670_l1688_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1670_l1688_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1689
fn c1671_l1689_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1671_l1689_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1690
fn c1672_l1690_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1672_l1690_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1691
fn c1673_l1691_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1673_l1691_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1692
fn c1674_l1692_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1674_l1692_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1693
fn c1675_l1693_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1675_l1693_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1694
fn c1676_l1694_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1676_l1694_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1695
fn c1677_l1695_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1677_l1695_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1696
fn c1678_l1696_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1678_l1696_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1697
fn c1679_l1697_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1679_l1697_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1698
fn c1680_l1698_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1680_l1698_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1699
fn c1681_l1699_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1681_l1699_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1700
fn c1682_l1700_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1682_l1700_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1701
fn c1683_l1701_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1683_l1701_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1702
fn c1684_l1702_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1684_l1702_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1703
fn c1685_l1703_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1685_l1703_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1704
fn c1686_l1704_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1686_l1704_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1705
fn c1687_l1705_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1687_l1705_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1706
fn c1688_l1706_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1688_l1706_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1707
fn c1689_l1707_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1689_l1707_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1708
fn c1690_l1708_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1690_l1708_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1709
fn c1691_l1709_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1691_l1709_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1710
fn c1692_l1710_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1692_l1710_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1711
fn c1693_l1711_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1693_l1711_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1712
fn c1694_l1712_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1694_l1712_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1713
fn c1695_l1713_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1695_l1713_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1714
fn c1696_l1714_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1696_l1714_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1715
fn c1697_l1715_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1697_l1715_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1716
fn c1698_l1716_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1698_l1716_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1717
fn c1699_l1717_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1699_l1717_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1718
fn c1700_l1718_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1700_l1718_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1719
fn c1701_l1719_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1701_l1719_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1720
fn c1702_l1720_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1702_l1720_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1721
fn c1703_l1721_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1703_l1721_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1722
fn c1704_l1722_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1704_l1722_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1723
fn c1705_l1723_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1705_l1723_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1724
fn c1706_l1724_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1706_l1724_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1725
fn c1707_l1725_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1707_l1725_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1726
fn c1708_l1726_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1708_l1726_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1727
fn c1709_l1727_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1709_l1727_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1728
fn c1710_l1728_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1710_l1728_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1729
fn c1711_l1729_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1711_l1729_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1730
fn c1712_l1730_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1712_l1730_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1731
fn c1713_l1731_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1713_l1731_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1732
fn c1714_l1732_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1714_l1732_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1733
fn c1715_l1733_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1715_l1733_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1734
fn c1716_l1734_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1716_l1734_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1735
fn c1717_l1735_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1717_l1735_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1736
fn c1718_l1736_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1718_l1736_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1737
fn c1719_l1737_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1719_l1737_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1738
fn c1720_l1738_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1720_l1738_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1739
fn c1721_l1739_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1721_l1739_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1740
fn c1722_l1740_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1722_l1740_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1741
fn c1723_l1741_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1723_l1741_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1742
fn c1724_l1742_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1724_l1742_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1743
fn c1725_l1743_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1725_l1743_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1744
fn c1726_l1744_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1726_l1744_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1745
fn c1727_l1745_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1727_l1745_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1746
fn c1728_l1746_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1728_l1746_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1747
fn c1729_l1747_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1729_l1747_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1748
fn c1730_l1748_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1730_l1748_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1749
fn c1731_l1749_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1731_l1749_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1750
fn c1732_l1750_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1732_l1750_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1751
fn c1733_l1751_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1733_l1751_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1752
fn c1734_l1752_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1734_l1752_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1753
fn c1735_l1753_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1735_l1753_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1754
fn c1736_l1754_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1736_l1754_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1755
fn c1737_l1755_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1737_l1755_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1756
fn c1738_l1756_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1738_l1756_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1757
fn c1739_l1757_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1739_l1757_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1758
fn c1740_l1758_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1740_l1758_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1759
fn c1741_l1759_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1741_l1759_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1760
fn c1742_l1760_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1742_l1760_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1761
fn c1743_l1761_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1743_l1761_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1762
fn c1744_l1762_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1744_l1762_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1763
fn c1745_l1763_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1745_l1763_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1764
fn c1746_l1764_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1746_l1764_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1765
fn c1747_l1765_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1747_l1765_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1766
fn c1748_l1766_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1748_l1766_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1767
fn c1749_l1767_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1749_l1767_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1768
fn c1750_l1768_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1750_l1768_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1769
fn c1751_l1769_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1751_l1769_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1770
fn c1752_l1770_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1752_l1770_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1771
fn c1753_l1771_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1753_l1771_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1772
fn c1754_l1772_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1754_l1772_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1773
fn c1755_l1773_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1755_l1773_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1774
fn c1756_l1774_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1756_l1774_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1775
fn c1757_l1775_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1757_l1775_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1776
fn c1758_l1776_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1758_l1776_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1777
fn c1759_l1777_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1759_l1777_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1778
fn c1760_l1778_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1760_l1778_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1779
fn c1761_l1779_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1761_l1779_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1780
fn c1762_l1780_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1762_l1780_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1781
fn c1763_l1781_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1763_l1781_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1782
fn c1764_l1782_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1764_l1782_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1783
fn c1765_l1783_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1765_l1783_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1784
fn c1766_l1784_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1766_l1784_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1785
fn c1767_l1785_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1767_l1785_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1786
fn c1768_l1786_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1768_l1786_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1787
fn c1769_l1787_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1769_l1787_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1788
fn c1770_l1788_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1770_l1788_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1789
fn c1771_l1789_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1771_l1789_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1790
fn c1772_l1790_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1772_l1790_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1791
fn c1773_l1791_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1773_l1791_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1792
fn c1774_l1792_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1774_l1792_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1793
fn c1775_l1793_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1775_l1793_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1794
fn c1776_l1794_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1776_l1794_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1795
fn c1777_l1795_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1777_l1795_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1796
fn c1778_l1796_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1778_l1796_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1797
fn c1779_l1797_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1779_l1797_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1798
fn c1780_l1798_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1780_l1798_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1799
fn c1781_l1799_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1781_l1799_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1800
fn c1782_l1800_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1782_l1800_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1801
fn c1783_l1801_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1783_l1801_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1802
fn c1784_l1802_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1784_l1802_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1803
fn c1785_l1803_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1785_l1803_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1804
fn c1786_l1804_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1786_l1804_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1805
fn c1787_l1805_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1787_l1805_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1806
fn c1788_l1806_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1788_l1806_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1807
fn c1789_l1807_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1789_l1807_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1808
fn c1790_l1808_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1790_l1808_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1809
fn c1791_l1809_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1791_l1809_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1810
fn c1792_l1810_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1792_l1810_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1811
fn c1793_l1811_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1793_l1811_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1812
fn c1794_l1812_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1794_l1812_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1813
fn c1795_l1813_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1795_l1813_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1814
fn c1796_l1814_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1796_l1814_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1815
fn c1797_l1815_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1797_l1815_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1816
fn c1798_l1816_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1798_l1816_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1817
fn c1799_l1817_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1799_l1817_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1818
fn c1800_l1818_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1800_l1818_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1819
fn c1801_l1819_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1801_l1819_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1820
fn c1802_l1820_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1802_l1820_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1821
fn c1803_l1821_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1803_l1821_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1822
fn c1804_l1822_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1804_l1822_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1823
fn c1805_l1823_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1805_l1823_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1824
fn c1806_l1824_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1806_l1824_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1825
fn c1807_l1825_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1807_l1825_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1826
fn c1808_l1826_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1808_l1826_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1827
fn c1809_l1827_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1809_l1827_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1828
fn c1810_l1828_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1810_l1828_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1829
fn c1811_l1829_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1811_l1829_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1830
fn c1812_l1830_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1812_l1830_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1831
fn c1813_l1831_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1813_l1831_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1832
fn c1814_l1832_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1814_l1832_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1833
fn c1815_l1833_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1815_l1833_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1834
fn c1816_l1834_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1816_l1834_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1835
fn c1817_l1835_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1817_l1835_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1836
fn c1818_l1836_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1818_l1836_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1837
fn c1819_l1837_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1819_l1837_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1838
fn c1820_l1838_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1820_l1838_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1839
fn c1821_l1839_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1821_l1839_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1840
fn c1822_l1840_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1822_l1840_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1841
fn c1823_l1841_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1823_l1841_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1842
fn c1824_l1842_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1824_l1842_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1843
fn c1825_l1843_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1825_l1843_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1844
fn c1826_l1844_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1826_l1844_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1845
fn c1827_l1845_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1827_l1845_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1846
fn c1828_l1846_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1828_l1846_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1847
fn c1829_l1847_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1829_l1847_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1848
fn c1830_l1848_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1830_l1848_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1849
fn c1831_l1849_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1831_l1849_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1850
fn c1832_l1850_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1832_l1850_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1851
fn c1833_l1851_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1833_l1851_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1852
fn c1834_l1852_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1834_l1852_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1853
fn c1835_l1853_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1835_l1853_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1854
fn c1836_l1854_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1836_l1854_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1855
fn c1837_l1855_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1837_l1855_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1856
fn c1838_l1856_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1838_l1856_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1857
fn c1839_l1857_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1839_l1857_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1858
fn c1840_l1858_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1840_l1858_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1859
fn c1841_l1859_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1841_l1859_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1860
fn c1842_l1860_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1842_l1860_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1861
fn c1843_l1861_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1843_l1861_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1862
fn c1844_l1862_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1844_l1862_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1863
fn c1845_l1863_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1845_l1863_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1864
fn c1846_l1864_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1846_l1864_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1865
fn c1847_l1865_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1847_l1865_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1866
fn c1848_l1866_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1848_l1866_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1867
fn c1849_l1867_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1849_l1867_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1868
fn c1850_l1868_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1850_l1868_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1869
fn c1851_l1869_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1851_l1869_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1870
fn c1852_l1870_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1852_l1870_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1871
fn c1853_l1871_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1853_l1871_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1872
fn c1854_l1872_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1854_l1872_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1873
fn c1855_l1873_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1855_l1873_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1874
fn c1856_l1874_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1856_l1874_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1875
fn c1857_l1875_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1857_l1875_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1876
fn c1858_l1876_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1858_l1876_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1877
fn c1859_l1877_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1859_l1877_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1878
fn c1860_l1878_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1860_l1878_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1879
fn c1861_l1879_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1861_l1879_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1880
fn c1862_l1880_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1862_l1880_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1881
fn c1863_l1881_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1863_l1881_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1882
fn c1864_l1882_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1864_l1882_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1883
fn c1865_l1883_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1865_l1883_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1884
fn c1866_l1884_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1866_l1884_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1885
fn c1867_l1885_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1867_l1885_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1886
fn c1868_l1886_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1868_l1886_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1887
fn c1869_l1887_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1869_l1887_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1888
fn c1870_l1888_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1870_l1888_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1889
fn c1871_l1889_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1871_l1889_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1890
fn c1872_l1890_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1872_l1890_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1891
fn c1873_l1891_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1873_l1891_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1892
fn c1874_l1892_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1874_l1892_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1893
fn c1875_l1893_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1875_l1893_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1894
fn c1876_l1894_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1876_l1894_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1895
fn c1877_l1895_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1877_l1895_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1896
fn c1878_l1896_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1878_l1896_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1897
fn c1879_l1897_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1879_l1897_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1898
fn c1880_l1898_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1880_l1898_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1899
fn c1881_l1899_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1881_l1899_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1900
fn c1882_l1900_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1882_l1900_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1901
fn c1883_l1901_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1883_l1901_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 1902
fn c1884_l1902_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1884_l1902_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 1903
fn c1885_l1903_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1885_l1903_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1904
fn c1886_l1904_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1886_l1904_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1905
fn c1887_l1905_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1887_l1905_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1906
fn c1888_l1906_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1888_l1906_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 1907
fn c1889_l1907_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1889_l1907_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1908
fn c1890_l1908_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1890_l1908_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1909
fn c1891_l1909_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1891_l1909_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1910
fn c1892_l1910_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1892_l1910_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 1911
fn c1893_l1911_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1893_l1911_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1912
fn c1894_l1912_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1894_l1912_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1913
fn c1895_l1913_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1895_l1913_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 1914
fn c1896_l1914_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1896_l1914_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 1915
fn c1897_l1915_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1897_l1915_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1916
fn c1898_l1916_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1898_l1916_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1917
fn c1899_l1917_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1899_l1917_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 1918
fn c1900_l1918_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1900_l1918_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 1919
fn c1901_l1919_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1901_l1919_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1920
fn c1902_l1920_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1902_l1920_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1921
fn c1903_l1921_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1903_l1921_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 1922
fn c1904_l1922_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1904_l1922_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 1923
fn c1905_l1923_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1905_l1923_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1924
fn c1906_l1924_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1906_l1924_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1925
fn c1907_l1925_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1907_l1925_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 1926
fn c1908_l1926_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1908_l1926_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 1927
fn c1909_l1927_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1909_l1927_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1928
fn c1910_l1928_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1910_l1928_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1929
fn c1911_l1929_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1911_l1929_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 1930
fn c1912_l1930_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1912_l1930_action_invoke");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 1931
fn c1913_l1931_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1913_l1931_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1932
fn c1914_l1932_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1914_l1932_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1933
fn c1915_l1933_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1915_l1933_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1934
fn c1916_l1934_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1916_l1934_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1935
fn c1917_l1935_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1917_l1935_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1936
fn c1918_l1936_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1918_l1936_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1937
fn c1919_l1937_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1919_l1937_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1938
fn c1920_l1938_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1920_l1938_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1939
fn c1921_l1939_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1921_l1939_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1940
fn c1922_l1940_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1922_l1940_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1941
fn c1923_l1941_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1923_l1941_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1942
fn c1924_l1942_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1924_l1942_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1943
fn c1925_l1943_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1925_l1943_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1944
fn c1926_l1944_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1926_l1944_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1945
fn c1927_l1945_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1927_l1945_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1946
fn c1928_l1946_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1928_l1946_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1947
fn c1929_l1947_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1929_l1947_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1948
fn c1930_l1948_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1930_l1948_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1949
fn c1931_l1949_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1931_l1949_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1950
fn c1932_l1950_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1932_l1950_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1951
fn c1933_l1951_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1933_l1951_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1952
fn c1934_l1952_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1934_l1952_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1953
fn c1935_l1953_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1935_l1953_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1954
fn c1936_l1954_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1936_l1954_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1955
fn c1937_l1955_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1937_l1955_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1956
fn c1938_l1956_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1938_l1956_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1957
fn c1939_l1957_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1939_l1957_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1958
fn c1940_l1958_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1940_l1958_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1959
fn c1941_l1959_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1941_l1959_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1960
fn c1942_l1960_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1942_l1960_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1961
fn c1943_l1961_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1943_l1961_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1962
fn c1944_l1962_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1944_l1962_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1963
fn c1945_l1963_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1945_l1963_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1964
fn c1946_l1964_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1946_l1964_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1965
fn c1947_l1965_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1947_l1965_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1966
fn c1948_l1966_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1948_l1966_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1967
fn c1949_l1967_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1949_l1967_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1968
fn c1950_l1968_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1950_l1968_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1969
fn c1951_l1969_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1951_l1969_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1970
fn c1952_l1970_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1952_l1970_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1971
fn c1953_l1971_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1953_l1971_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1972
fn c1954_l1972_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1954_l1972_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1973
fn c1955_l1973_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1955_l1973_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1974
fn c1956_l1974_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1956_l1974_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1975
fn c1957_l1975_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1957_l1975_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1976
fn c1958_l1976_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1958_l1976_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1977
fn c1959_l1977_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1959_l1977_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1978
fn c1960_l1978_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1960_l1978_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1979
fn c1961_l1979_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1961_l1979_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1980
fn c1962_l1980_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1962_l1980_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1981
fn c1963_l1981_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1963_l1981_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1982
fn c1964_l1982_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1964_l1982_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1983
fn c1965_l1983_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1965_l1983_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1984
fn c1966_l1984_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1966_l1984_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1985
fn c1967_l1985_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1967_l1985_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1986
fn c1968_l1986_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1968_l1986_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1987
fn c1969_l1987_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1969_l1987_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1988
fn c1970_l1988_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1970_l1988_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1989
fn c1971_l1989_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1971_l1989_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1990
fn c1972_l1990_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1972_l1990_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1991
fn c1973_l1991_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1973_l1991_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1992
fn c1974_l1992_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1974_l1992_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1993
fn c1975_l1993_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1975_l1993_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1994
fn c1976_l1994_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1976_l1994_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1995
fn c1977_l1995_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1977_l1995_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1996
fn c1978_l1996_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1978_l1996_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1997
fn c1979_l1997_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1979_l1997_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1998
fn c1980_l1998_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1980_l1998_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 1999
fn c1981_l1999_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1981_l1999_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2000
fn c1982_l2000_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1982_l2000_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2001
fn c1983_l2001_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1983_l2001_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2002
fn c1984_l2002_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1984_l2002_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2003
fn c1985_l2003_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1985_l2003_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2004
fn c1986_l2004_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1986_l2004_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2005
fn c1987_l2005_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1987_l2005_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2006
fn c1988_l2006_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1988_l2006_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2007
fn c1989_l2007_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1989_l2007_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2008
fn c1990_l2008_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1990_l2008_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2009
fn c1991_l2009_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1991_l2009_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2010
fn c1992_l2010_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1992_l2010_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2011
fn c1993_l2011_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1993_l2011_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2012
fn c1994_l2012_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1994_l2012_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2013
fn c1995_l2013_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1995_l2013_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2014
fn c1996_l2014_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1996_l2014_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2015
fn c1997_l2015_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1997_l2015_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2016
fn c1998_l2016_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1998_l2016_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2017
fn c1999_l2017_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c1999_l2017_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2018
fn c2000_l2018_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2000_l2018_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2019
fn c2001_l2019_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2001_l2019_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2020
fn c2002_l2020_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2002_l2020_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2021
fn c2003_l2021_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2003_l2021_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2022
fn c2004_l2022_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2004_l2022_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2023
fn c2005_l2023_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2005_l2023_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2024
fn c2006_l2024_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2006_l2024_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2025
fn c2007_l2025_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2007_l2025_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2026
fn c2008_l2026_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2008_l2026_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2027
fn c2009_l2027_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2009_l2027_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2028
fn c2010_l2028_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2010_l2028_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2029
fn c2011_l2029_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2011_l2029_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2030
fn c2012_l2030_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2012_l2030_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2031
fn c2013_l2031_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2013_l2031_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2032
fn c2014_l2032_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2014_l2032_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2033
fn c2015_l2033_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2015_l2033_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2034
fn c2016_l2034_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2016_l2034_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2035
fn c2017_l2035_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2017_l2035_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2036
fn c2018_l2036_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2018_l2036_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2037
fn c2019_l2037_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2019_l2037_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2038
fn c2020_l2038_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2020_l2038_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2039
fn c2021_l2039_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2021_l2039_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2040
fn c2022_l2040_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2022_l2040_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2041
fn c2023_l2041_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2023_l2041_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2042
fn c2024_l2042_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2024_l2042_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2043
fn c2025_l2043_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2025_l2043_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2044
fn c2026_l2044_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2026_l2044_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2045
fn c2027_l2045_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2027_l2045_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2046
fn c2028_l2046_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2028_l2046_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2047
fn c2029_l2047_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2029_l2047_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2048
fn c2030_l2048_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2030_l2048_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2049
fn c2031_l2049_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2031_l2049_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2050
fn c2032_l2050_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2032_l2050_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2051
fn c2033_l2051_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2033_l2051_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2052
fn c2034_l2052_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2034_l2052_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2053
fn c2035_l2053_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2035_l2053_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2054
fn c2036_l2054_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2036_l2054_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2055
fn c2037_l2055_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2037_l2055_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2056
fn c2038_l2056_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2038_l2056_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2057
fn c2039_l2057_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2039_l2057_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2058
fn c2040_l2058_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2040_l2058_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2059
fn c2041_l2059_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2041_l2059_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2060
fn c2042_l2060_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2042_l2060_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2061
fn c2043_l2061_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2043_l2061_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2062
fn c2044_l2062_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2044_l2062_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2063
fn c2045_l2063_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2045_l2063_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2064
fn c2046_l2064_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2046_l2064_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2065
fn c2047_l2065_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2047_l2065_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2066
fn c2048_l2066_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2048_l2066_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2067
fn c2049_l2067_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2049_l2067_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2068
fn c2050_l2068_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2050_l2068_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2069
fn c2051_l2069_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2051_l2069_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2070
fn c2052_l2070_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2052_l2070_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2071
fn c2053_l2071_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2053_l2071_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2072
fn c2054_l2072_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2054_l2072_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2073
fn c2055_l2073_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2055_l2073_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2074
fn c2056_l2074_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2056_l2074_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2075
fn c2057_l2075_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2057_l2075_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2076
fn c2058_l2076_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2058_l2076_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2077
fn c2059_l2077_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2059_l2077_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2078
fn c2060_l2078_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2060_l2078_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2079
fn c2061_l2079_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2061_l2079_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2080
fn c2062_l2080_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2062_l2080_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2081
fn c2063_l2081_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2063_l2081_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2082
fn c2064_l2082_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2064_l2082_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2083
fn c2065_l2083_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2065_l2083_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2084
fn c2066_l2084_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2066_l2084_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2085
fn c2067_l2085_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2067_l2085_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2086
fn c2068_l2086_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2068_l2086_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2087
fn c2069_l2087_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2069_l2087_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2088
fn c2070_l2088_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2070_l2088_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2089
fn c2071_l2089_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2071_l2089_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2090
fn c2072_l2090_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2072_l2090_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2091
fn c2073_l2091_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2073_l2091_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2092
fn c2074_l2092_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2074_l2092_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2093
fn c2075_l2093_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2075_l2093_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2094
fn c2076_l2094_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2076_l2094_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2095
fn c2077_l2095_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2077_l2095_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2096
fn c2078_l2096_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2078_l2096_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2097
fn c2079_l2097_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2079_l2097_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2098
fn c2080_l2098_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2080_l2098_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2099
fn c2081_l2099_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2081_l2099_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2100
fn c2082_l2100_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2082_l2100_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2101
fn c2083_l2101_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2083_l2101_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2102
fn c2084_l2102_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2084_l2102_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2103
fn c2085_l2103_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2085_l2103_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2104
fn c2086_l2104_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2086_l2104_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2105
fn c2087_l2105_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2087_l2105_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2106
fn c2088_l2106_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2088_l2106_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2107
fn c2089_l2107_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2089_l2107_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2108
fn c2090_l2108_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2090_l2108_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2109
fn c2091_l2109_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2091_l2109_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2110
fn c2092_l2110_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2092_l2110_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2111
fn c2093_l2111_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2093_l2111_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2112
fn c2094_l2112_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2094_l2112_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2113
fn c2095_l2113_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2095_l2113_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2114
fn c2096_l2114_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2096_l2114_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2115
fn c2097_l2115_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2097_l2115_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2116
fn c2098_l2116_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2098_l2116_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2117
fn c2099_l2117_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2099_l2117_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2118
fn c2100_l2118_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2100_l2118_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2119
fn c2101_l2119_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2101_l2119_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2120
fn c2102_l2120_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2102_l2120_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2121
fn c2103_l2121_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2103_l2121_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2122
fn c2104_l2122_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2104_l2122_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2123
fn c2105_l2123_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2105_l2123_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2124
fn c2106_l2124_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2106_l2124_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2125
fn c2107_l2125_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2107_l2125_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2126
fn c2108_l2126_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2108_l2126_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2127
fn c2109_l2127_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2109_l2127_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2128
fn c2110_l2128_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2110_l2128_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2129
fn c2111_l2129_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2111_l2129_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2130
fn c2112_l2130_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2112_l2130_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2131
fn c2113_l2131_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2113_l2131_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2132
fn c2114_l2132_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2114_l2132_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2133
fn c2115_l2133_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2115_l2133_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2134
fn c2116_l2134_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2116_l2134_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2135
fn c2117_l2135_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2117_l2135_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2136
fn c2118_l2136_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2118_l2136_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2137
fn c2119_l2137_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2119_l2137_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2138
fn c2120_l2138_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2120_l2138_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2139
fn c2121_l2139_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2121_l2139_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2140
fn c2122_l2140_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2122_l2140_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2141
fn c2123_l2141_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2123_l2141_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2142
fn c2124_l2142_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2124_l2142_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2143
fn c2125_l2143_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2125_l2143_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2144
fn c2126_l2144_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2126_l2144_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2145
fn c2127_l2145_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2127_l2145_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2146
fn c2128_l2146_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2128_l2146_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2147
fn c2129_l2147_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2129_l2147_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2148
fn c2130_l2148_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2130_l2148_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2149
fn c2131_l2149_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2131_l2149_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2150
fn c2132_l2150_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2132_l2150_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2151
fn c2133_l2151_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2133_l2151_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2152
fn c2134_l2152_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2134_l2152_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2153
fn c2135_l2153_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2135_l2153_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2154
fn c2136_l2154_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2136_l2154_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2155
fn c2137_l2155_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2137_l2155_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2156
fn c2138_l2156_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2138_l2156_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2157
fn c2139_l2157_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2139_l2157_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2158
fn c2140_l2158_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2140_l2158_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2159
fn c2141_l2159_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2141_l2159_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2160
fn c2142_l2160_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2142_l2160_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2161
fn c2143_l2161_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2143_l2161_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2162
fn c2144_l2162_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2144_l2162_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2163
fn c2145_l2163_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2145_l2163_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2164
fn c2146_l2164_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2146_l2164_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2165
fn c2147_l2165_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2147_l2165_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2166
fn c2148_l2166_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2148_l2166_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2167
fn c2149_l2167_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2149_l2167_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2168
fn c2150_l2168_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2150_l2168_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2169
fn c2151_l2169_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2151_l2169_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2170
fn c2152_l2170_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2152_l2170_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2171
fn c2153_l2171_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2153_l2171_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2172
fn c2154_l2172_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2154_l2172_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2173
fn c2155_l2173_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2155_l2173_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2174
fn c2156_l2174_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2156_l2174_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2175
fn c2157_l2175_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2157_l2175_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2176
fn c2158_l2176_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2158_l2176_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2177
fn c2159_l2177_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2159_l2177_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2178
fn c2160_l2178_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2160_l2178_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2179
fn c2161_l2179_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2161_l2179_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2180
fn c2162_l2180_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2162_l2180_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2181
fn c2163_l2181_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2163_l2181_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2182
fn c2164_l2182_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2164_l2182_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2183
fn c2165_l2183_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2165_l2183_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2184
fn c2166_l2184_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2166_l2184_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2185
fn c2167_l2185_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2167_l2185_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2186
fn c2168_l2186_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2168_l2186_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2187
fn c2169_l2187_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2169_l2187_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2188
fn c2170_l2188_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2170_l2188_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2189
fn c2171_l2189_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2171_l2189_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2190
fn c2172_l2190_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2172_l2190_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2191
fn c2173_l2191_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2173_l2191_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2192
fn c2174_l2192_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2174_l2192_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2193
fn c2175_l2193_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2175_l2193_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2194
fn c2176_l2194_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2176_l2194_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2195
fn c2177_l2195_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2177_l2195_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2196
fn c2178_l2196_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2178_l2196_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2197
fn c2179_l2197_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2179_l2197_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2198
fn c2180_l2198_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2180_l2198_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2199
fn c2181_l2199_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2181_l2199_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2200
fn c2182_l2200_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2182_l2200_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2201
fn c2183_l2201_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2183_l2201_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2202
fn c2184_l2202_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2184_l2202_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2203
fn c2185_l2203_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2185_l2203_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2204
fn c2186_l2204_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2186_l2204_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2205
fn c2187_l2205_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2187_l2205_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2206
fn c2188_l2206_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2188_l2206_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2207
fn c2189_l2207_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2189_l2207_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2208
fn c2190_l2208_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2190_l2208_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2209
fn c2191_l2209_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2191_l2209_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2210
fn c2192_l2210_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2192_l2210_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2211
fn c2193_l2211_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2193_l2211_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2212
fn c2194_l2212_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2194_l2212_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2213
fn c2195_l2213_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2195_l2213_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2214
fn c2196_l2214_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2196_l2214_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2215
fn c2197_l2215_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2197_l2215_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2216
fn c2198_l2216_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2198_l2216_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2217
fn c2199_l2217_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2199_l2217_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2218
fn c2200_l2218_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2200_l2218_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2219
fn c2201_l2219_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2201_l2219_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2220
fn c2202_l2220_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2202_l2220_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2221
fn c2203_l2221_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2203_l2221_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2222
fn c2204_l2222_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2204_l2222_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2223
fn c2205_l2223_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2205_l2223_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2224
fn c2206_l2224_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2206_l2224_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2225
fn c2207_l2225_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2207_l2225_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2226
fn c2208_l2226_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2208_l2226_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2227
fn c2209_l2227_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2209_l2227_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2228
fn c2210_l2228_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2210_l2228_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2229
fn c2211_l2229_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2211_l2229_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2230
fn c2212_l2230_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2212_l2230_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2231
fn c2213_l2231_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2213_l2231_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2232
fn c2214_l2232_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2214_l2232_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2233
fn c2215_l2233_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2215_l2233_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2234
fn c2216_l2234_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2216_l2234_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2235
fn c2217_l2235_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2217_l2235_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2236
fn c2218_l2236_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2218_l2236_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2237
fn c2219_l2237_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2219_l2237_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2238
fn c2220_l2238_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2220_l2238_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2239
fn c2221_l2239_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2221_l2239_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 2240
fn c2222_l2240_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2222_l2240_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2241
fn c2223_l2241_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2223_l2241_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2242
fn c2224_l2242_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2224_l2242_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2243
fn c2225_l2243_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2225_l2243_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 2244
fn c2226_l2244_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2226_l2244_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2245
fn c2227_l2245_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2227_l2245_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2246
fn c2228_l2246_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2228_l2246_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2247
fn c2229_l2247_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2229_l2247_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 2248
fn c2230_l2248_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2230_l2248_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2249
fn c2231_l2249_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2231_l2249_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2250
fn c2232_l2250_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2232_l2250_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2251
fn c2233_l2251_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2233_l2251_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2252
fn c2234_l2252_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2234_l2252_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2253
fn c2235_l2253_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2235_l2253_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2254
fn c2236_l2254_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2236_l2254_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2255
fn c2237_l2255_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2237_l2255_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2256
fn c2238_l2256_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2238_l2256_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2257
fn c2239_l2257_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2239_l2257_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2258
fn c2240_l2258_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2240_l2258_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2259
fn c2241_l2259_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2241_l2259_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2260
fn c2242_l2260_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2242_l2260_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2261
fn c2243_l2261_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2243_l2261_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2262
fn c2244_l2262_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2244_l2262_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2263
fn c2245_l2263_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2245_l2263_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2264
fn c2246_l2264_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2246_l2264_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2265
fn c2247_l2265_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2247_l2265_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2266
fn c2248_l2266_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2248_l2266_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2267
fn c2249_l2267_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2249_l2267_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2268
fn c2250_l2268_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2250_l2268_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2269
fn c2251_l2269_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2251_l2269_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2270
fn c2252_l2270_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2252_l2270_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2271
fn c2253_l2271_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2253_l2271_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2272
fn c2254_l2272_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2254_l2272_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2273
fn c2255_l2273_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2255_l2273_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -0.5 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2274
fn c2256_l2274_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2256_l2274_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2275
fn c2257_l2275_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2257_l2275_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2276
fn c2258_l2276_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2258_l2276_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2277
fn c2259_l2277_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2259_l2277_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2278
fn c2260_l2278_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2260_l2278_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2279
fn c2261_l2279_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2261_l2279_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 2280
fn c2262_l2280_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2262_l2280_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2281
fn c2263_l2281_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2263_l2281_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2282
fn c2264_l2282_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2264_l2282_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2283
fn c2265_l2283_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2265_l2283_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2284
fn c2266_l2284_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2266_l2284_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2285
fn c2267_l2285_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2267_l2285_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2286
fn c2268_l2286_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2268_l2286_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2287
fn c2269_l2287_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2269_l2287_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2288
fn c2270_l2288_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2270_l2288_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2289
fn c2271_l2289_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2271_l2289_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2290
fn c2272_l2290_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2272_l2290_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2291
fn c2273_l2291_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2273_l2291_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2292
fn c2274_l2292_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2274_l2292_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2293
fn c2275_l2293_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2275_l2293_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2294
fn c2276_l2294_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2276_l2294_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2295
fn c2277_l2295_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2277_l2295_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2296
fn c2278_l2296_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2278_l2296_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2297
fn c2279_l2297_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2279_l2297_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2298
fn c2280_l2298_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2280_l2298_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2299
fn c2281_l2299_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2281_l2299_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2300
fn c2282_l2300_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2282_l2300_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2301
fn c2283_l2301_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2283_l2301_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2302
fn c2284_l2302_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2284_l2302_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2303
fn c2285_l2303_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2285_l2303_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2304
fn c2286_l2304_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2286_l2304_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000000000001 as f32);
}

// Line 2305
fn c2287_l2305_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2287_l2305_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2306
fn c2288_l2306_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2288_l2306_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2307
fn c2289_l2307_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2289_l2307_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2308
fn c2290_l2308_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2290_l2308_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.000000000000000000000000000000000000011754944 as f32);
}

// Line 2309
fn c2291_l2309_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2291_l2309_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2310
fn c2292_l2310_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2292_l2310_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2311
fn c2293_l2311_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2293_l2311_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.5 as f32);
}

// Line 2312
fn c2294_l2312_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2294_l2312_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.5 as f32);
}

// Line 2313
fn c2295_l2313_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2295_l2313_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2314
fn c2296_l2314_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2296_l2314_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 0.5 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2315
fn c2297_l2315_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2297_l2315_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2316
fn c2298_l2316_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2298_l2316_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2317
fn c2299_l2317_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2299_l2317_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2318
fn c2300_l2318_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2300_l2318_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 1.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2319
fn c2301_l2319_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2301_l2319_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.2831855 as f32);
}

// Line 2320
fn c2302_l2320_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2302_l2320_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.2831855 as f32);
}

// Line 2321
fn c2303_l2321_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2303_l2321_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2322
fn c2304_l2322_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2304_l2322_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 6.2831855 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2323
fn c2305_l2323_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2305_l2323_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2324
fn c2306_l2324_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2306_l2324_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2325
fn c2307_l2325_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2307_l2325_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2326
fn c2308_l2326_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2308_l2326_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2327
fn c2309_l2327_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2309_l2327_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 2328
fn c2310_l2328_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2310_l2328_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2329
fn c2311_l2329_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2311_l2329_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2330
fn c2312_l2330_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2312_l2330_action_invoke");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2331
fn c2313_l2331_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2313_l2331_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2332
fn c2314_l2332_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2314_l2332_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2333
fn c2315_l2333_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2315_l2333_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2334
fn c2316_l2334_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2316_l2334_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2335
fn c2317_l2335_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2317_l2335_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2336
fn c2318_l2336_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2318_l2336_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2337
fn c2319_l2337_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2319_l2337_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2338
fn c2320_l2338_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2320_l2338_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2339
fn c2321_l2339_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2321_l2339_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2340
fn c2322_l2340_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2322_l2340_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2341
fn c2323_l2341_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2323_l2341_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2342
fn c2324_l2342_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2324_l2342_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2343
fn c2325_l2343_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2325_l2343_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2344
fn c2326_l2344_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2326_l2344_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2345
fn c2327_l2345_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2327_l2345_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2346
fn c2328_l2346_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2328_l2346_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2347
fn c2329_l2347_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2329_l2347_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2348
fn c2330_l2348_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2330_l2348_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2349
fn c2331_l2349_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2331_l2349_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2350
fn c2332_l2350_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2332_l2350_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2351
fn c2333_l2351_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2333_l2351_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2352
fn c2334_l2352_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2334_l2352_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2353
fn c2335_l2353_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2335_l2353_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2354
fn c2336_l2354_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2336_l2354_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2355
fn c2337_l2355_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2337_l2355_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2356
fn c2338_l2356_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2338_l2356_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2357
fn c2339_l2357_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2339_l2357_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2358
fn c2340_l2358_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2340_l2358_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2359
fn c2341_l2359_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2341_l2359_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2360
fn c2342_l2360_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2342_l2360_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2361
fn c2343_l2361_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2343_l2361_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2362
fn c2344_l2362_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2344_l2362_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2363
fn c2345_l2363_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2345_l2363_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2364
fn c2346_l2364_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2346_l2364_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2365
fn c2347_l2365_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2347_l2365_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2366
fn c2348_l2366_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2348_l2366_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2367
fn c2349_l2367_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2349_l2367_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2368
fn c2350_l2368_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2350_l2368_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2369
fn c2351_l2369_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2351_l2369_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2370
fn c2352_l2370_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2352_l2370_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2371
fn c2353_l2371_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2353_l2371_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2372
fn c2354_l2372_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2354_l2372_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2373
fn c2355_l2373_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2355_l2373_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2374
fn c2356_l2374_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2356_l2374_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2375
fn c2357_l2375_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2357_l2375_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2376
fn c2358_l2376_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2358_l2376_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2377
fn c2359_l2377_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2359_l2377_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2378
fn c2360_l2378_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2360_l2378_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2379
fn c2361_l2379_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2361_l2379_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2380
fn c2362_l2380_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2362_l2380_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2381
fn c2363_l2381_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2363_l2381_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2382
fn c2364_l2382_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2364_l2382_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2383
fn c2365_l2383_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2365_l2383_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2384
fn c2366_l2384_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2366_l2384_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2385
fn c2367_l2385_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2367_l2385_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2386
fn c2368_l2386_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2368_l2386_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2387
fn c2369_l2387_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2369_l2387_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2388
fn c2370_l2388_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2370_l2388_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2389
fn c2371_l2389_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2371_l2389_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2390
fn c2372_l2390_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2372_l2390_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2391
fn c2373_l2391_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2373_l2391_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2392
fn c2374_l2392_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2374_l2392_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), -340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2393
fn c2375_l2393_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2375_l2393_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2394
fn c2376_l2394_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2376_l2394_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), 340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2395
fn c2377_l2395_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2377_l2395_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2396
fn c2378_l2396_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2378_l2396_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2397
fn c2379_l2397_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2379_l2397_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2398
fn c2380_l2398_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2380_l2398_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2399
fn c2381_l2399_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2381_l2399_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2400
fn c2382_l2400_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2382_l2400_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2401
fn c2383_l2401_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2383_l2401_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2402
fn c2384_l2402_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2384_l2402_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2403
fn c2385_l2403_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2385_l2403_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2404
fn c2386_l2404_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2386_l2404_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2405
fn c2387_l2405_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2387_l2405_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2406
fn c2388_l2406_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2388_l2406_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2407
fn c2389_l2407_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2389_l2407_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2408
fn c2390_l2408_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2390_l2408_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2409
fn c2391_l2409_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2391_l2409_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2410
fn c2392_l2410_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2392_l2410_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2411
fn c2393_l2411_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2393_l2411_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2412
fn c2394_l2412_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2394_l2412_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2413
fn c2395_l2413_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2395_l2413_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2414
fn c2396_l2414_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2396_l2414_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2415
fn c2397_l2415_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2397_l2415_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2416
fn c2398_l2416_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2398_l2416_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2417
fn c2399_l2417_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2399_l2417_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2418
fn c2400_l2418_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2400_l2418_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2419
fn c2401_l2419_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2401_l2419_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2420
fn c2402_l2420_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2402_l2420_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2421
fn c2403_l2421_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2403_l2421_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2422
fn c2404_l2422_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2404_l2422_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.00000000000000000000003743392 as f32);
}

// Line 2423
fn c2405_l2423_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2405_l2423_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2424
fn c2406_l2424_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2406_l2424_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.00000000000000000010842022 as f32);
}

// Line 2425
fn c2407_l2425_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2407_l2425_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2426
fn c2408_l2426_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2408_l2426_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.70710677 as f32);
}

// Line 2427
fn c2409_l2427_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2409_l2427_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2428
fn c2410_l2428_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2410_l2428_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2429
fn c2411_l2429_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2411_l2429_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2430
fn c2412_l2430_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2412_l2430_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 2.5066283 as f32);
}

// Line 2431
fn c2413_l2431_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2413_l2431_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2432
fn c2414_l2432_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2414_l2432_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 18446743000000000000.0 as f32);
}

// Line 2433
fn c2415_l2433_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2415_l2433_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2434
fn c2416_l2434_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2416_l2434_action_invoke");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2435
fn c2417_l2435_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2417_l2435_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2436
fn c2418_l2436_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2418_l2436_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2437
fn c2419_l2437_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2419_l2437_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2438
fn c2420_l2438_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2420_l2438_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("sqrt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2439
fn c2421_l2439_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2421_l2439_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2440
fn c2422_l2440_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2422_l2440_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2441
fn c2423_l2441_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2423_l2441_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2442
fn c2424_l2442_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2424_l2442_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2443
fn c2425_l2443_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2425_l2443_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2444
fn c2426_l2444_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2426_l2444_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2445
fn c2427_l2445_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2427_l2445_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2446
fn c2428_l2446_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2428_l2446_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2447
fn c2429_l2447_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2429_l2447_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2448
fn c2430_l2448_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2430_l2448_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2449
fn c2431_l2449_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2431_l2449_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -7.0 as f32);
}

// Line 2450
fn c2432_l2450_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2432_l2450_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.0 as f32);
}

// Line 2451
fn c2433_l2451_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2433_l2451_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2452
fn c2434_l2452_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2434_l2452_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2453
fn c2435_l2453_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2435_l2453_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 2454
fn c2436_l2454_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2436_l2454_action_invoke");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2455
fn c2437_l2455_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2437_l2455_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2456
fn c2438_l2456_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2438_l2456_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2457
fn c2439_l2457_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2439_l2457_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2458
fn c2440_l2458_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2440_l2458_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("floor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2459
fn c2441_l2459_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2441_l2459_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2460
fn c2442_l2460_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2442_l2460_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2461
fn c2443_l2461_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2443_l2461_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2462
fn c2444_l2462_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2444_l2462_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2463
fn c2445_l2463_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2445_l2463_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2464
fn c2446_l2464_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2446_l2464_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2465
fn c2447_l2465_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2447_l2465_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2466
fn c2448_l2466_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2448_l2466_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2467
fn c2449_l2467_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2449_l2467_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2468
fn c2450_l2468_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2450_l2468_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2469
fn c2451_l2469_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2451_l2469_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.0 as f32);
}

// Line 2470
fn c2452_l2470_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2452_l2470_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 7.0 as f32);
}

// Line 2471
fn c2453_l2471_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2453_l2471_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2472
fn c2454_l2472_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2454_l2472_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2473
fn c2455_l2473_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2455_l2473_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 2474
fn c2456_l2474_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2456_l2474_action_invoke");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2475
fn c2457_l2475_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2457_l2475_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2476
fn c2458_l2476_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2458_l2476_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2477
fn c2459_l2477_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2459_l2477_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2478
fn c2460_l2478_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2460_l2478_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("ceil") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2479
fn c2461_l2479_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2461_l2479_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2480
fn c2462_l2480_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2462_l2480_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2481
fn c2463_l2481_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2463_l2481_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2482
fn c2464_l2482_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2464_l2482_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2483
fn c2465_l2483_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2465_l2483_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2484
fn c2466_l2484_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2466_l2484_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2485
fn c2467_l2485_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2467_l2485_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2486
fn c2468_l2486_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2468_l2486_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2487
fn c2469_l2487_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2469_l2487_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2488
fn c2470_l2488_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2470_l2488_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2489
fn c2471_l2489_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2471_l2489_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.0 as f32);
}

// Line 2490
fn c2472_l2490_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2472_l2490_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.0 as f32);
}

// Line 2491
fn c2473_l2491_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2473_l2491_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2492
fn c2474_l2492_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2474_l2492_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2493
fn c2475_l2493_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2475_l2493_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 2494
fn c2476_l2494_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2476_l2494_action_invoke");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2495
fn c2477_l2495_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2477_l2495_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2496
fn c2478_l2496_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2478_l2496_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2497
fn c2479_l2497_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2479_l2497_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2498
fn c2480_l2498_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2480_l2498_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("trunc") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2499
fn c2481_l2499_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2481_l2499_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.0 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2500
fn c2482_l2500_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2482_l2500_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2501
fn c2483_l2501_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2483_l2501_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2502
fn c2484_l2502_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2484_l2502_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000000000001 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2503
fn c2485_l2503_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2485_l2503_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2504
fn c2486_l2504_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2486_l2504_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.000000000000000000000000000000000000011754944 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2505
fn c2487_l2505_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2487_l2505_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-0.5 as f32, &result_object.instance);
    assert_eq!(result, -0.0 as f32);
}

// Line 2506
fn c2488_l2506_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2488_l2506_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.5 as f32, &result_object.instance);
    assert_eq!(result, 0.0 as f32);
}

// Line 2507
fn c2489_l2507_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2489_l2507_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1.0 as f32, &result_object.instance);
    assert_eq!(result, -1.0 as f32);
}

// Line 2508
fn c2490_l2508_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2490_l2508_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 2509
fn c2491_l2509_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2491_l2509_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6.2831855 as f32, &result_object.instance);
    assert_eq!(result, -6.0 as f32);
}

// Line 2510
fn c2492_l2510_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2492_l2510_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6.2831855 as f32, &result_object.instance);
    assert_eq!(result, 6.0 as f32);
}

// Line 2511
fn c2493_l2511_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2493_l2511_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, -340282350000000000000000000000000000000.0 as f32);
}

// Line 2512
fn c2494_l2512_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2494_l2512_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(340282350000000000000000000000000000000.0 as f32, &result_object.instance);
    assert_eq!(result, 340282350000000000000000000000000000000.0 as f32);
}

// Line 2513
fn c2495_l2513_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2495_l2513_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::NEG_INFINITY, &result_object.instance);
    assert_eq!(result, f32::NEG_INFINITY);
}

// Line 2514
fn c2496_l2514_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2496_l2514_action_invoke");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::INFINITY, &result_object.instance);
    assert_eq!(result, f32::INFINITY);
}

// Line 2515
fn c2497_l2515_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2497_l2515_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4290772992), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2516
fn c2498_l2516_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2498_l2516_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(4288675840), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2517
fn c2499_l2517_assert_return_canonical_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2499_l2517_assert_return_canonical_nan");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2143289344), &result_object.instance);
    assert!(result.is_quiet_nan())
}

// Line 2518
fn c2500_l2518_assert_return_arithmetic_nan(result_object: &ResultObject) {
    println!("Executing function {}", "c2500_l2518_assert_return_arithmetic_nan");
    let func_index = match result_object.module.info.exports.get("nearest") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(f32::from_bits(2141192192), &result_object.instance);
    assert!(result.is_quiet_nan())
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    start_module_1(&result_object);
    c1_l19_action_invoke(&result_object);
    c2_l20_action_invoke(&result_object);
    c3_l21_action_invoke(&result_object);
    c4_l22_action_invoke(&result_object);
    c5_l23_action_invoke(&result_object);
    c6_l24_action_invoke(&result_object);
    c7_l25_action_invoke(&result_object);
    c8_l26_action_invoke(&result_object);
    c9_l27_action_invoke(&result_object);
    c10_l28_action_invoke(&result_object);
    c11_l29_action_invoke(&result_object);
    c12_l30_action_invoke(&result_object);
    c13_l31_action_invoke(&result_object);
    c14_l32_action_invoke(&result_object);
    c15_l33_action_invoke(&result_object);
    c16_l34_action_invoke(&result_object);
    c17_l35_action_invoke(&result_object);
    c18_l36_action_invoke(&result_object);
    c19_l37_action_invoke(&result_object);
    c20_l38_action_invoke(&result_object);
    c21_l39_action_invoke(&result_object);
    c22_l40_action_invoke(&result_object);
    c23_l41_action_invoke(&result_object);
    c24_l42_action_invoke(&result_object);
    c25_l43_action_invoke(&result_object);
    c26_l44_action_invoke(&result_object);
    c27_l45_action_invoke(&result_object);
    c28_l46_action_invoke(&result_object);
    c29_l47_action_invoke(&result_object);
    c30_l48_action_invoke(&result_object);
    c31_l49_action_invoke(&result_object);
    c32_l50_action_invoke(&result_object);
    c33_l51_assert_return_canonical_nan(&result_object);
    c34_l52_assert_return_arithmetic_nan(&result_object);
    c35_l53_assert_return_canonical_nan(&result_object);
    c36_l54_assert_return_arithmetic_nan(&result_object);
    c37_l55_assert_return_canonical_nan(&result_object);
    c38_l56_assert_return_arithmetic_nan(&result_object);
    c39_l57_assert_return_canonical_nan(&result_object);
    c40_l58_assert_return_arithmetic_nan(&result_object);
    c41_l59_action_invoke(&result_object);
    c42_l60_action_invoke(&result_object);
    c43_l61_action_invoke(&result_object);
    c44_l62_action_invoke(&result_object);
    c45_l63_action_invoke(&result_object);
    c46_l64_action_invoke(&result_object);
    c47_l65_action_invoke(&result_object);
    c48_l66_action_invoke(&result_object);
    c49_l67_action_invoke(&result_object);
    c50_l68_action_invoke(&result_object);
    c51_l69_action_invoke(&result_object);
    c52_l70_action_invoke(&result_object);
    c53_l71_action_invoke(&result_object);
    c54_l72_action_invoke(&result_object);
    c55_l73_action_invoke(&result_object);
    c56_l74_action_invoke(&result_object);
    c57_l75_action_invoke(&result_object);
    c58_l76_action_invoke(&result_object);
    c59_l77_action_invoke(&result_object);
    c60_l78_action_invoke(&result_object);
    c61_l79_action_invoke(&result_object);
    c62_l80_action_invoke(&result_object);
    c63_l81_action_invoke(&result_object);
    c64_l82_action_invoke(&result_object);
    c65_l83_action_invoke(&result_object);
    c66_l84_action_invoke(&result_object);
    c67_l85_action_invoke(&result_object);
    c68_l86_action_invoke(&result_object);
    c69_l87_action_invoke(&result_object);
    c70_l88_action_invoke(&result_object);
    c71_l89_action_invoke(&result_object);
    c72_l90_action_invoke(&result_object);
    c73_l91_assert_return_canonical_nan(&result_object);
    c74_l92_assert_return_arithmetic_nan(&result_object);
    c75_l93_assert_return_canonical_nan(&result_object);
    c76_l94_assert_return_arithmetic_nan(&result_object);
    c77_l95_assert_return_canonical_nan(&result_object);
    c78_l96_assert_return_arithmetic_nan(&result_object);
    c79_l97_assert_return_canonical_nan(&result_object);
    c80_l98_assert_return_arithmetic_nan(&result_object);
    c81_l99_action_invoke(&result_object);
    c82_l100_action_invoke(&result_object);
    c83_l101_action_invoke(&result_object);
    c84_l102_action_invoke(&result_object);
    c85_l103_action_invoke(&result_object);
    c86_l104_action_invoke(&result_object);
    c87_l105_action_invoke(&result_object);
    c88_l106_action_invoke(&result_object);
    c89_l107_action_invoke(&result_object);
    c90_l108_action_invoke(&result_object);
    c91_l109_action_invoke(&result_object);
    c92_l110_action_invoke(&result_object);
    c93_l111_action_invoke(&result_object);
    c94_l112_action_invoke(&result_object);
    c95_l113_action_invoke(&result_object);
    c96_l114_action_invoke(&result_object);
    c97_l115_action_invoke(&result_object);
    c98_l116_action_invoke(&result_object);
    c99_l117_action_invoke(&result_object);
    c100_l118_action_invoke(&result_object);
    c101_l119_action_invoke(&result_object);
    c102_l120_action_invoke(&result_object);
    c103_l121_action_invoke(&result_object);
    c104_l122_action_invoke(&result_object);
    c105_l123_action_invoke(&result_object);
    c106_l124_action_invoke(&result_object);
    c107_l125_action_invoke(&result_object);
    c108_l126_action_invoke(&result_object);
    c109_l127_action_invoke(&result_object);
    c110_l128_action_invoke(&result_object);
    c111_l129_action_invoke(&result_object);
    c112_l130_action_invoke(&result_object);
    c113_l131_assert_return_canonical_nan(&result_object);
    c114_l132_assert_return_arithmetic_nan(&result_object);
    c115_l133_assert_return_canonical_nan(&result_object);
    c116_l134_assert_return_arithmetic_nan(&result_object);
    c117_l135_assert_return_canonical_nan(&result_object);
    c118_l136_assert_return_arithmetic_nan(&result_object);
    c119_l137_assert_return_canonical_nan(&result_object);
    c120_l138_assert_return_arithmetic_nan(&result_object);
    c121_l139_action_invoke(&result_object);
    c122_l140_action_invoke(&result_object);
    c123_l141_action_invoke(&result_object);
    c124_l142_action_invoke(&result_object);
    c125_l143_action_invoke(&result_object);
    c126_l144_action_invoke(&result_object);
    c127_l145_action_invoke(&result_object);
    c128_l146_action_invoke(&result_object);
    c129_l147_action_invoke(&result_object);
    c130_l148_action_invoke(&result_object);
    c131_l149_action_invoke(&result_object);
    c132_l150_action_invoke(&result_object);
    c133_l151_action_invoke(&result_object);
    c134_l152_action_invoke(&result_object);
    c135_l153_action_invoke(&result_object);
    c136_l154_action_invoke(&result_object);
    c137_l155_action_invoke(&result_object);
    c138_l156_action_invoke(&result_object);
    c139_l157_action_invoke(&result_object);
    c140_l158_action_invoke(&result_object);
    c141_l159_action_invoke(&result_object);
    c142_l160_action_invoke(&result_object);
    c143_l161_action_invoke(&result_object);
    c144_l162_action_invoke(&result_object);
    c145_l163_action_invoke(&result_object);
    c146_l164_action_invoke(&result_object);
    c147_l165_action_invoke(&result_object);
    c148_l166_action_invoke(&result_object);
    c149_l167_action_invoke(&result_object);
    c150_l168_action_invoke(&result_object);
    c151_l169_action_invoke(&result_object);
    c152_l170_action_invoke(&result_object);
    c153_l171_assert_return_canonical_nan(&result_object);
    c154_l172_assert_return_arithmetic_nan(&result_object);
    c155_l173_assert_return_canonical_nan(&result_object);
    c156_l174_assert_return_arithmetic_nan(&result_object);
    c157_l175_assert_return_canonical_nan(&result_object);
    c158_l176_assert_return_arithmetic_nan(&result_object);
    c159_l177_assert_return_canonical_nan(&result_object);
    c160_l178_assert_return_arithmetic_nan(&result_object);
    c161_l179_action_invoke(&result_object);
    c162_l180_action_invoke(&result_object);
    c163_l181_action_invoke(&result_object);
    c164_l182_action_invoke(&result_object);
    c165_l183_action_invoke(&result_object);
    c166_l184_action_invoke(&result_object);
    c167_l185_action_invoke(&result_object);
    c168_l186_action_invoke(&result_object);
    c169_l187_action_invoke(&result_object);
    c170_l188_action_invoke(&result_object);
    c171_l189_action_invoke(&result_object);
    c172_l190_action_invoke(&result_object);
    c173_l191_action_invoke(&result_object);
    c174_l192_action_invoke(&result_object);
    c175_l193_action_invoke(&result_object);
    c176_l194_action_invoke(&result_object);
    c177_l195_action_invoke(&result_object);
    c178_l196_action_invoke(&result_object);
    c179_l197_action_invoke(&result_object);
    c180_l198_action_invoke(&result_object);
    c181_l199_action_invoke(&result_object);
    c182_l200_action_invoke(&result_object);
    c183_l201_action_invoke(&result_object);
    c184_l202_action_invoke(&result_object);
    c185_l203_action_invoke(&result_object);
    c186_l204_action_invoke(&result_object);
    c187_l205_action_invoke(&result_object);
    c188_l206_action_invoke(&result_object);
    c189_l207_action_invoke(&result_object);
    c190_l208_action_invoke(&result_object);
    c191_l209_action_invoke(&result_object);
    c192_l210_action_invoke(&result_object);
    c193_l211_assert_return_canonical_nan(&result_object);
    c194_l212_assert_return_arithmetic_nan(&result_object);
    c195_l213_assert_return_canonical_nan(&result_object);
    c196_l214_assert_return_arithmetic_nan(&result_object);
    c197_l215_assert_return_canonical_nan(&result_object);
    c198_l216_assert_return_arithmetic_nan(&result_object);
    c199_l217_assert_return_canonical_nan(&result_object);
    c200_l218_assert_return_arithmetic_nan(&result_object);
    c201_l219_action_invoke(&result_object);
    c202_l220_action_invoke(&result_object);
    c203_l221_action_invoke(&result_object);
    c204_l222_action_invoke(&result_object);
    c205_l223_action_invoke(&result_object);
    c206_l224_action_invoke(&result_object);
    c207_l225_action_invoke(&result_object);
    c208_l226_action_invoke(&result_object);
    c209_l227_action_invoke(&result_object);
    c210_l228_action_invoke(&result_object);
    c211_l229_action_invoke(&result_object);
    c212_l230_action_invoke(&result_object);
    c213_l231_action_invoke(&result_object);
    c214_l232_action_invoke(&result_object);
    c215_l233_action_invoke(&result_object);
    c216_l234_action_invoke(&result_object);
    c217_l235_action_invoke(&result_object);
    c218_l236_action_invoke(&result_object);
    c219_l237_action_invoke(&result_object);
    c220_l238_action_invoke(&result_object);
    c221_l239_action_invoke(&result_object);
    c222_l240_action_invoke(&result_object);
    c223_l241_action_invoke(&result_object);
    c224_l242_action_invoke(&result_object);
    c225_l243_action_invoke(&result_object);
    c226_l244_action_invoke(&result_object);
    c227_l245_action_invoke(&result_object);
    c228_l246_action_invoke(&result_object);
    c229_l247_action_invoke(&result_object);
    c230_l248_action_invoke(&result_object);
    c231_l249_action_invoke(&result_object);
    c232_l250_action_invoke(&result_object);
    c233_l251_assert_return_canonical_nan(&result_object);
    c234_l252_assert_return_arithmetic_nan(&result_object);
    c235_l253_assert_return_canonical_nan(&result_object);
    c236_l254_assert_return_arithmetic_nan(&result_object);
    c237_l255_assert_return_canonical_nan(&result_object);
    c238_l256_assert_return_arithmetic_nan(&result_object);
    c239_l257_assert_return_canonical_nan(&result_object);
    c240_l258_assert_return_arithmetic_nan(&result_object);
    c241_l259_action_invoke(&result_object);
    c242_l260_action_invoke(&result_object);
    c243_l261_action_invoke(&result_object);
    c244_l262_action_invoke(&result_object);
    c245_l263_action_invoke(&result_object);
    c246_l264_action_invoke(&result_object);
    c247_l265_action_invoke(&result_object);
    c248_l266_action_invoke(&result_object);
    c249_l267_action_invoke(&result_object);
    c250_l268_action_invoke(&result_object);
    c251_l269_action_invoke(&result_object);
    c252_l270_action_invoke(&result_object);
    c253_l271_action_invoke(&result_object);
    c254_l272_action_invoke(&result_object);
    c255_l273_action_invoke(&result_object);
    c256_l274_action_invoke(&result_object);
    c257_l275_action_invoke(&result_object);
    c258_l276_action_invoke(&result_object);
    c259_l277_action_invoke(&result_object);
    c260_l278_action_invoke(&result_object);
    c261_l279_action_invoke(&result_object);
    c262_l280_action_invoke(&result_object);
    c263_l281_action_invoke(&result_object);
    c264_l282_action_invoke(&result_object);
    c265_l283_action_invoke(&result_object);
    c266_l284_action_invoke(&result_object);
    c267_l285_action_invoke(&result_object);
    c268_l286_action_invoke(&result_object);
    c269_l287_action_invoke(&result_object);
    c270_l288_action_invoke(&result_object);
    c271_l289_action_invoke(&result_object);
    c272_l290_action_invoke(&result_object);
    c273_l291_assert_return_canonical_nan(&result_object);
    c274_l292_assert_return_arithmetic_nan(&result_object);
    c275_l293_assert_return_canonical_nan(&result_object);
    c276_l294_assert_return_arithmetic_nan(&result_object);
    c277_l295_assert_return_canonical_nan(&result_object);
    c278_l296_assert_return_arithmetic_nan(&result_object);
    c279_l297_assert_return_canonical_nan(&result_object);
    c280_l298_assert_return_arithmetic_nan(&result_object);
    c281_l299_action_invoke(&result_object);
    c282_l300_action_invoke(&result_object);
    c283_l301_action_invoke(&result_object);
    c284_l302_action_invoke(&result_object);
    c285_l303_action_invoke(&result_object);
    c286_l304_action_invoke(&result_object);
    c287_l305_action_invoke(&result_object);
    c288_l306_action_invoke(&result_object);
    c289_l307_action_invoke(&result_object);
    c290_l308_action_invoke(&result_object);
    c291_l309_action_invoke(&result_object);
    c292_l310_action_invoke(&result_object);
    c293_l311_action_invoke(&result_object);
    c294_l312_action_invoke(&result_object);
    c295_l313_action_invoke(&result_object);
    c296_l314_action_invoke(&result_object);
    c297_l315_action_invoke(&result_object);
    c298_l316_action_invoke(&result_object);
    c299_l317_action_invoke(&result_object);
    c300_l318_action_invoke(&result_object);
    c301_l319_action_invoke(&result_object);
    c302_l320_action_invoke(&result_object);
    c303_l321_action_invoke(&result_object);
    c304_l322_action_invoke(&result_object);
    c305_l323_action_invoke(&result_object);
    c306_l324_action_invoke(&result_object);
    c307_l325_action_invoke(&result_object);
    c308_l326_action_invoke(&result_object);
    c309_l327_action_invoke(&result_object);
    c310_l328_assert_return_canonical_nan(&result_object);
    c311_l329_assert_return_canonical_nan(&result_object);
    c312_l330_action_invoke(&result_object);
    c313_l331_assert_return_canonical_nan(&result_object);
    c314_l332_assert_return_arithmetic_nan(&result_object);
    c315_l333_assert_return_canonical_nan(&result_object);
    c316_l334_assert_return_arithmetic_nan(&result_object);
    c317_l335_assert_return_canonical_nan(&result_object);
    c318_l336_assert_return_arithmetic_nan(&result_object);
    c319_l337_assert_return_canonical_nan(&result_object);
    c320_l338_assert_return_arithmetic_nan(&result_object);
    c321_l339_assert_return_canonical_nan(&result_object);
    c322_l340_assert_return_arithmetic_nan(&result_object);
    c323_l341_assert_return_canonical_nan(&result_object);
    c324_l342_assert_return_arithmetic_nan(&result_object);
    c325_l343_assert_return_canonical_nan(&result_object);
    c326_l344_assert_return_arithmetic_nan(&result_object);
    c327_l345_assert_return_canonical_nan(&result_object);
    c328_l346_assert_return_arithmetic_nan(&result_object);
    c329_l347_assert_return_canonical_nan(&result_object);
    c330_l348_assert_return_arithmetic_nan(&result_object);
    c331_l349_assert_return_canonical_nan(&result_object);
    c332_l350_assert_return_arithmetic_nan(&result_object);
    c333_l351_assert_return_canonical_nan(&result_object);
    c334_l352_assert_return_arithmetic_nan(&result_object);
    c335_l353_assert_return_canonical_nan(&result_object);
    c336_l354_assert_return_arithmetic_nan(&result_object);
    c337_l355_assert_return_canonical_nan(&result_object);
    c338_l356_assert_return_arithmetic_nan(&result_object);
    c339_l357_assert_return_canonical_nan(&result_object);
    c340_l358_assert_return_arithmetic_nan(&result_object);
    c341_l359_assert_return_canonical_nan(&result_object);
    c342_l360_assert_return_arithmetic_nan(&result_object);
    c343_l361_assert_return_canonical_nan(&result_object);
    c344_l362_assert_return_arithmetic_nan(&result_object);
    c345_l363_assert_return_canonical_nan(&result_object);
    c346_l364_assert_return_arithmetic_nan(&result_object);
    c347_l365_assert_return_canonical_nan(&result_object);
    c348_l366_assert_return_arithmetic_nan(&result_object);
    c349_l367_assert_return_canonical_nan(&result_object);
    c350_l368_assert_return_arithmetic_nan(&result_object);
    c351_l369_assert_return_canonical_nan(&result_object);
    c352_l370_assert_return_arithmetic_nan(&result_object);
    c353_l371_assert_return_canonical_nan(&result_object);
    c354_l372_assert_return_arithmetic_nan(&result_object);
    c355_l373_assert_return_canonical_nan(&result_object);
    c356_l374_assert_return_arithmetic_nan(&result_object);
    c357_l375_assert_return_canonical_nan(&result_object);
    c358_l376_assert_return_arithmetic_nan(&result_object);
    c359_l377_assert_return_canonical_nan(&result_object);
    c360_l378_assert_return_arithmetic_nan(&result_object);
    c361_l379_assert_return_canonical_nan(&result_object);
    c362_l380_assert_return_arithmetic_nan(&result_object);
    c363_l381_assert_return_canonical_nan(&result_object);
    c364_l382_assert_return_arithmetic_nan(&result_object);
    c365_l383_assert_return_canonical_nan(&result_object);
    c366_l384_assert_return_arithmetic_nan(&result_object);
    c367_l385_assert_return_canonical_nan(&result_object);
    c368_l386_assert_return_arithmetic_nan(&result_object);
    c369_l387_assert_return_canonical_nan(&result_object);
    c370_l388_assert_return_arithmetic_nan(&result_object);
    c371_l389_assert_return_canonical_nan(&result_object);
    c372_l390_assert_return_arithmetic_nan(&result_object);
    c373_l391_assert_return_canonical_nan(&result_object);
    c374_l392_assert_return_arithmetic_nan(&result_object);
    c375_l393_assert_return_canonical_nan(&result_object);
    c376_l394_assert_return_arithmetic_nan(&result_object);
    c377_l395_assert_return_canonical_nan(&result_object);
    c378_l396_assert_return_arithmetic_nan(&result_object);
    c379_l397_assert_return_canonical_nan(&result_object);
    c380_l398_assert_return_arithmetic_nan(&result_object);
    c381_l399_assert_return_canonical_nan(&result_object);
    c382_l400_assert_return_arithmetic_nan(&result_object);
    c383_l401_assert_return_canonical_nan(&result_object);
    c384_l402_assert_return_arithmetic_nan(&result_object);
    c385_l403_assert_return_canonical_nan(&result_object);
    c386_l404_assert_return_arithmetic_nan(&result_object);
    c387_l405_assert_return_arithmetic_nan(&result_object);
    c388_l406_assert_return_arithmetic_nan(&result_object);
    c389_l407_assert_return_canonical_nan(&result_object);
    c390_l408_assert_return_arithmetic_nan(&result_object);
    c391_l409_assert_return_arithmetic_nan(&result_object);
    c392_l410_assert_return_arithmetic_nan(&result_object);
    c393_l411_assert_return_canonical_nan(&result_object);
    c394_l412_assert_return_arithmetic_nan(&result_object);
    c395_l413_assert_return_arithmetic_nan(&result_object);
    c396_l414_assert_return_arithmetic_nan(&result_object);
    c397_l415_assert_return_canonical_nan(&result_object);
    c398_l416_assert_return_arithmetic_nan(&result_object);
    c399_l417_assert_return_arithmetic_nan(&result_object);
    c400_l418_assert_return_arithmetic_nan(&result_object);
    c401_l419_action_invoke(&result_object);
    c402_l420_action_invoke(&result_object);
    c403_l421_action_invoke(&result_object);
    c404_l422_action_invoke(&result_object);
    c405_l423_action_invoke(&result_object);
    c406_l424_action_invoke(&result_object);
    c407_l425_action_invoke(&result_object);
    c408_l426_action_invoke(&result_object);
    c409_l427_action_invoke(&result_object);
    c410_l428_action_invoke(&result_object);
    c411_l429_action_invoke(&result_object);
    c412_l430_action_invoke(&result_object);
    c413_l431_action_invoke(&result_object);
    c414_l432_action_invoke(&result_object);
    c415_l433_action_invoke(&result_object);
    c416_l434_action_invoke(&result_object);
    c417_l435_action_invoke(&result_object);
    c418_l436_action_invoke(&result_object);
    c419_l437_action_invoke(&result_object);
    c420_l438_action_invoke(&result_object);
    c421_l439_action_invoke(&result_object);
    c422_l440_action_invoke(&result_object);
    c423_l441_action_invoke(&result_object);
    c424_l442_action_invoke(&result_object);
    c425_l443_action_invoke(&result_object);
    c426_l444_action_invoke(&result_object);
    c427_l445_action_invoke(&result_object);
    c428_l446_action_invoke(&result_object);
    c429_l447_action_invoke(&result_object);
    c430_l448_action_invoke(&result_object);
    c431_l449_action_invoke(&result_object);
    c432_l450_action_invoke(&result_object);
    c433_l451_assert_return_canonical_nan(&result_object);
    c434_l452_assert_return_arithmetic_nan(&result_object);
    c435_l453_assert_return_canonical_nan(&result_object);
    c436_l454_assert_return_arithmetic_nan(&result_object);
    c437_l455_assert_return_canonical_nan(&result_object);
    c438_l456_assert_return_arithmetic_nan(&result_object);
    c439_l457_assert_return_canonical_nan(&result_object);
    c440_l458_assert_return_arithmetic_nan(&result_object);
    c441_l459_action_invoke(&result_object);
    c442_l460_action_invoke(&result_object);
    c443_l461_action_invoke(&result_object);
    c444_l462_action_invoke(&result_object);
    c445_l463_action_invoke(&result_object);
    c446_l464_action_invoke(&result_object);
    c447_l465_action_invoke(&result_object);
    c448_l466_action_invoke(&result_object);
    c449_l467_action_invoke(&result_object);
    c450_l468_action_invoke(&result_object);
    c451_l469_action_invoke(&result_object);
    c452_l470_action_invoke(&result_object);
    c453_l471_action_invoke(&result_object);
    c454_l472_action_invoke(&result_object);
    c455_l473_action_invoke(&result_object);
    c456_l474_action_invoke(&result_object);
    c457_l475_action_invoke(&result_object);
    c458_l476_action_invoke(&result_object);
    c459_l477_action_invoke(&result_object);
    c460_l478_action_invoke(&result_object);
    c461_l479_action_invoke(&result_object);
    c462_l480_action_invoke(&result_object);
    c463_l481_action_invoke(&result_object);
    c464_l482_action_invoke(&result_object);
    c465_l483_action_invoke(&result_object);
    c466_l484_action_invoke(&result_object);
    c467_l485_action_invoke(&result_object);
    c468_l486_action_invoke(&result_object);
    c469_l487_action_invoke(&result_object);
    c470_l488_action_invoke(&result_object);
    c471_l489_action_invoke(&result_object);
    c472_l490_action_invoke(&result_object);
    c473_l491_assert_return_canonical_nan(&result_object);
    c474_l492_assert_return_arithmetic_nan(&result_object);
    c475_l493_assert_return_canonical_nan(&result_object);
    c476_l494_assert_return_arithmetic_nan(&result_object);
    c477_l495_assert_return_canonical_nan(&result_object);
    c478_l496_assert_return_arithmetic_nan(&result_object);
    c479_l497_assert_return_canonical_nan(&result_object);
    c480_l498_assert_return_arithmetic_nan(&result_object);
    c481_l499_action_invoke(&result_object);
    c482_l500_action_invoke(&result_object);
    c483_l501_action_invoke(&result_object);
    c484_l502_action_invoke(&result_object);
    c485_l503_action_invoke(&result_object);
    c486_l504_action_invoke(&result_object);
    c487_l505_action_invoke(&result_object);
    c488_l506_action_invoke(&result_object);
    c489_l507_action_invoke(&result_object);
    c490_l508_action_invoke(&result_object);
    c491_l509_action_invoke(&result_object);
    c492_l510_action_invoke(&result_object);
    c493_l511_action_invoke(&result_object);
    c494_l512_action_invoke(&result_object);
    c495_l513_action_invoke(&result_object);
    c496_l514_action_invoke(&result_object);
    c497_l515_action_invoke(&result_object);
    c498_l516_action_invoke(&result_object);
    c499_l517_action_invoke(&result_object);
    c500_l518_action_invoke(&result_object);
    c501_l519_action_invoke(&result_object);
    c502_l520_action_invoke(&result_object);
    c503_l521_action_invoke(&result_object);
    c504_l522_action_invoke(&result_object);
    c505_l523_action_invoke(&result_object);
    c506_l524_action_invoke(&result_object);
    c507_l525_action_invoke(&result_object);
    c508_l526_action_invoke(&result_object);
    c509_l527_action_invoke(&result_object);
    c510_l528_action_invoke(&result_object);
    c511_l529_action_invoke(&result_object);
    c512_l530_action_invoke(&result_object);
    c513_l531_assert_return_canonical_nan(&result_object);
    c514_l532_assert_return_arithmetic_nan(&result_object);
    c515_l533_assert_return_canonical_nan(&result_object);
    c516_l534_assert_return_arithmetic_nan(&result_object);
    c517_l535_assert_return_canonical_nan(&result_object);
    c518_l536_assert_return_arithmetic_nan(&result_object);
    c519_l537_assert_return_canonical_nan(&result_object);
    c520_l538_assert_return_arithmetic_nan(&result_object);
    c521_l539_action_invoke(&result_object);
    c522_l540_action_invoke(&result_object);
    c523_l541_action_invoke(&result_object);
    c524_l542_action_invoke(&result_object);
    c525_l543_action_invoke(&result_object);
    c526_l544_action_invoke(&result_object);
    c527_l545_action_invoke(&result_object);
    c528_l546_action_invoke(&result_object);
    c529_l547_action_invoke(&result_object);
    c530_l548_action_invoke(&result_object);
    c531_l549_action_invoke(&result_object);
    c532_l550_action_invoke(&result_object);
    c533_l551_action_invoke(&result_object);
    c534_l552_action_invoke(&result_object);
    c535_l553_action_invoke(&result_object);
    c536_l554_action_invoke(&result_object);
    c537_l555_action_invoke(&result_object);
    c538_l556_action_invoke(&result_object);
    c539_l557_action_invoke(&result_object);
    c540_l558_action_invoke(&result_object);
    c541_l559_action_invoke(&result_object);
    c542_l560_action_invoke(&result_object);
    c543_l561_action_invoke(&result_object);
    c544_l562_action_invoke(&result_object);
    c545_l563_action_invoke(&result_object);
    c546_l564_action_invoke(&result_object);
    c547_l565_action_invoke(&result_object);
    c548_l566_action_invoke(&result_object);
    c549_l567_action_invoke(&result_object);
    c550_l568_action_invoke(&result_object);
    c551_l569_action_invoke(&result_object);
    c552_l570_action_invoke(&result_object);
    c553_l571_assert_return_canonical_nan(&result_object);
    c554_l572_assert_return_arithmetic_nan(&result_object);
    c555_l573_assert_return_canonical_nan(&result_object);
    c556_l574_assert_return_arithmetic_nan(&result_object);
    c557_l575_assert_return_canonical_nan(&result_object);
    c558_l576_assert_return_arithmetic_nan(&result_object);
    c559_l577_assert_return_canonical_nan(&result_object);
    c560_l578_assert_return_arithmetic_nan(&result_object);
    c561_l579_action_invoke(&result_object);
    c562_l580_action_invoke(&result_object);
    c563_l581_action_invoke(&result_object);
    c564_l582_action_invoke(&result_object);
    c565_l583_action_invoke(&result_object);
    c566_l584_action_invoke(&result_object);
    c567_l585_action_invoke(&result_object);
    c568_l586_action_invoke(&result_object);
    c569_l587_action_invoke(&result_object);
    c570_l588_action_invoke(&result_object);
    c571_l589_action_invoke(&result_object);
    c572_l590_action_invoke(&result_object);
    c573_l591_action_invoke(&result_object);
    c574_l592_action_invoke(&result_object);
    c575_l593_action_invoke(&result_object);
    c576_l594_action_invoke(&result_object);
    c577_l595_action_invoke(&result_object);
    c578_l596_action_invoke(&result_object);
    c579_l597_action_invoke(&result_object);
    c580_l598_action_invoke(&result_object);
    c581_l599_action_invoke(&result_object);
    c582_l600_action_invoke(&result_object);
    c583_l601_action_invoke(&result_object);
    c584_l602_action_invoke(&result_object);
    c585_l603_action_invoke(&result_object);
    c586_l604_action_invoke(&result_object);
    c587_l605_action_invoke(&result_object);
    c588_l606_action_invoke(&result_object);
    c589_l607_action_invoke(&result_object);
    c590_l608_action_invoke(&result_object);
    c591_l609_action_invoke(&result_object);
    c592_l610_action_invoke(&result_object);
    c593_l611_assert_return_canonical_nan(&result_object);
    c594_l612_assert_return_arithmetic_nan(&result_object);
    c595_l613_assert_return_canonical_nan(&result_object);
    c596_l614_assert_return_arithmetic_nan(&result_object);
    c597_l615_assert_return_canonical_nan(&result_object);
    c598_l616_assert_return_arithmetic_nan(&result_object);
    c599_l617_assert_return_canonical_nan(&result_object);
    c600_l618_assert_return_arithmetic_nan(&result_object);
    c601_l619_action_invoke(&result_object);
    c602_l620_action_invoke(&result_object);
    c603_l621_action_invoke(&result_object);
    c604_l622_action_invoke(&result_object);
    c605_l623_action_invoke(&result_object);
    c606_l624_action_invoke(&result_object);
    c607_l625_action_invoke(&result_object);
    c608_l626_action_invoke(&result_object);
    c609_l627_action_invoke(&result_object);
    c610_l628_action_invoke(&result_object);
    c611_l629_action_invoke(&result_object);
    c612_l630_action_invoke(&result_object);
    c613_l631_action_invoke(&result_object);
    c614_l632_action_invoke(&result_object);
    c615_l633_action_invoke(&result_object);
    c616_l634_action_invoke(&result_object);
    c617_l635_action_invoke(&result_object);
    c618_l636_action_invoke(&result_object);
    c619_l637_action_invoke(&result_object);
    c620_l638_action_invoke(&result_object);
    c621_l639_action_invoke(&result_object);
    c622_l640_action_invoke(&result_object);
    c623_l641_action_invoke(&result_object);
    c624_l642_action_invoke(&result_object);
    c625_l643_action_invoke(&result_object);
    c626_l644_action_invoke(&result_object);
    c627_l645_action_invoke(&result_object);
    c628_l646_action_invoke(&result_object);
    c629_l647_action_invoke(&result_object);
    c630_l648_action_invoke(&result_object);
    c631_l649_action_invoke(&result_object);
    c632_l650_action_invoke(&result_object);
    c633_l651_assert_return_canonical_nan(&result_object);
    c634_l652_assert_return_arithmetic_nan(&result_object);
    c635_l653_assert_return_canonical_nan(&result_object);
    c636_l654_assert_return_arithmetic_nan(&result_object);
    c637_l655_assert_return_canonical_nan(&result_object);
    c638_l656_assert_return_arithmetic_nan(&result_object);
    c639_l657_assert_return_canonical_nan(&result_object);
    c640_l658_assert_return_arithmetic_nan(&result_object);
    c641_l659_action_invoke(&result_object);
    c642_l660_action_invoke(&result_object);
    c643_l661_action_invoke(&result_object);
    c644_l662_action_invoke(&result_object);
    c645_l663_action_invoke(&result_object);
    c646_l664_action_invoke(&result_object);
    c647_l665_action_invoke(&result_object);
    c648_l666_action_invoke(&result_object);
    c649_l667_action_invoke(&result_object);
    c650_l668_action_invoke(&result_object);
    c651_l669_action_invoke(&result_object);
    c652_l670_action_invoke(&result_object);
    c653_l671_action_invoke(&result_object);
    c654_l672_action_invoke(&result_object);
    c655_l673_action_invoke(&result_object);
    c656_l674_action_invoke(&result_object);
    c657_l675_action_invoke(&result_object);
    c658_l676_action_invoke(&result_object);
    c659_l677_action_invoke(&result_object);
    c660_l678_action_invoke(&result_object);
    c661_l679_action_invoke(&result_object);
    c662_l680_action_invoke(&result_object);
    c663_l681_action_invoke(&result_object);
    c664_l682_action_invoke(&result_object);
    c665_l683_action_invoke(&result_object);
    c666_l684_action_invoke(&result_object);
    c667_l685_action_invoke(&result_object);
    c668_l686_action_invoke(&result_object);
    c669_l687_action_invoke(&result_object);
    c670_l688_action_invoke(&result_object);
    c671_l689_action_invoke(&result_object);
    c672_l690_action_invoke(&result_object);
    c673_l691_assert_return_canonical_nan(&result_object);
    c674_l692_assert_return_arithmetic_nan(&result_object);
    c675_l693_assert_return_canonical_nan(&result_object);
    c676_l694_assert_return_arithmetic_nan(&result_object);
    c677_l695_assert_return_canonical_nan(&result_object);
    c678_l696_assert_return_arithmetic_nan(&result_object);
    c679_l697_assert_return_canonical_nan(&result_object);
    c680_l698_assert_return_arithmetic_nan(&result_object);
    c681_l699_action_invoke(&result_object);
    c682_l700_action_invoke(&result_object);
    c683_l701_action_invoke(&result_object);
    c684_l702_action_invoke(&result_object);
    c685_l703_action_invoke(&result_object);
    c686_l704_action_invoke(&result_object);
    c687_l705_action_invoke(&result_object);
    c688_l706_action_invoke(&result_object);
    c689_l707_action_invoke(&result_object);
    c690_l708_action_invoke(&result_object);
    c691_l709_action_invoke(&result_object);
    c692_l710_action_invoke(&result_object);
    c693_l711_action_invoke(&result_object);
    c694_l712_action_invoke(&result_object);
    c695_l713_action_invoke(&result_object);
    c696_l714_action_invoke(&result_object);
    c697_l715_action_invoke(&result_object);
    c698_l716_action_invoke(&result_object);
    c699_l717_action_invoke(&result_object);
    c700_l718_action_invoke(&result_object);
    c701_l719_action_invoke(&result_object);
    c702_l720_action_invoke(&result_object);
    c703_l721_action_invoke(&result_object);
    c704_l722_action_invoke(&result_object);
    c705_l723_action_invoke(&result_object);
    c706_l724_action_invoke(&result_object);
    c707_l725_action_invoke(&result_object);
    c708_l726_action_invoke(&result_object);
    c709_l727_assert_return_canonical_nan(&result_object);
    c710_l728_action_invoke(&result_object);
    c711_l729_action_invoke(&result_object);
    c712_l730_assert_return_canonical_nan(&result_object);
    c713_l731_assert_return_canonical_nan(&result_object);
    c714_l732_assert_return_arithmetic_nan(&result_object);
    c715_l733_assert_return_canonical_nan(&result_object);
    c716_l734_assert_return_arithmetic_nan(&result_object);
    c717_l735_assert_return_canonical_nan(&result_object);
    c718_l736_assert_return_arithmetic_nan(&result_object);
    c719_l737_assert_return_canonical_nan(&result_object);
    c720_l738_assert_return_arithmetic_nan(&result_object);
    c721_l739_assert_return_canonical_nan(&result_object);
    c722_l740_assert_return_arithmetic_nan(&result_object);
    c723_l741_assert_return_canonical_nan(&result_object);
    c724_l742_assert_return_arithmetic_nan(&result_object);
    c725_l743_assert_return_canonical_nan(&result_object);
    c726_l744_assert_return_arithmetic_nan(&result_object);
    c727_l745_assert_return_canonical_nan(&result_object);
    c728_l746_assert_return_arithmetic_nan(&result_object);
    c729_l747_assert_return_canonical_nan(&result_object);
    c730_l748_assert_return_arithmetic_nan(&result_object);
    c731_l749_assert_return_canonical_nan(&result_object);
    c732_l750_assert_return_arithmetic_nan(&result_object);
    c733_l751_assert_return_canonical_nan(&result_object);
    c734_l752_assert_return_arithmetic_nan(&result_object);
    c735_l753_assert_return_canonical_nan(&result_object);
    c736_l754_assert_return_arithmetic_nan(&result_object);
    c737_l755_assert_return_canonical_nan(&result_object);
    c738_l756_assert_return_arithmetic_nan(&result_object);
    c739_l757_assert_return_canonical_nan(&result_object);
    c740_l758_assert_return_arithmetic_nan(&result_object);
    c741_l759_assert_return_canonical_nan(&result_object);
    c742_l760_assert_return_arithmetic_nan(&result_object);
    c743_l761_assert_return_canonical_nan(&result_object);
    c744_l762_assert_return_arithmetic_nan(&result_object);
    c745_l763_assert_return_canonical_nan(&result_object);
    c746_l764_assert_return_arithmetic_nan(&result_object);
    c747_l765_assert_return_canonical_nan(&result_object);
    c748_l766_assert_return_arithmetic_nan(&result_object);
    c749_l767_assert_return_canonical_nan(&result_object);
    c750_l768_assert_return_arithmetic_nan(&result_object);
    c751_l769_assert_return_canonical_nan(&result_object);
    c752_l770_assert_return_arithmetic_nan(&result_object);
    c753_l771_assert_return_canonical_nan(&result_object);
    c754_l772_assert_return_arithmetic_nan(&result_object);
    c755_l773_assert_return_canonical_nan(&result_object);
    c756_l774_assert_return_arithmetic_nan(&result_object);
    c757_l775_assert_return_canonical_nan(&result_object);
    c758_l776_assert_return_arithmetic_nan(&result_object);
    c759_l777_assert_return_canonical_nan(&result_object);
    c760_l778_assert_return_arithmetic_nan(&result_object);
    c761_l779_assert_return_canonical_nan(&result_object);
    c762_l780_assert_return_arithmetic_nan(&result_object);
    c763_l781_assert_return_canonical_nan(&result_object);
    c764_l782_assert_return_arithmetic_nan(&result_object);
    c765_l783_assert_return_canonical_nan(&result_object);
    c766_l784_assert_return_arithmetic_nan(&result_object);
    c767_l785_assert_return_canonical_nan(&result_object);
    c768_l786_assert_return_arithmetic_nan(&result_object);
    c769_l787_assert_return_canonical_nan(&result_object);
    c770_l788_assert_return_arithmetic_nan(&result_object);
    c771_l789_assert_return_canonical_nan(&result_object);
    c772_l790_assert_return_arithmetic_nan(&result_object);
    c773_l791_assert_return_canonical_nan(&result_object);
    c774_l792_assert_return_arithmetic_nan(&result_object);
    c775_l793_assert_return_canonical_nan(&result_object);
    c776_l794_assert_return_arithmetic_nan(&result_object);
    c777_l795_assert_return_canonical_nan(&result_object);
    c778_l796_assert_return_arithmetic_nan(&result_object);
    c779_l797_assert_return_canonical_nan(&result_object);
    c780_l798_assert_return_arithmetic_nan(&result_object);
    c781_l799_assert_return_canonical_nan(&result_object);
    c782_l800_assert_return_arithmetic_nan(&result_object);
    c783_l801_assert_return_canonical_nan(&result_object);
    c784_l802_assert_return_arithmetic_nan(&result_object);
    c785_l803_assert_return_canonical_nan(&result_object);
    c786_l804_assert_return_arithmetic_nan(&result_object);
    c787_l805_assert_return_arithmetic_nan(&result_object);
    c788_l806_assert_return_arithmetic_nan(&result_object);
    c789_l807_assert_return_canonical_nan(&result_object);
    c790_l808_assert_return_arithmetic_nan(&result_object);
    c791_l809_assert_return_arithmetic_nan(&result_object);
    c792_l810_assert_return_arithmetic_nan(&result_object);
    c793_l811_assert_return_canonical_nan(&result_object);
    c794_l812_assert_return_arithmetic_nan(&result_object);
    c795_l813_assert_return_arithmetic_nan(&result_object);
    c796_l814_assert_return_arithmetic_nan(&result_object);
    c797_l815_assert_return_canonical_nan(&result_object);
    c798_l816_assert_return_arithmetic_nan(&result_object);
    c799_l817_assert_return_arithmetic_nan(&result_object);
    c800_l818_assert_return_arithmetic_nan(&result_object);
    c801_l819_action_invoke(&result_object);
    c802_l820_action_invoke(&result_object);
    c803_l821_action_invoke(&result_object);
    c804_l822_action_invoke(&result_object);
    c805_l823_action_invoke(&result_object);
    c806_l824_action_invoke(&result_object);
    c807_l825_action_invoke(&result_object);
    c808_l826_action_invoke(&result_object);
    c809_l827_action_invoke(&result_object);
    c810_l828_action_invoke(&result_object);
    c811_l829_action_invoke(&result_object);
    c812_l830_action_invoke(&result_object);
    c813_l831_action_invoke(&result_object);
    c814_l832_action_invoke(&result_object);
    c815_l833_action_invoke(&result_object);
    c816_l834_action_invoke(&result_object);
    c817_l835_action_invoke(&result_object);
    c818_l836_action_invoke(&result_object);
    c819_l837_action_invoke(&result_object);
    c820_l838_action_invoke(&result_object);
    c821_l839_action_invoke(&result_object);
    c822_l840_action_invoke(&result_object);
    c823_l841_action_invoke(&result_object);
    c824_l842_action_invoke(&result_object);
    c825_l843_action_invoke(&result_object);
    c826_l844_action_invoke(&result_object);
    c827_l845_action_invoke(&result_object);
    c828_l846_action_invoke(&result_object);
    c829_l847_assert_return_canonical_nan(&result_object);
    c830_l848_assert_return_canonical_nan(&result_object);
    c831_l849_assert_return_canonical_nan(&result_object);
    c832_l850_assert_return_canonical_nan(&result_object);
    c833_l851_assert_return_canonical_nan(&result_object);
    c834_l852_assert_return_arithmetic_nan(&result_object);
    c835_l853_assert_return_canonical_nan(&result_object);
    c836_l854_assert_return_arithmetic_nan(&result_object);
    c837_l855_assert_return_canonical_nan(&result_object);
    c838_l856_assert_return_arithmetic_nan(&result_object);
    c839_l857_assert_return_canonical_nan(&result_object);
    c840_l858_assert_return_arithmetic_nan(&result_object);
    c841_l859_action_invoke(&result_object);
    c842_l860_action_invoke(&result_object);
    c843_l861_action_invoke(&result_object);
    c844_l862_action_invoke(&result_object);
    c845_l863_action_invoke(&result_object);
    c846_l864_action_invoke(&result_object);
    c847_l865_action_invoke(&result_object);
    c848_l866_action_invoke(&result_object);
    c849_l867_action_invoke(&result_object);
    c850_l868_action_invoke(&result_object);
    c851_l869_action_invoke(&result_object);
    c852_l870_action_invoke(&result_object);
    c853_l871_action_invoke(&result_object);
    c854_l872_action_invoke(&result_object);
    c855_l873_action_invoke(&result_object);
    c856_l874_action_invoke(&result_object);
    c857_l875_action_invoke(&result_object);
    c858_l876_action_invoke(&result_object);
    c859_l877_action_invoke(&result_object);
    c860_l878_action_invoke(&result_object);
    c861_l879_action_invoke(&result_object);
    c862_l880_action_invoke(&result_object);
    c863_l881_action_invoke(&result_object);
    c864_l882_action_invoke(&result_object);
    c865_l883_action_invoke(&result_object);
    c866_l884_action_invoke(&result_object);
    c867_l885_action_invoke(&result_object);
    c868_l886_action_invoke(&result_object);
    c869_l887_action_invoke(&result_object);
    c870_l888_action_invoke(&result_object);
    c871_l889_action_invoke(&result_object);
    c872_l890_action_invoke(&result_object);
    c873_l891_assert_return_canonical_nan(&result_object);
    c874_l892_assert_return_arithmetic_nan(&result_object);
    c875_l893_assert_return_canonical_nan(&result_object);
    c876_l894_assert_return_arithmetic_nan(&result_object);
    c877_l895_assert_return_canonical_nan(&result_object);
    c878_l896_assert_return_arithmetic_nan(&result_object);
    c879_l897_assert_return_canonical_nan(&result_object);
    c880_l898_assert_return_arithmetic_nan(&result_object);
    c881_l899_action_invoke(&result_object);
    c882_l900_action_invoke(&result_object);
    c883_l901_action_invoke(&result_object);
    c884_l902_action_invoke(&result_object);
    c885_l903_action_invoke(&result_object);
    c886_l904_action_invoke(&result_object);
    c887_l905_action_invoke(&result_object);
    c888_l906_action_invoke(&result_object);
    c889_l907_action_invoke(&result_object);
    c890_l908_action_invoke(&result_object);
    c891_l909_action_invoke(&result_object);
    c892_l910_action_invoke(&result_object);
    c893_l911_action_invoke(&result_object);
    c894_l912_action_invoke(&result_object);
    c895_l913_action_invoke(&result_object);
    c896_l914_action_invoke(&result_object);
    c897_l915_action_invoke(&result_object);
    c898_l916_action_invoke(&result_object);
    c899_l917_action_invoke(&result_object);
    c900_l918_action_invoke(&result_object);
    c901_l919_action_invoke(&result_object);
    c902_l920_action_invoke(&result_object);
    c903_l921_action_invoke(&result_object);
    c904_l922_action_invoke(&result_object);
    c905_l923_action_invoke(&result_object);
    c906_l924_action_invoke(&result_object);
    c907_l925_action_invoke(&result_object);
    c908_l926_action_invoke(&result_object);
    c909_l927_action_invoke(&result_object);
    c910_l928_action_invoke(&result_object);
    c911_l929_action_invoke(&result_object);
    c912_l930_action_invoke(&result_object);
    c913_l931_assert_return_canonical_nan(&result_object);
    c914_l932_assert_return_arithmetic_nan(&result_object);
    c915_l933_assert_return_canonical_nan(&result_object);
    c916_l934_assert_return_arithmetic_nan(&result_object);
    c917_l935_assert_return_canonical_nan(&result_object);
    c918_l936_assert_return_arithmetic_nan(&result_object);
    c919_l937_assert_return_canonical_nan(&result_object);
    c920_l938_assert_return_arithmetic_nan(&result_object);
    c921_l939_action_invoke(&result_object);
    c922_l940_action_invoke(&result_object);
    c923_l941_action_invoke(&result_object);
    c924_l942_action_invoke(&result_object);
    c925_l943_action_invoke(&result_object);
    c926_l944_action_invoke(&result_object);
    c927_l945_action_invoke(&result_object);
    c928_l946_action_invoke(&result_object);
    c929_l947_action_invoke(&result_object);
    c930_l948_action_invoke(&result_object);
    c931_l949_action_invoke(&result_object);
    c932_l950_action_invoke(&result_object);
    c933_l951_action_invoke(&result_object);
    c934_l952_action_invoke(&result_object);
    c935_l953_action_invoke(&result_object);
    c936_l954_action_invoke(&result_object);
    c937_l955_action_invoke(&result_object);
    c938_l956_action_invoke(&result_object);
    c939_l957_action_invoke(&result_object);
    c940_l958_action_invoke(&result_object);
    c941_l959_action_invoke(&result_object);
    c942_l960_action_invoke(&result_object);
    c943_l961_action_invoke(&result_object);
    c944_l962_action_invoke(&result_object);
    c945_l963_action_invoke(&result_object);
    c946_l964_action_invoke(&result_object);
    c947_l965_action_invoke(&result_object);
    c948_l966_action_invoke(&result_object);
    c949_l967_action_invoke(&result_object);
    c950_l968_action_invoke(&result_object);
    c951_l969_action_invoke(&result_object);
    c952_l970_action_invoke(&result_object);
    c953_l971_assert_return_canonical_nan(&result_object);
    c954_l972_assert_return_arithmetic_nan(&result_object);
    c955_l973_assert_return_canonical_nan(&result_object);
    c956_l974_assert_return_arithmetic_nan(&result_object);
    c957_l975_assert_return_canonical_nan(&result_object);
    c958_l976_assert_return_arithmetic_nan(&result_object);
    c959_l977_assert_return_canonical_nan(&result_object);
    c960_l978_assert_return_arithmetic_nan(&result_object);
    c961_l979_action_invoke(&result_object);
    c962_l980_action_invoke(&result_object);
    c963_l981_action_invoke(&result_object);
    c964_l982_action_invoke(&result_object);
    c965_l983_action_invoke(&result_object);
    c966_l984_action_invoke(&result_object);
    c967_l985_action_invoke(&result_object);
    c968_l986_action_invoke(&result_object);
    c969_l987_action_invoke(&result_object);
    c970_l988_action_invoke(&result_object);
    c971_l989_action_invoke(&result_object);
    c972_l990_action_invoke(&result_object);
    c973_l991_action_invoke(&result_object);
    c974_l992_action_invoke(&result_object);
    c975_l993_action_invoke(&result_object);
    c976_l994_action_invoke(&result_object);
    c977_l995_action_invoke(&result_object);
    c978_l996_action_invoke(&result_object);
    c979_l997_action_invoke(&result_object);
    c980_l998_action_invoke(&result_object);
    c981_l999_action_invoke(&result_object);
    c982_l1000_action_invoke(&result_object);
    c983_l1001_action_invoke(&result_object);
    c984_l1002_action_invoke(&result_object);
    c985_l1003_action_invoke(&result_object);
    c986_l1004_action_invoke(&result_object);
    c987_l1005_action_invoke(&result_object);
    c988_l1006_action_invoke(&result_object);
    c989_l1007_action_invoke(&result_object);
    c990_l1008_action_invoke(&result_object);
    c991_l1009_action_invoke(&result_object);
    c992_l1010_action_invoke(&result_object);
    c993_l1011_assert_return_canonical_nan(&result_object);
    c994_l1012_assert_return_arithmetic_nan(&result_object);
    c995_l1013_assert_return_canonical_nan(&result_object);
    c996_l1014_assert_return_arithmetic_nan(&result_object);
    c997_l1015_assert_return_canonical_nan(&result_object);
    c998_l1016_assert_return_arithmetic_nan(&result_object);
    c999_l1017_assert_return_canonical_nan(&result_object);
    c1000_l1018_assert_return_arithmetic_nan(&result_object);
    c1001_l1019_action_invoke(&result_object);
    c1002_l1020_action_invoke(&result_object);
    c1003_l1021_action_invoke(&result_object);
    c1004_l1022_action_invoke(&result_object);
    c1005_l1023_action_invoke(&result_object);
    c1006_l1024_action_invoke(&result_object);
    c1007_l1025_action_invoke(&result_object);
    c1008_l1026_action_invoke(&result_object);
    c1009_l1027_action_invoke(&result_object);
    c1010_l1028_action_invoke(&result_object);
    c1011_l1029_action_invoke(&result_object);
    c1012_l1030_action_invoke(&result_object);
    c1013_l1031_action_invoke(&result_object);
    c1014_l1032_action_invoke(&result_object);
    c1015_l1033_action_invoke(&result_object);
    c1016_l1034_action_invoke(&result_object);
    c1017_l1035_action_invoke(&result_object);
    c1018_l1036_action_invoke(&result_object);
    c1019_l1037_action_invoke(&result_object);
    c1020_l1038_action_invoke(&result_object);
    c1021_l1039_action_invoke(&result_object);
    c1022_l1040_action_invoke(&result_object);
    c1023_l1041_action_invoke(&result_object);
    c1024_l1042_action_invoke(&result_object);
    c1025_l1043_action_invoke(&result_object);
    c1026_l1044_action_invoke(&result_object);
    c1027_l1045_action_invoke(&result_object);
    c1028_l1046_action_invoke(&result_object);
    c1029_l1047_action_invoke(&result_object);
    c1030_l1048_action_invoke(&result_object);
    c1031_l1049_action_invoke(&result_object);
    c1032_l1050_action_invoke(&result_object);
    c1033_l1051_assert_return_canonical_nan(&result_object);
    c1034_l1052_assert_return_arithmetic_nan(&result_object);
    c1035_l1053_assert_return_canonical_nan(&result_object);
    c1036_l1054_assert_return_arithmetic_nan(&result_object);
    c1037_l1055_assert_return_canonical_nan(&result_object);
    c1038_l1056_assert_return_arithmetic_nan(&result_object);
    c1039_l1057_assert_return_canonical_nan(&result_object);
    c1040_l1058_assert_return_arithmetic_nan(&result_object);
    c1041_l1059_action_invoke(&result_object);
    c1042_l1060_action_invoke(&result_object);
    c1043_l1061_action_invoke(&result_object);
    c1044_l1062_action_invoke(&result_object);
    c1045_l1063_action_invoke(&result_object);
    c1046_l1064_action_invoke(&result_object);
    c1047_l1065_action_invoke(&result_object);
    c1048_l1066_action_invoke(&result_object);
    c1049_l1067_action_invoke(&result_object);
    c1050_l1068_action_invoke(&result_object);
    c1051_l1069_action_invoke(&result_object);
    c1052_l1070_action_invoke(&result_object);
    c1053_l1071_action_invoke(&result_object);
    c1054_l1072_action_invoke(&result_object);
    c1055_l1073_action_invoke(&result_object);
    c1056_l1074_action_invoke(&result_object);
    c1057_l1075_action_invoke(&result_object);
    c1058_l1076_action_invoke(&result_object);
    c1059_l1077_action_invoke(&result_object);
    c1060_l1078_action_invoke(&result_object);
    c1061_l1079_action_invoke(&result_object);
    c1062_l1080_action_invoke(&result_object);
    c1063_l1081_action_invoke(&result_object);
    c1064_l1082_action_invoke(&result_object);
    c1065_l1083_action_invoke(&result_object);
    c1066_l1084_action_invoke(&result_object);
    c1067_l1085_action_invoke(&result_object);
    c1068_l1086_action_invoke(&result_object);
    c1069_l1087_action_invoke(&result_object);
    c1070_l1088_action_invoke(&result_object);
    c1071_l1089_action_invoke(&result_object);
    c1072_l1090_action_invoke(&result_object);
    c1073_l1091_assert_return_canonical_nan(&result_object);
    c1074_l1092_assert_return_arithmetic_nan(&result_object);
    c1075_l1093_assert_return_canonical_nan(&result_object);
    c1076_l1094_assert_return_arithmetic_nan(&result_object);
    c1077_l1095_assert_return_canonical_nan(&result_object);
    c1078_l1096_assert_return_arithmetic_nan(&result_object);
    c1079_l1097_assert_return_canonical_nan(&result_object);
    c1080_l1098_assert_return_arithmetic_nan(&result_object);
    c1081_l1099_assert_return_canonical_nan(&result_object);
    c1082_l1100_assert_return_canonical_nan(&result_object);
    c1083_l1101_assert_return_canonical_nan(&result_object);
    c1084_l1102_assert_return_canonical_nan(&result_object);
    c1085_l1103_action_invoke(&result_object);
    c1086_l1104_action_invoke(&result_object);
    c1087_l1105_action_invoke(&result_object);
    c1088_l1106_action_invoke(&result_object);
    c1089_l1107_action_invoke(&result_object);
    c1090_l1108_action_invoke(&result_object);
    c1091_l1109_action_invoke(&result_object);
    c1092_l1110_action_invoke(&result_object);
    c1093_l1111_action_invoke(&result_object);
    c1094_l1112_action_invoke(&result_object);
    c1095_l1113_action_invoke(&result_object);
    c1096_l1114_action_invoke(&result_object);
    c1097_l1115_action_invoke(&result_object);
    c1098_l1116_action_invoke(&result_object);
    c1099_l1117_action_invoke(&result_object);
    c1100_l1118_action_invoke(&result_object);
    c1101_l1119_action_invoke(&result_object);
    c1102_l1120_action_invoke(&result_object);
    c1103_l1121_action_invoke(&result_object);
    c1104_l1122_action_invoke(&result_object);
    c1105_l1123_action_invoke(&result_object);
    c1106_l1124_action_invoke(&result_object);
    c1107_l1125_action_invoke(&result_object);
    c1108_l1126_action_invoke(&result_object);
    c1109_l1127_action_invoke(&result_object);
    c1110_l1128_action_invoke(&result_object);
    c1111_l1129_action_invoke(&result_object);
    c1112_l1130_action_invoke(&result_object);
    c1113_l1131_assert_return_canonical_nan(&result_object);
    c1114_l1132_assert_return_arithmetic_nan(&result_object);
    c1115_l1133_assert_return_canonical_nan(&result_object);
    c1116_l1134_assert_return_arithmetic_nan(&result_object);
    c1117_l1135_assert_return_canonical_nan(&result_object);
    c1118_l1136_assert_return_arithmetic_nan(&result_object);
    c1119_l1137_assert_return_canonical_nan(&result_object);
    c1120_l1138_assert_return_arithmetic_nan(&result_object);
    c1121_l1139_assert_return_canonical_nan(&result_object);
    c1122_l1140_assert_return_arithmetic_nan(&result_object);
    c1123_l1141_assert_return_canonical_nan(&result_object);
    c1124_l1142_assert_return_arithmetic_nan(&result_object);
    c1125_l1143_assert_return_canonical_nan(&result_object);
    c1126_l1144_assert_return_arithmetic_nan(&result_object);
    c1127_l1145_assert_return_canonical_nan(&result_object);
    c1128_l1146_assert_return_arithmetic_nan(&result_object);
    c1129_l1147_assert_return_canonical_nan(&result_object);
    c1130_l1148_assert_return_arithmetic_nan(&result_object);
    c1131_l1149_assert_return_canonical_nan(&result_object);
    c1132_l1150_assert_return_arithmetic_nan(&result_object);
    c1133_l1151_assert_return_canonical_nan(&result_object);
    c1134_l1152_assert_return_arithmetic_nan(&result_object);
    c1135_l1153_assert_return_canonical_nan(&result_object);
    c1136_l1154_assert_return_arithmetic_nan(&result_object);
    c1137_l1155_assert_return_canonical_nan(&result_object);
    c1138_l1156_assert_return_arithmetic_nan(&result_object);
    c1139_l1157_assert_return_canonical_nan(&result_object);
    c1140_l1158_assert_return_arithmetic_nan(&result_object);
    c1141_l1159_assert_return_canonical_nan(&result_object);
    c1142_l1160_assert_return_arithmetic_nan(&result_object);
    c1143_l1161_assert_return_canonical_nan(&result_object);
    c1144_l1162_assert_return_arithmetic_nan(&result_object);
    c1145_l1163_assert_return_canonical_nan(&result_object);
    c1146_l1164_assert_return_arithmetic_nan(&result_object);
    c1147_l1165_assert_return_canonical_nan(&result_object);
    c1148_l1166_assert_return_arithmetic_nan(&result_object);
    c1149_l1167_assert_return_canonical_nan(&result_object);
    c1150_l1168_assert_return_arithmetic_nan(&result_object);
    c1151_l1169_assert_return_canonical_nan(&result_object);
    c1152_l1170_assert_return_arithmetic_nan(&result_object);
    c1153_l1171_assert_return_canonical_nan(&result_object);
    c1154_l1172_assert_return_arithmetic_nan(&result_object);
    c1155_l1173_assert_return_canonical_nan(&result_object);
    c1156_l1174_assert_return_arithmetic_nan(&result_object);
    c1157_l1175_assert_return_canonical_nan(&result_object);
    c1158_l1176_assert_return_arithmetic_nan(&result_object);
    c1159_l1177_assert_return_canonical_nan(&result_object);
    c1160_l1178_assert_return_arithmetic_nan(&result_object);
    c1161_l1179_assert_return_canonical_nan(&result_object);
    c1162_l1180_assert_return_arithmetic_nan(&result_object);
    c1163_l1181_assert_return_canonical_nan(&result_object);
    c1164_l1182_assert_return_arithmetic_nan(&result_object);
    c1165_l1183_assert_return_canonical_nan(&result_object);
    c1166_l1184_assert_return_arithmetic_nan(&result_object);
    c1167_l1185_assert_return_canonical_nan(&result_object);
    c1168_l1186_assert_return_arithmetic_nan(&result_object);
    c1169_l1187_assert_return_canonical_nan(&result_object);
    c1170_l1188_assert_return_arithmetic_nan(&result_object);
    c1171_l1189_assert_return_canonical_nan(&result_object);
    c1172_l1190_assert_return_arithmetic_nan(&result_object);
    c1173_l1191_assert_return_canonical_nan(&result_object);
    c1174_l1192_assert_return_arithmetic_nan(&result_object);
    c1175_l1193_assert_return_canonical_nan(&result_object);
    c1176_l1194_assert_return_arithmetic_nan(&result_object);
    c1177_l1195_assert_return_canonical_nan(&result_object);
    c1178_l1196_assert_return_arithmetic_nan(&result_object);
    c1179_l1197_assert_return_canonical_nan(&result_object);
    c1180_l1198_assert_return_arithmetic_nan(&result_object);
    c1181_l1199_assert_return_canonical_nan(&result_object);
    c1182_l1200_assert_return_arithmetic_nan(&result_object);
    c1183_l1201_assert_return_canonical_nan(&result_object);
    c1184_l1202_assert_return_arithmetic_nan(&result_object);
    c1185_l1203_assert_return_canonical_nan(&result_object);
    c1186_l1204_assert_return_arithmetic_nan(&result_object);
    c1187_l1205_assert_return_arithmetic_nan(&result_object);
    c1188_l1206_assert_return_arithmetic_nan(&result_object);
    c1189_l1207_assert_return_canonical_nan(&result_object);
    c1190_l1208_assert_return_arithmetic_nan(&result_object);
    c1191_l1209_assert_return_arithmetic_nan(&result_object);
    c1192_l1210_assert_return_arithmetic_nan(&result_object);
    c1193_l1211_assert_return_canonical_nan(&result_object);
    c1194_l1212_assert_return_arithmetic_nan(&result_object);
    c1195_l1213_assert_return_arithmetic_nan(&result_object);
    c1196_l1214_assert_return_arithmetic_nan(&result_object);
    c1197_l1215_assert_return_canonical_nan(&result_object);
    c1198_l1216_assert_return_arithmetic_nan(&result_object);
    c1199_l1217_assert_return_arithmetic_nan(&result_object);
    c1200_l1218_assert_return_arithmetic_nan(&result_object);
    c1201_l1219_assert_return_canonical_nan(&result_object);
    c1202_l1220_assert_return_canonical_nan(&result_object);
    c1203_l1221_assert_return_canonical_nan(&result_object);
    c1204_l1222_assert_return_canonical_nan(&result_object);
    c1205_l1223_action_invoke(&result_object);
    c1206_l1224_action_invoke(&result_object);
    c1207_l1225_action_invoke(&result_object);
    c1208_l1226_action_invoke(&result_object);
    c1209_l1227_action_invoke(&result_object);
    c1210_l1228_action_invoke(&result_object);
    c1211_l1229_action_invoke(&result_object);
    c1212_l1230_action_invoke(&result_object);
    c1213_l1231_action_invoke(&result_object);
    c1214_l1232_action_invoke(&result_object);
    c1215_l1233_action_invoke(&result_object);
    c1216_l1234_action_invoke(&result_object);
    c1217_l1235_action_invoke(&result_object);
    c1218_l1236_action_invoke(&result_object);
    c1219_l1237_action_invoke(&result_object);
    c1220_l1238_action_invoke(&result_object);
    c1221_l1239_action_invoke(&result_object);
    c1222_l1240_action_invoke(&result_object);
    c1223_l1241_action_invoke(&result_object);
    c1224_l1242_action_invoke(&result_object);
    c1225_l1243_action_invoke(&result_object);
    c1226_l1244_action_invoke(&result_object);
    c1227_l1245_action_invoke(&result_object);
    c1228_l1246_action_invoke(&result_object);
    c1229_l1247_action_invoke(&result_object);
    c1230_l1248_action_invoke(&result_object);
    c1231_l1249_action_invoke(&result_object);
    c1232_l1250_action_invoke(&result_object);
    c1233_l1251_assert_return_canonical_nan(&result_object);
    c1234_l1252_assert_return_arithmetic_nan(&result_object);
    c1235_l1253_assert_return_canonical_nan(&result_object);
    c1236_l1254_assert_return_arithmetic_nan(&result_object);
    c1237_l1255_assert_return_canonical_nan(&result_object);
    c1238_l1256_assert_return_arithmetic_nan(&result_object);
    c1239_l1257_assert_return_canonical_nan(&result_object);
    c1240_l1258_assert_return_arithmetic_nan(&result_object);
    c1241_l1259_action_invoke(&result_object);
    c1242_l1260_action_invoke(&result_object);
    c1243_l1261_action_invoke(&result_object);
    c1244_l1262_action_invoke(&result_object);
    c1245_l1263_action_invoke(&result_object);
    c1246_l1264_action_invoke(&result_object);
    c1247_l1265_action_invoke(&result_object);
    c1248_l1266_action_invoke(&result_object);
    c1249_l1267_action_invoke(&result_object);
    c1250_l1268_action_invoke(&result_object);
    c1251_l1269_action_invoke(&result_object);
    c1252_l1270_action_invoke(&result_object);
    c1253_l1271_action_invoke(&result_object);
    c1254_l1272_action_invoke(&result_object);
    c1255_l1273_action_invoke(&result_object);
    c1256_l1274_action_invoke(&result_object);
    c1257_l1275_action_invoke(&result_object);
    c1258_l1276_action_invoke(&result_object);
    c1259_l1277_action_invoke(&result_object);
    c1260_l1278_action_invoke(&result_object);
    c1261_l1279_action_invoke(&result_object);
    c1262_l1280_action_invoke(&result_object);
    c1263_l1281_action_invoke(&result_object);
    c1264_l1282_action_invoke(&result_object);
    c1265_l1283_action_invoke(&result_object);
    c1266_l1284_action_invoke(&result_object);
    c1267_l1285_action_invoke(&result_object);
    c1268_l1286_action_invoke(&result_object);
    c1269_l1287_action_invoke(&result_object);
    c1270_l1288_action_invoke(&result_object);
    c1271_l1289_action_invoke(&result_object);
    c1272_l1290_action_invoke(&result_object);
    c1273_l1291_assert_return_canonical_nan(&result_object);
    c1274_l1292_assert_return_arithmetic_nan(&result_object);
    c1275_l1293_assert_return_canonical_nan(&result_object);
    c1276_l1294_assert_return_arithmetic_nan(&result_object);
    c1277_l1295_assert_return_canonical_nan(&result_object);
    c1278_l1296_assert_return_arithmetic_nan(&result_object);
    c1279_l1297_assert_return_canonical_nan(&result_object);
    c1280_l1298_assert_return_arithmetic_nan(&result_object);
    c1281_l1299_action_invoke(&result_object);
    c1282_l1300_action_invoke(&result_object);
    c1283_l1301_action_invoke(&result_object);
    c1284_l1302_action_invoke(&result_object);
    c1285_l1303_action_invoke(&result_object);
    c1286_l1304_action_invoke(&result_object);
    c1287_l1305_action_invoke(&result_object);
    c1288_l1306_action_invoke(&result_object);
    c1289_l1307_action_invoke(&result_object);
    c1290_l1308_action_invoke(&result_object);
    c1291_l1309_action_invoke(&result_object);
    c1292_l1310_action_invoke(&result_object);
    c1293_l1311_action_invoke(&result_object);
    c1294_l1312_action_invoke(&result_object);
    c1295_l1313_action_invoke(&result_object);
    c1296_l1314_action_invoke(&result_object);
    c1297_l1315_action_invoke(&result_object);
    c1298_l1316_action_invoke(&result_object);
    c1299_l1317_action_invoke(&result_object);
    c1300_l1318_action_invoke(&result_object);
    c1301_l1319_action_invoke(&result_object);
    c1302_l1320_action_invoke(&result_object);
    c1303_l1321_action_invoke(&result_object);
    c1304_l1322_action_invoke(&result_object);
    c1305_l1323_action_invoke(&result_object);
    c1306_l1324_action_invoke(&result_object);
    c1307_l1325_action_invoke(&result_object);
    c1308_l1326_action_invoke(&result_object);
    c1309_l1327_action_invoke(&result_object);
    c1310_l1328_action_invoke(&result_object);
    c1311_l1329_action_invoke(&result_object);
    c1312_l1330_action_invoke(&result_object);
    c1313_l1331_assert_return_canonical_nan(&result_object);
    c1314_l1332_assert_return_arithmetic_nan(&result_object);
    c1315_l1333_assert_return_canonical_nan(&result_object);
    c1316_l1334_assert_return_arithmetic_nan(&result_object);
    c1317_l1335_assert_return_canonical_nan(&result_object);
    c1318_l1336_assert_return_arithmetic_nan(&result_object);
    c1319_l1337_assert_return_canonical_nan(&result_object);
    c1320_l1338_assert_return_arithmetic_nan(&result_object);
    c1321_l1339_action_invoke(&result_object);
    c1322_l1340_action_invoke(&result_object);
    c1323_l1341_action_invoke(&result_object);
    c1324_l1342_action_invoke(&result_object);
    c1325_l1343_action_invoke(&result_object);
    c1326_l1344_action_invoke(&result_object);
    c1327_l1345_action_invoke(&result_object);
    c1328_l1346_action_invoke(&result_object);
    c1329_l1347_action_invoke(&result_object);
    c1330_l1348_action_invoke(&result_object);
    c1331_l1349_action_invoke(&result_object);
    c1332_l1350_action_invoke(&result_object);
    c1333_l1351_action_invoke(&result_object);
    c1334_l1352_action_invoke(&result_object);
    c1335_l1353_action_invoke(&result_object);
    c1336_l1354_action_invoke(&result_object);
    c1337_l1355_action_invoke(&result_object);
    c1338_l1356_action_invoke(&result_object);
    c1339_l1357_action_invoke(&result_object);
    c1340_l1358_action_invoke(&result_object);
    c1341_l1359_action_invoke(&result_object);
    c1342_l1360_action_invoke(&result_object);
    c1343_l1361_action_invoke(&result_object);
    c1344_l1362_action_invoke(&result_object);
    c1345_l1363_action_invoke(&result_object);
    c1346_l1364_action_invoke(&result_object);
    c1347_l1365_action_invoke(&result_object);
    c1348_l1366_action_invoke(&result_object);
    c1349_l1367_action_invoke(&result_object);
    c1350_l1368_action_invoke(&result_object);
    c1351_l1369_action_invoke(&result_object);
    c1352_l1370_action_invoke(&result_object);
    c1353_l1371_assert_return_canonical_nan(&result_object);
    c1354_l1372_assert_return_arithmetic_nan(&result_object);
    c1355_l1373_assert_return_canonical_nan(&result_object);
    c1356_l1374_assert_return_arithmetic_nan(&result_object);
    c1357_l1375_assert_return_canonical_nan(&result_object);
    c1358_l1376_assert_return_arithmetic_nan(&result_object);
    c1359_l1377_assert_return_canonical_nan(&result_object);
    c1360_l1378_assert_return_arithmetic_nan(&result_object);
    c1361_l1379_action_invoke(&result_object);
    c1362_l1380_action_invoke(&result_object);
    c1363_l1381_action_invoke(&result_object);
    c1364_l1382_action_invoke(&result_object);
    c1365_l1383_action_invoke(&result_object);
    c1366_l1384_action_invoke(&result_object);
    c1367_l1385_action_invoke(&result_object);
    c1368_l1386_action_invoke(&result_object);
    c1369_l1387_action_invoke(&result_object);
    c1370_l1388_action_invoke(&result_object);
    c1371_l1389_action_invoke(&result_object);
    c1372_l1390_action_invoke(&result_object);
    c1373_l1391_action_invoke(&result_object);
    c1374_l1392_action_invoke(&result_object);
    c1375_l1393_action_invoke(&result_object);
    c1376_l1394_action_invoke(&result_object);
    c1377_l1395_action_invoke(&result_object);
    c1378_l1396_action_invoke(&result_object);
    c1379_l1397_action_invoke(&result_object);
    c1380_l1398_action_invoke(&result_object);
    c1381_l1399_action_invoke(&result_object);
    c1382_l1400_action_invoke(&result_object);
    c1383_l1401_action_invoke(&result_object);
    c1384_l1402_action_invoke(&result_object);
    c1385_l1403_action_invoke(&result_object);
    c1386_l1404_action_invoke(&result_object);
    c1387_l1405_action_invoke(&result_object);
    c1388_l1406_action_invoke(&result_object);
    c1389_l1407_action_invoke(&result_object);
    c1390_l1408_action_invoke(&result_object);
    c1391_l1409_action_invoke(&result_object);
    c1392_l1410_action_invoke(&result_object);
    c1393_l1411_assert_return_canonical_nan(&result_object);
    c1394_l1412_assert_return_arithmetic_nan(&result_object);
    c1395_l1413_assert_return_canonical_nan(&result_object);
    c1396_l1414_assert_return_arithmetic_nan(&result_object);
    c1397_l1415_assert_return_canonical_nan(&result_object);
    c1398_l1416_assert_return_arithmetic_nan(&result_object);
    c1399_l1417_assert_return_canonical_nan(&result_object);
    c1400_l1418_assert_return_arithmetic_nan(&result_object);
    c1401_l1419_action_invoke(&result_object);
    c1402_l1420_action_invoke(&result_object);
    c1403_l1421_action_invoke(&result_object);
    c1404_l1422_action_invoke(&result_object);
    c1405_l1423_action_invoke(&result_object);
    c1406_l1424_action_invoke(&result_object);
    c1407_l1425_action_invoke(&result_object);
    c1408_l1426_action_invoke(&result_object);
    c1409_l1427_action_invoke(&result_object);
    c1410_l1428_action_invoke(&result_object);
    c1411_l1429_action_invoke(&result_object);
    c1412_l1430_action_invoke(&result_object);
    c1413_l1431_action_invoke(&result_object);
    c1414_l1432_action_invoke(&result_object);
    c1415_l1433_action_invoke(&result_object);
    c1416_l1434_action_invoke(&result_object);
    c1417_l1435_action_invoke(&result_object);
    c1418_l1436_action_invoke(&result_object);
    c1419_l1437_action_invoke(&result_object);
    c1420_l1438_action_invoke(&result_object);
    c1421_l1439_action_invoke(&result_object);
    c1422_l1440_action_invoke(&result_object);
    c1423_l1441_action_invoke(&result_object);
    c1424_l1442_action_invoke(&result_object);
    c1425_l1443_action_invoke(&result_object);
    c1426_l1444_action_invoke(&result_object);
    c1427_l1445_action_invoke(&result_object);
    c1428_l1446_action_invoke(&result_object);
    c1429_l1447_action_invoke(&result_object);
    c1430_l1448_action_invoke(&result_object);
    c1431_l1449_action_invoke(&result_object);
    c1432_l1450_action_invoke(&result_object);
    c1433_l1451_assert_return_canonical_nan(&result_object);
    c1434_l1452_assert_return_arithmetic_nan(&result_object);
    c1435_l1453_assert_return_canonical_nan(&result_object);
    c1436_l1454_assert_return_arithmetic_nan(&result_object);
    c1437_l1455_assert_return_canonical_nan(&result_object);
    c1438_l1456_assert_return_arithmetic_nan(&result_object);
    c1439_l1457_assert_return_canonical_nan(&result_object);
    c1440_l1458_assert_return_arithmetic_nan(&result_object);
    c1441_l1459_action_invoke(&result_object);
    c1442_l1460_action_invoke(&result_object);
    c1443_l1461_action_invoke(&result_object);
    c1444_l1462_action_invoke(&result_object);
    c1445_l1463_action_invoke(&result_object);
    c1446_l1464_action_invoke(&result_object);
    c1447_l1465_action_invoke(&result_object);
    c1448_l1466_action_invoke(&result_object);
    c1449_l1467_action_invoke(&result_object);
    c1450_l1468_action_invoke(&result_object);
    c1451_l1469_action_invoke(&result_object);
    c1452_l1470_action_invoke(&result_object);
    c1453_l1471_action_invoke(&result_object);
    c1454_l1472_action_invoke(&result_object);
    c1455_l1473_action_invoke(&result_object);
    c1456_l1474_action_invoke(&result_object);
    c1457_l1475_action_invoke(&result_object);
    c1458_l1476_action_invoke(&result_object);
    c1459_l1477_action_invoke(&result_object);
    c1460_l1478_action_invoke(&result_object);
    c1461_l1479_action_invoke(&result_object);
    c1462_l1480_action_invoke(&result_object);
    c1463_l1481_action_invoke(&result_object);
    c1464_l1482_action_invoke(&result_object);
    c1465_l1483_action_invoke(&result_object);
    c1466_l1484_action_invoke(&result_object);
    c1467_l1485_action_invoke(&result_object);
    c1468_l1486_action_invoke(&result_object);
    c1469_l1487_action_invoke(&result_object);
    c1470_l1488_action_invoke(&result_object);
    c1471_l1489_action_invoke(&result_object);
    c1472_l1490_action_invoke(&result_object);
    c1473_l1491_assert_return_canonical_nan(&result_object);
    c1474_l1492_assert_return_arithmetic_nan(&result_object);
    c1475_l1493_assert_return_canonical_nan(&result_object);
    c1476_l1494_assert_return_arithmetic_nan(&result_object);
    c1477_l1495_assert_return_canonical_nan(&result_object);
    c1478_l1496_assert_return_arithmetic_nan(&result_object);
    c1479_l1497_assert_return_canonical_nan(&result_object);
    c1480_l1498_assert_return_arithmetic_nan(&result_object);
    c1481_l1499_action_invoke(&result_object);
    c1482_l1500_action_invoke(&result_object);
    c1483_l1501_action_invoke(&result_object);
    c1484_l1502_action_invoke(&result_object);
    c1485_l1503_action_invoke(&result_object);
    c1486_l1504_action_invoke(&result_object);
    c1487_l1505_action_invoke(&result_object);
    c1488_l1506_action_invoke(&result_object);
    c1489_l1507_action_invoke(&result_object);
    c1490_l1508_action_invoke(&result_object);
    c1491_l1509_action_invoke(&result_object);
    c1492_l1510_action_invoke(&result_object);
    c1493_l1511_action_invoke(&result_object);
    c1494_l1512_action_invoke(&result_object);
    c1495_l1513_action_invoke(&result_object);
    c1496_l1514_action_invoke(&result_object);
    c1497_l1515_action_invoke(&result_object);
    c1498_l1516_action_invoke(&result_object);
    c1499_l1517_action_invoke(&result_object);
    c1500_l1518_action_invoke(&result_object);
    c1501_l1519_action_invoke(&result_object);
    c1502_l1520_action_invoke(&result_object);
    c1503_l1521_action_invoke(&result_object);
    c1504_l1522_action_invoke(&result_object);
    c1505_l1523_action_invoke(&result_object);
    c1506_l1524_action_invoke(&result_object);
    c1507_l1525_action_invoke(&result_object);
    c1508_l1526_action_invoke(&result_object);
    c1509_l1527_assert_return_canonical_nan(&result_object);
    c1510_l1528_assert_return_canonical_nan(&result_object);
    c1511_l1529_assert_return_canonical_nan(&result_object);
    c1512_l1530_assert_return_canonical_nan(&result_object);
    c1513_l1531_assert_return_canonical_nan(&result_object);
    c1514_l1532_assert_return_arithmetic_nan(&result_object);
    c1515_l1533_assert_return_canonical_nan(&result_object);
    c1516_l1534_assert_return_arithmetic_nan(&result_object);
    c1517_l1535_assert_return_canonical_nan(&result_object);
    c1518_l1536_assert_return_arithmetic_nan(&result_object);
    c1519_l1537_assert_return_canonical_nan(&result_object);
    c1520_l1538_assert_return_arithmetic_nan(&result_object);
    c1521_l1539_assert_return_canonical_nan(&result_object);
    c1522_l1540_assert_return_arithmetic_nan(&result_object);
    c1523_l1541_assert_return_canonical_nan(&result_object);
    c1524_l1542_assert_return_arithmetic_nan(&result_object);
    c1525_l1543_assert_return_canonical_nan(&result_object);
    c1526_l1544_assert_return_arithmetic_nan(&result_object);
    c1527_l1545_assert_return_canonical_nan(&result_object);
    c1528_l1546_assert_return_arithmetic_nan(&result_object);
    c1529_l1547_assert_return_canonical_nan(&result_object);
    c1530_l1548_assert_return_arithmetic_nan(&result_object);
    c1531_l1549_assert_return_canonical_nan(&result_object);
    c1532_l1550_assert_return_arithmetic_nan(&result_object);
    c1533_l1551_assert_return_canonical_nan(&result_object);
    c1534_l1552_assert_return_arithmetic_nan(&result_object);
    c1535_l1553_assert_return_canonical_nan(&result_object);
    c1536_l1554_assert_return_arithmetic_nan(&result_object);
    c1537_l1555_assert_return_canonical_nan(&result_object);
    c1538_l1556_assert_return_arithmetic_nan(&result_object);
    c1539_l1557_assert_return_canonical_nan(&result_object);
    c1540_l1558_assert_return_arithmetic_nan(&result_object);
    c1541_l1559_assert_return_canonical_nan(&result_object);
    c1542_l1560_assert_return_arithmetic_nan(&result_object);
    c1543_l1561_assert_return_canonical_nan(&result_object);
    c1544_l1562_assert_return_arithmetic_nan(&result_object);
    c1545_l1563_assert_return_canonical_nan(&result_object);
    c1546_l1564_assert_return_arithmetic_nan(&result_object);
    c1547_l1565_assert_return_canonical_nan(&result_object);
    c1548_l1566_assert_return_arithmetic_nan(&result_object);
    c1549_l1567_assert_return_canonical_nan(&result_object);
    c1550_l1568_assert_return_arithmetic_nan(&result_object);
    c1551_l1569_assert_return_canonical_nan(&result_object);
    c1552_l1570_assert_return_arithmetic_nan(&result_object);
    c1553_l1571_assert_return_canonical_nan(&result_object);
    c1554_l1572_assert_return_arithmetic_nan(&result_object);
    c1555_l1573_assert_return_canonical_nan(&result_object);
    c1556_l1574_assert_return_arithmetic_nan(&result_object);
    c1557_l1575_assert_return_canonical_nan(&result_object);
    c1558_l1576_assert_return_arithmetic_nan(&result_object);
    c1559_l1577_assert_return_canonical_nan(&result_object);
    c1560_l1578_assert_return_arithmetic_nan(&result_object);
    c1561_l1579_assert_return_canonical_nan(&result_object);
    c1562_l1580_assert_return_arithmetic_nan(&result_object);
    c1563_l1581_assert_return_canonical_nan(&result_object);
    c1564_l1582_assert_return_arithmetic_nan(&result_object);
    c1565_l1583_assert_return_canonical_nan(&result_object);
    c1566_l1584_assert_return_arithmetic_nan(&result_object);
    c1567_l1585_assert_return_canonical_nan(&result_object);
    c1568_l1586_assert_return_arithmetic_nan(&result_object);
    c1569_l1587_assert_return_canonical_nan(&result_object);
    c1570_l1588_assert_return_arithmetic_nan(&result_object);
    c1571_l1589_assert_return_canonical_nan(&result_object);
    c1572_l1590_assert_return_arithmetic_nan(&result_object);
    c1573_l1591_assert_return_canonical_nan(&result_object);
    c1574_l1592_assert_return_arithmetic_nan(&result_object);
    c1575_l1593_assert_return_canonical_nan(&result_object);
    c1576_l1594_assert_return_arithmetic_nan(&result_object);
    c1577_l1595_assert_return_canonical_nan(&result_object);
    c1578_l1596_assert_return_arithmetic_nan(&result_object);
    c1579_l1597_assert_return_canonical_nan(&result_object);
    c1580_l1598_assert_return_arithmetic_nan(&result_object);
    c1581_l1599_assert_return_canonical_nan(&result_object);
    c1582_l1600_assert_return_arithmetic_nan(&result_object);
    c1583_l1601_assert_return_canonical_nan(&result_object);
    c1584_l1602_assert_return_arithmetic_nan(&result_object);
    c1585_l1603_assert_return_canonical_nan(&result_object);
    c1586_l1604_assert_return_arithmetic_nan(&result_object);
    c1587_l1605_assert_return_arithmetic_nan(&result_object);
    c1588_l1606_assert_return_arithmetic_nan(&result_object);
    c1589_l1607_assert_return_canonical_nan(&result_object);
    c1590_l1608_assert_return_arithmetic_nan(&result_object);
    c1591_l1609_assert_return_arithmetic_nan(&result_object);
    c1592_l1610_assert_return_arithmetic_nan(&result_object);
    c1593_l1611_assert_return_canonical_nan(&result_object);
    c1594_l1612_assert_return_arithmetic_nan(&result_object);
    c1595_l1613_assert_return_arithmetic_nan(&result_object);
    c1596_l1614_assert_return_arithmetic_nan(&result_object);
    c1597_l1615_assert_return_canonical_nan(&result_object);
    c1598_l1616_assert_return_arithmetic_nan(&result_object);
    c1599_l1617_assert_return_arithmetic_nan(&result_object);
    c1600_l1618_assert_return_arithmetic_nan(&result_object);
    c1601_l1619_action_invoke(&result_object);
    c1602_l1620_action_invoke(&result_object);
    c1603_l1621_action_invoke(&result_object);
    c1604_l1622_action_invoke(&result_object);
    c1605_l1623_action_invoke(&result_object);
    c1606_l1624_action_invoke(&result_object);
    c1607_l1625_action_invoke(&result_object);
    c1608_l1626_action_invoke(&result_object);
    c1609_l1627_action_invoke(&result_object);
    c1610_l1628_action_invoke(&result_object);
    c1611_l1629_action_invoke(&result_object);
    c1612_l1630_action_invoke(&result_object);
    c1613_l1631_action_invoke(&result_object);
    c1614_l1632_action_invoke(&result_object);
    c1615_l1633_action_invoke(&result_object);
    c1616_l1634_action_invoke(&result_object);
    c1617_l1635_action_invoke(&result_object);
    c1618_l1636_action_invoke(&result_object);
    c1619_l1637_action_invoke(&result_object);
    c1620_l1638_action_invoke(&result_object);
    c1621_l1639_action_invoke(&result_object);
    c1622_l1640_action_invoke(&result_object);
    c1623_l1641_action_invoke(&result_object);
    c1624_l1642_action_invoke(&result_object);
    c1625_l1643_action_invoke(&result_object);
    c1626_l1644_action_invoke(&result_object);
    c1627_l1645_action_invoke(&result_object);
    c1628_l1646_action_invoke(&result_object);
    c1629_l1647_action_invoke(&result_object);
    c1630_l1648_action_invoke(&result_object);
    c1631_l1649_action_invoke(&result_object);
    c1632_l1650_action_invoke(&result_object);
    c1633_l1651_assert_return_canonical_nan(&result_object);
    c1634_l1652_assert_return_arithmetic_nan(&result_object);
    c1635_l1653_assert_return_canonical_nan(&result_object);
    c1636_l1654_assert_return_arithmetic_nan(&result_object);
    c1637_l1655_assert_return_canonical_nan(&result_object);
    c1638_l1656_assert_return_arithmetic_nan(&result_object);
    c1639_l1657_assert_return_canonical_nan(&result_object);
    c1640_l1658_assert_return_arithmetic_nan(&result_object);
    c1641_l1659_action_invoke(&result_object);
    c1642_l1660_action_invoke(&result_object);
    c1643_l1661_action_invoke(&result_object);
    c1644_l1662_action_invoke(&result_object);
    c1645_l1663_action_invoke(&result_object);
    c1646_l1664_action_invoke(&result_object);
    c1647_l1665_action_invoke(&result_object);
    c1648_l1666_action_invoke(&result_object);
    c1649_l1667_action_invoke(&result_object);
    c1650_l1668_action_invoke(&result_object);
    c1651_l1669_action_invoke(&result_object);
    c1652_l1670_action_invoke(&result_object);
    c1653_l1671_action_invoke(&result_object);
    c1654_l1672_action_invoke(&result_object);
    c1655_l1673_action_invoke(&result_object);
    c1656_l1674_action_invoke(&result_object);
    c1657_l1675_action_invoke(&result_object);
    c1658_l1676_action_invoke(&result_object);
    c1659_l1677_action_invoke(&result_object);
    c1660_l1678_action_invoke(&result_object);
    c1661_l1679_action_invoke(&result_object);
    c1662_l1680_action_invoke(&result_object);
    c1663_l1681_action_invoke(&result_object);
    c1664_l1682_action_invoke(&result_object);
    c1665_l1683_action_invoke(&result_object);
    c1666_l1684_action_invoke(&result_object);
    c1667_l1685_action_invoke(&result_object);
    c1668_l1686_action_invoke(&result_object);
    c1669_l1687_action_invoke(&result_object);
    c1670_l1688_action_invoke(&result_object);
    c1671_l1689_action_invoke(&result_object);
    c1672_l1690_action_invoke(&result_object);
    c1673_l1691_assert_return_canonical_nan(&result_object);
    c1674_l1692_assert_return_arithmetic_nan(&result_object);
    c1675_l1693_assert_return_canonical_nan(&result_object);
    c1676_l1694_assert_return_arithmetic_nan(&result_object);
    c1677_l1695_assert_return_canonical_nan(&result_object);
    c1678_l1696_assert_return_arithmetic_nan(&result_object);
    c1679_l1697_assert_return_canonical_nan(&result_object);
    c1680_l1698_assert_return_arithmetic_nan(&result_object);
    c1681_l1699_action_invoke(&result_object);
    c1682_l1700_action_invoke(&result_object);
    c1683_l1701_action_invoke(&result_object);
    c1684_l1702_action_invoke(&result_object);
    c1685_l1703_action_invoke(&result_object);
    c1686_l1704_action_invoke(&result_object);
    c1687_l1705_action_invoke(&result_object);
    c1688_l1706_action_invoke(&result_object);
    c1689_l1707_action_invoke(&result_object);
    c1690_l1708_action_invoke(&result_object);
    c1691_l1709_action_invoke(&result_object);
    c1692_l1710_action_invoke(&result_object);
    c1693_l1711_action_invoke(&result_object);
    c1694_l1712_action_invoke(&result_object);
    c1695_l1713_action_invoke(&result_object);
    c1696_l1714_action_invoke(&result_object);
    c1697_l1715_action_invoke(&result_object);
    c1698_l1716_action_invoke(&result_object);
    c1699_l1717_action_invoke(&result_object);
    c1700_l1718_action_invoke(&result_object);
    c1701_l1719_action_invoke(&result_object);
    c1702_l1720_action_invoke(&result_object);
    c1703_l1721_action_invoke(&result_object);
    c1704_l1722_action_invoke(&result_object);
    c1705_l1723_action_invoke(&result_object);
    c1706_l1724_action_invoke(&result_object);
    c1707_l1725_action_invoke(&result_object);
    c1708_l1726_action_invoke(&result_object);
    c1709_l1727_action_invoke(&result_object);
    c1710_l1728_action_invoke(&result_object);
    c1711_l1729_action_invoke(&result_object);
    c1712_l1730_action_invoke(&result_object);
    c1713_l1731_assert_return_canonical_nan(&result_object);
    c1714_l1732_assert_return_arithmetic_nan(&result_object);
    c1715_l1733_assert_return_canonical_nan(&result_object);
    c1716_l1734_assert_return_arithmetic_nan(&result_object);
    c1717_l1735_assert_return_canonical_nan(&result_object);
    c1718_l1736_assert_return_arithmetic_nan(&result_object);
    c1719_l1737_assert_return_canonical_nan(&result_object);
    c1720_l1738_assert_return_arithmetic_nan(&result_object);
    c1721_l1739_action_invoke(&result_object);
    c1722_l1740_action_invoke(&result_object);
    c1723_l1741_action_invoke(&result_object);
    c1724_l1742_action_invoke(&result_object);
    c1725_l1743_action_invoke(&result_object);
    c1726_l1744_action_invoke(&result_object);
    c1727_l1745_action_invoke(&result_object);
    c1728_l1746_action_invoke(&result_object);
    c1729_l1747_action_invoke(&result_object);
    c1730_l1748_action_invoke(&result_object);
    c1731_l1749_action_invoke(&result_object);
    c1732_l1750_action_invoke(&result_object);
    c1733_l1751_action_invoke(&result_object);
    c1734_l1752_action_invoke(&result_object);
    c1735_l1753_action_invoke(&result_object);
    c1736_l1754_action_invoke(&result_object);
    c1737_l1755_action_invoke(&result_object);
    c1738_l1756_action_invoke(&result_object);
    c1739_l1757_action_invoke(&result_object);
    c1740_l1758_action_invoke(&result_object);
    c1741_l1759_action_invoke(&result_object);
    c1742_l1760_action_invoke(&result_object);
    c1743_l1761_action_invoke(&result_object);
    c1744_l1762_action_invoke(&result_object);
    c1745_l1763_action_invoke(&result_object);
    c1746_l1764_action_invoke(&result_object);
    c1747_l1765_action_invoke(&result_object);
    c1748_l1766_action_invoke(&result_object);
    c1749_l1767_action_invoke(&result_object);
    c1750_l1768_action_invoke(&result_object);
    c1751_l1769_action_invoke(&result_object);
    c1752_l1770_action_invoke(&result_object);
    c1753_l1771_assert_return_canonical_nan(&result_object);
    c1754_l1772_assert_return_arithmetic_nan(&result_object);
    c1755_l1773_assert_return_canonical_nan(&result_object);
    c1756_l1774_assert_return_arithmetic_nan(&result_object);
    c1757_l1775_assert_return_canonical_nan(&result_object);
    c1758_l1776_assert_return_arithmetic_nan(&result_object);
    c1759_l1777_assert_return_canonical_nan(&result_object);
    c1760_l1778_assert_return_arithmetic_nan(&result_object);
    c1761_l1779_action_invoke(&result_object);
    c1762_l1780_action_invoke(&result_object);
    c1763_l1781_action_invoke(&result_object);
    c1764_l1782_action_invoke(&result_object);
    c1765_l1783_action_invoke(&result_object);
    c1766_l1784_action_invoke(&result_object);
    c1767_l1785_action_invoke(&result_object);
    c1768_l1786_action_invoke(&result_object);
    c1769_l1787_action_invoke(&result_object);
    c1770_l1788_action_invoke(&result_object);
    c1771_l1789_action_invoke(&result_object);
    c1772_l1790_action_invoke(&result_object);
    c1773_l1791_action_invoke(&result_object);
    c1774_l1792_action_invoke(&result_object);
    c1775_l1793_action_invoke(&result_object);
    c1776_l1794_action_invoke(&result_object);
    c1777_l1795_action_invoke(&result_object);
    c1778_l1796_action_invoke(&result_object);
    c1779_l1797_action_invoke(&result_object);
    c1780_l1798_action_invoke(&result_object);
    c1781_l1799_action_invoke(&result_object);
    c1782_l1800_action_invoke(&result_object);
    c1783_l1801_action_invoke(&result_object);
    c1784_l1802_action_invoke(&result_object);
    c1785_l1803_action_invoke(&result_object);
    c1786_l1804_action_invoke(&result_object);
    c1787_l1805_action_invoke(&result_object);
    c1788_l1806_action_invoke(&result_object);
    c1789_l1807_action_invoke(&result_object);
    c1790_l1808_action_invoke(&result_object);
    c1791_l1809_action_invoke(&result_object);
    c1792_l1810_action_invoke(&result_object);
    c1793_l1811_assert_return_canonical_nan(&result_object);
    c1794_l1812_assert_return_arithmetic_nan(&result_object);
    c1795_l1813_assert_return_canonical_nan(&result_object);
    c1796_l1814_assert_return_arithmetic_nan(&result_object);
    c1797_l1815_assert_return_canonical_nan(&result_object);
    c1798_l1816_assert_return_arithmetic_nan(&result_object);
    c1799_l1817_assert_return_canonical_nan(&result_object);
    c1800_l1818_assert_return_arithmetic_nan(&result_object);
    c1801_l1819_action_invoke(&result_object);
    c1802_l1820_action_invoke(&result_object);
    c1803_l1821_action_invoke(&result_object);
    c1804_l1822_action_invoke(&result_object);
    c1805_l1823_action_invoke(&result_object);
    c1806_l1824_action_invoke(&result_object);
    c1807_l1825_action_invoke(&result_object);
    c1808_l1826_action_invoke(&result_object);
    c1809_l1827_action_invoke(&result_object);
    c1810_l1828_action_invoke(&result_object);
    c1811_l1829_action_invoke(&result_object);
    c1812_l1830_action_invoke(&result_object);
    c1813_l1831_action_invoke(&result_object);
    c1814_l1832_action_invoke(&result_object);
    c1815_l1833_action_invoke(&result_object);
    c1816_l1834_action_invoke(&result_object);
    c1817_l1835_action_invoke(&result_object);
    c1818_l1836_action_invoke(&result_object);
    c1819_l1837_action_invoke(&result_object);
    c1820_l1838_action_invoke(&result_object);
    c1821_l1839_action_invoke(&result_object);
    c1822_l1840_action_invoke(&result_object);
    c1823_l1841_action_invoke(&result_object);
    c1824_l1842_action_invoke(&result_object);
    c1825_l1843_action_invoke(&result_object);
    c1826_l1844_action_invoke(&result_object);
    c1827_l1845_action_invoke(&result_object);
    c1828_l1846_action_invoke(&result_object);
    c1829_l1847_action_invoke(&result_object);
    c1830_l1848_action_invoke(&result_object);
    c1831_l1849_action_invoke(&result_object);
    c1832_l1850_action_invoke(&result_object);
    c1833_l1851_assert_return_canonical_nan(&result_object);
    c1834_l1852_assert_return_arithmetic_nan(&result_object);
    c1835_l1853_assert_return_canonical_nan(&result_object);
    c1836_l1854_assert_return_arithmetic_nan(&result_object);
    c1837_l1855_assert_return_canonical_nan(&result_object);
    c1838_l1856_assert_return_arithmetic_nan(&result_object);
    c1839_l1857_assert_return_canonical_nan(&result_object);
    c1840_l1858_assert_return_arithmetic_nan(&result_object);
    c1841_l1859_action_invoke(&result_object);
    c1842_l1860_action_invoke(&result_object);
    c1843_l1861_action_invoke(&result_object);
    c1844_l1862_action_invoke(&result_object);
    c1845_l1863_action_invoke(&result_object);
    c1846_l1864_action_invoke(&result_object);
    c1847_l1865_action_invoke(&result_object);
    c1848_l1866_action_invoke(&result_object);
    c1849_l1867_action_invoke(&result_object);
    c1850_l1868_action_invoke(&result_object);
    c1851_l1869_action_invoke(&result_object);
    c1852_l1870_action_invoke(&result_object);
    c1853_l1871_action_invoke(&result_object);
    c1854_l1872_action_invoke(&result_object);
    c1855_l1873_action_invoke(&result_object);
    c1856_l1874_action_invoke(&result_object);
    c1857_l1875_action_invoke(&result_object);
    c1858_l1876_action_invoke(&result_object);
    c1859_l1877_action_invoke(&result_object);
    c1860_l1878_action_invoke(&result_object);
    c1861_l1879_action_invoke(&result_object);
    c1862_l1880_action_invoke(&result_object);
    c1863_l1881_action_invoke(&result_object);
    c1864_l1882_action_invoke(&result_object);
    c1865_l1883_action_invoke(&result_object);
    c1866_l1884_action_invoke(&result_object);
    c1867_l1885_action_invoke(&result_object);
    c1868_l1886_action_invoke(&result_object);
    c1869_l1887_action_invoke(&result_object);
    c1870_l1888_action_invoke(&result_object);
    c1871_l1889_action_invoke(&result_object);
    c1872_l1890_action_invoke(&result_object);
    c1873_l1891_assert_return_canonical_nan(&result_object);
    c1874_l1892_assert_return_arithmetic_nan(&result_object);
    c1875_l1893_assert_return_canonical_nan(&result_object);
    c1876_l1894_assert_return_arithmetic_nan(&result_object);
    c1877_l1895_assert_return_canonical_nan(&result_object);
    c1878_l1896_assert_return_arithmetic_nan(&result_object);
    c1879_l1897_assert_return_canonical_nan(&result_object);
    c1880_l1898_assert_return_arithmetic_nan(&result_object);
    c1881_l1899_action_invoke(&result_object);
    c1882_l1900_action_invoke(&result_object);
    c1883_l1901_action_invoke(&result_object);
    c1884_l1902_action_invoke(&result_object);
    c1885_l1903_action_invoke(&result_object);
    c1886_l1904_action_invoke(&result_object);
    c1887_l1905_action_invoke(&result_object);
    c1888_l1906_action_invoke(&result_object);
    c1889_l1907_action_invoke(&result_object);
    c1890_l1908_action_invoke(&result_object);
    c1891_l1909_action_invoke(&result_object);
    c1892_l1910_action_invoke(&result_object);
    c1893_l1911_action_invoke(&result_object);
    c1894_l1912_action_invoke(&result_object);
    c1895_l1913_action_invoke(&result_object);
    c1896_l1914_action_invoke(&result_object);
    c1897_l1915_action_invoke(&result_object);
    c1898_l1916_action_invoke(&result_object);
    c1899_l1917_action_invoke(&result_object);
    c1900_l1918_action_invoke(&result_object);
    c1901_l1919_action_invoke(&result_object);
    c1902_l1920_action_invoke(&result_object);
    c1903_l1921_action_invoke(&result_object);
    c1904_l1922_action_invoke(&result_object);
    c1905_l1923_action_invoke(&result_object);
    c1906_l1924_action_invoke(&result_object);
    c1907_l1925_action_invoke(&result_object);
    c1908_l1926_action_invoke(&result_object);
    c1909_l1927_action_invoke(&result_object);
    c1910_l1928_action_invoke(&result_object);
    c1911_l1929_action_invoke(&result_object);
    c1912_l1930_action_invoke(&result_object);
    c1913_l1931_assert_return_canonical_nan(&result_object);
    c1914_l1932_assert_return_arithmetic_nan(&result_object);
    c1915_l1933_assert_return_canonical_nan(&result_object);
    c1916_l1934_assert_return_arithmetic_nan(&result_object);
    c1917_l1935_assert_return_canonical_nan(&result_object);
    c1918_l1936_assert_return_arithmetic_nan(&result_object);
    c1919_l1937_assert_return_canonical_nan(&result_object);
    c1920_l1938_assert_return_arithmetic_nan(&result_object);
    c1921_l1939_assert_return_canonical_nan(&result_object);
    c1922_l1940_assert_return_arithmetic_nan(&result_object);
    c1923_l1941_assert_return_canonical_nan(&result_object);
    c1924_l1942_assert_return_arithmetic_nan(&result_object);
    c1925_l1943_assert_return_canonical_nan(&result_object);
    c1926_l1944_assert_return_arithmetic_nan(&result_object);
    c1927_l1945_assert_return_canonical_nan(&result_object);
    c1928_l1946_assert_return_arithmetic_nan(&result_object);
    c1929_l1947_assert_return_canonical_nan(&result_object);
    c1930_l1948_assert_return_arithmetic_nan(&result_object);
    c1931_l1949_assert_return_canonical_nan(&result_object);
    c1932_l1950_assert_return_arithmetic_nan(&result_object);
    c1933_l1951_assert_return_canonical_nan(&result_object);
    c1934_l1952_assert_return_arithmetic_nan(&result_object);
    c1935_l1953_assert_return_canonical_nan(&result_object);
    c1936_l1954_assert_return_arithmetic_nan(&result_object);
    c1937_l1955_assert_return_canonical_nan(&result_object);
    c1938_l1956_assert_return_arithmetic_nan(&result_object);
    c1939_l1957_assert_return_canonical_nan(&result_object);
    c1940_l1958_assert_return_arithmetic_nan(&result_object);
    c1941_l1959_assert_return_canonical_nan(&result_object);
    c1942_l1960_assert_return_arithmetic_nan(&result_object);
    c1943_l1961_assert_return_canonical_nan(&result_object);
    c1944_l1962_assert_return_arithmetic_nan(&result_object);
    c1945_l1963_assert_return_canonical_nan(&result_object);
    c1946_l1964_assert_return_arithmetic_nan(&result_object);
    c1947_l1965_assert_return_canonical_nan(&result_object);
    c1948_l1966_assert_return_arithmetic_nan(&result_object);
    c1949_l1967_assert_return_canonical_nan(&result_object);
    c1950_l1968_assert_return_arithmetic_nan(&result_object);
    c1951_l1969_assert_return_canonical_nan(&result_object);
    c1952_l1970_assert_return_arithmetic_nan(&result_object);
    c1953_l1971_assert_return_canonical_nan(&result_object);
    c1954_l1972_assert_return_arithmetic_nan(&result_object);
    c1955_l1973_assert_return_canonical_nan(&result_object);
    c1956_l1974_assert_return_arithmetic_nan(&result_object);
    c1957_l1975_assert_return_canonical_nan(&result_object);
    c1958_l1976_assert_return_arithmetic_nan(&result_object);
    c1959_l1977_assert_return_canonical_nan(&result_object);
    c1960_l1978_assert_return_arithmetic_nan(&result_object);
    c1961_l1979_assert_return_canonical_nan(&result_object);
    c1962_l1980_assert_return_arithmetic_nan(&result_object);
    c1963_l1981_assert_return_canonical_nan(&result_object);
    c1964_l1982_assert_return_arithmetic_nan(&result_object);
    c1965_l1983_assert_return_canonical_nan(&result_object);
    c1966_l1984_assert_return_arithmetic_nan(&result_object);
    c1967_l1985_assert_return_canonical_nan(&result_object);
    c1968_l1986_assert_return_arithmetic_nan(&result_object);
    c1969_l1987_assert_return_canonical_nan(&result_object);
    c1970_l1988_assert_return_arithmetic_nan(&result_object);
    c1971_l1989_assert_return_canonical_nan(&result_object);
    c1972_l1990_assert_return_arithmetic_nan(&result_object);
    c1973_l1991_assert_return_canonical_nan(&result_object);
    c1974_l1992_assert_return_arithmetic_nan(&result_object);
    c1975_l1993_assert_return_canonical_nan(&result_object);
    c1976_l1994_assert_return_arithmetic_nan(&result_object);
    c1977_l1995_assert_return_canonical_nan(&result_object);
    c1978_l1996_assert_return_arithmetic_nan(&result_object);
    c1979_l1997_assert_return_canonical_nan(&result_object);
    c1980_l1998_assert_return_arithmetic_nan(&result_object);
    c1981_l1999_assert_return_canonical_nan(&result_object);
    c1982_l2000_assert_return_arithmetic_nan(&result_object);
    c1983_l2001_assert_return_canonical_nan(&result_object);
    c1984_l2002_assert_return_arithmetic_nan(&result_object);
    c1985_l2003_assert_return_canonical_nan(&result_object);
    c1986_l2004_assert_return_arithmetic_nan(&result_object);
    c1987_l2005_assert_return_arithmetic_nan(&result_object);
    c1988_l2006_assert_return_arithmetic_nan(&result_object);
    c1989_l2007_assert_return_canonical_nan(&result_object);
    c1990_l2008_assert_return_arithmetic_nan(&result_object);
    c1991_l2009_assert_return_arithmetic_nan(&result_object);
    c1992_l2010_assert_return_arithmetic_nan(&result_object);
    c1993_l2011_assert_return_canonical_nan(&result_object);
    c1994_l2012_assert_return_arithmetic_nan(&result_object);
    c1995_l2013_assert_return_arithmetic_nan(&result_object);
    c1996_l2014_assert_return_arithmetic_nan(&result_object);
    c1997_l2015_assert_return_canonical_nan(&result_object);
    c1998_l2016_assert_return_arithmetic_nan(&result_object);
    c1999_l2017_assert_return_arithmetic_nan(&result_object);
    c2000_l2018_assert_return_arithmetic_nan(&result_object);
    c2001_l2019_action_invoke(&result_object);
    c2002_l2020_action_invoke(&result_object);
    c2003_l2021_action_invoke(&result_object);
    c2004_l2022_action_invoke(&result_object);
    c2005_l2023_action_invoke(&result_object);
    c2006_l2024_action_invoke(&result_object);
    c2007_l2025_action_invoke(&result_object);
    c2008_l2026_action_invoke(&result_object);
    c2009_l2027_action_invoke(&result_object);
    c2010_l2028_action_invoke(&result_object);
    c2011_l2029_action_invoke(&result_object);
    c2012_l2030_action_invoke(&result_object);
    c2013_l2031_action_invoke(&result_object);
    c2014_l2032_action_invoke(&result_object);
    c2015_l2033_action_invoke(&result_object);
    c2016_l2034_action_invoke(&result_object);
    c2017_l2035_action_invoke(&result_object);
    c2018_l2036_action_invoke(&result_object);
    c2019_l2037_action_invoke(&result_object);
    c2020_l2038_action_invoke(&result_object);
    c2021_l2039_action_invoke(&result_object);
    c2022_l2040_action_invoke(&result_object);
    c2023_l2041_action_invoke(&result_object);
    c2024_l2042_action_invoke(&result_object);
    c2025_l2043_action_invoke(&result_object);
    c2026_l2044_action_invoke(&result_object);
    c2027_l2045_action_invoke(&result_object);
    c2028_l2046_action_invoke(&result_object);
    c2029_l2047_action_invoke(&result_object);
    c2030_l2048_action_invoke(&result_object);
    c2031_l2049_action_invoke(&result_object);
    c2032_l2050_action_invoke(&result_object);
    c2033_l2051_assert_return_canonical_nan(&result_object);
    c2034_l2052_assert_return_arithmetic_nan(&result_object);
    c2035_l2053_assert_return_canonical_nan(&result_object);
    c2036_l2054_assert_return_arithmetic_nan(&result_object);
    c2037_l2055_assert_return_canonical_nan(&result_object);
    c2038_l2056_assert_return_arithmetic_nan(&result_object);
    c2039_l2057_assert_return_canonical_nan(&result_object);
    c2040_l2058_assert_return_arithmetic_nan(&result_object);
    c2041_l2059_action_invoke(&result_object);
    c2042_l2060_action_invoke(&result_object);
    c2043_l2061_action_invoke(&result_object);
    c2044_l2062_action_invoke(&result_object);
    c2045_l2063_action_invoke(&result_object);
    c2046_l2064_action_invoke(&result_object);
    c2047_l2065_action_invoke(&result_object);
    c2048_l2066_action_invoke(&result_object);
    c2049_l2067_action_invoke(&result_object);
    c2050_l2068_action_invoke(&result_object);
    c2051_l2069_action_invoke(&result_object);
    c2052_l2070_action_invoke(&result_object);
    c2053_l2071_action_invoke(&result_object);
    c2054_l2072_action_invoke(&result_object);
    c2055_l2073_action_invoke(&result_object);
    c2056_l2074_action_invoke(&result_object);
    c2057_l2075_action_invoke(&result_object);
    c2058_l2076_action_invoke(&result_object);
    c2059_l2077_action_invoke(&result_object);
    c2060_l2078_action_invoke(&result_object);
    c2061_l2079_action_invoke(&result_object);
    c2062_l2080_action_invoke(&result_object);
    c2063_l2081_action_invoke(&result_object);
    c2064_l2082_action_invoke(&result_object);
    c2065_l2083_action_invoke(&result_object);
    c2066_l2084_action_invoke(&result_object);
    c2067_l2085_action_invoke(&result_object);
    c2068_l2086_action_invoke(&result_object);
    c2069_l2087_action_invoke(&result_object);
    c2070_l2088_action_invoke(&result_object);
    c2071_l2089_action_invoke(&result_object);
    c2072_l2090_action_invoke(&result_object);
    c2073_l2091_assert_return_canonical_nan(&result_object);
    c2074_l2092_assert_return_arithmetic_nan(&result_object);
    c2075_l2093_assert_return_canonical_nan(&result_object);
    c2076_l2094_assert_return_arithmetic_nan(&result_object);
    c2077_l2095_assert_return_canonical_nan(&result_object);
    c2078_l2096_assert_return_arithmetic_nan(&result_object);
    c2079_l2097_assert_return_canonical_nan(&result_object);
    c2080_l2098_assert_return_arithmetic_nan(&result_object);
    c2081_l2099_action_invoke(&result_object);
    c2082_l2100_action_invoke(&result_object);
    c2083_l2101_action_invoke(&result_object);
    c2084_l2102_action_invoke(&result_object);
    c2085_l2103_action_invoke(&result_object);
    c2086_l2104_action_invoke(&result_object);
    c2087_l2105_action_invoke(&result_object);
    c2088_l2106_action_invoke(&result_object);
    c2089_l2107_action_invoke(&result_object);
    c2090_l2108_action_invoke(&result_object);
    c2091_l2109_action_invoke(&result_object);
    c2092_l2110_action_invoke(&result_object);
    c2093_l2111_action_invoke(&result_object);
    c2094_l2112_action_invoke(&result_object);
    c2095_l2113_action_invoke(&result_object);
    c2096_l2114_action_invoke(&result_object);
    c2097_l2115_action_invoke(&result_object);
    c2098_l2116_action_invoke(&result_object);
    c2099_l2117_action_invoke(&result_object);
    c2100_l2118_action_invoke(&result_object);
    c2101_l2119_action_invoke(&result_object);
    c2102_l2120_action_invoke(&result_object);
    c2103_l2121_action_invoke(&result_object);
    c2104_l2122_action_invoke(&result_object);
    c2105_l2123_action_invoke(&result_object);
    c2106_l2124_action_invoke(&result_object);
    c2107_l2125_action_invoke(&result_object);
    c2108_l2126_action_invoke(&result_object);
    c2109_l2127_action_invoke(&result_object);
    c2110_l2128_action_invoke(&result_object);
    c2111_l2129_action_invoke(&result_object);
    c2112_l2130_action_invoke(&result_object);
    c2113_l2131_assert_return_canonical_nan(&result_object);
    c2114_l2132_assert_return_arithmetic_nan(&result_object);
    c2115_l2133_assert_return_canonical_nan(&result_object);
    c2116_l2134_assert_return_arithmetic_nan(&result_object);
    c2117_l2135_assert_return_canonical_nan(&result_object);
    c2118_l2136_assert_return_arithmetic_nan(&result_object);
    c2119_l2137_assert_return_canonical_nan(&result_object);
    c2120_l2138_assert_return_arithmetic_nan(&result_object);
    c2121_l2139_action_invoke(&result_object);
    c2122_l2140_action_invoke(&result_object);
    c2123_l2141_action_invoke(&result_object);
    c2124_l2142_action_invoke(&result_object);
    c2125_l2143_action_invoke(&result_object);
    c2126_l2144_action_invoke(&result_object);
    c2127_l2145_action_invoke(&result_object);
    c2128_l2146_action_invoke(&result_object);
    c2129_l2147_action_invoke(&result_object);
    c2130_l2148_action_invoke(&result_object);
    c2131_l2149_action_invoke(&result_object);
    c2132_l2150_action_invoke(&result_object);
    c2133_l2151_action_invoke(&result_object);
    c2134_l2152_action_invoke(&result_object);
    c2135_l2153_action_invoke(&result_object);
    c2136_l2154_action_invoke(&result_object);
    c2137_l2155_action_invoke(&result_object);
    c2138_l2156_action_invoke(&result_object);
    c2139_l2157_action_invoke(&result_object);
    c2140_l2158_action_invoke(&result_object);
    c2141_l2159_action_invoke(&result_object);
    c2142_l2160_action_invoke(&result_object);
    c2143_l2161_action_invoke(&result_object);
    c2144_l2162_action_invoke(&result_object);
    c2145_l2163_action_invoke(&result_object);
    c2146_l2164_action_invoke(&result_object);
    c2147_l2165_action_invoke(&result_object);
    c2148_l2166_action_invoke(&result_object);
    c2149_l2167_action_invoke(&result_object);
    c2150_l2168_action_invoke(&result_object);
    c2151_l2169_action_invoke(&result_object);
    c2152_l2170_action_invoke(&result_object);
    c2153_l2171_assert_return_canonical_nan(&result_object);
    c2154_l2172_assert_return_arithmetic_nan(&result_object);
    c2155_l2173_assert_return_canonical_nan(&result_object);
    c2156_l2174_assert_return_arithmetic_nan(&result_object);
    c2157_l2175_assert_return_canonical_nan(&result_object);
    c2158_l2176_assert_return_arithmetic_nan(&result_object);
    c2159_l2177_assert_return_canonical_nan(&result_object);
    c2160_l2178_assert_return_arithmetic_nan(&result_object);
    c2161_l2179_action_invoke(&result_object);
    c2162_l2180_action_invoke(&result_object);
    c2163_l2181_action_invoke(&result_object);
    c2164_l2182_action_invoke(&result_object);
    c2165_l2183_action_invoke(&result_object);
    c2166_l2184_action_invoke(&result_object);
    c2167_l2185_action_invoke(&result_object);
    c2168_l2186_action_invoke(&result_object);
    c2169_l2187_action_invoke(&result_object);
    c2170_l2188_action_invoke(&result_object);
    c2171_l2189_action_invoke(&result_object);
    c2172_l2190_action_invoke(&result_object);
    c2173_l2191_action_invoke(&result_object);
    c2174_l2192_action_invoke(&result_object);
    c2175_l2193_action_invoke(&result_object);
    c2176_l2194_action_invoke(&result_object);
    c2177_l2195_action_invoke(&result_object);
    c2178_l2196_action_invoke(&result_object);
    c2179_l2197_action_invoke(&result_object);
    c2180_l2198_action_invoke(&result_object);
    c2181_l2199_action_invoke(&result_object);
    c2182_l2200_action_invoke(&result_object);
    c2183_l2201_action_invoke(&result_object);
    c2184_l2202_action_invoke(&result_object);
    c2185_l2203_action_invoke(&result_object);
    c2186_l2204_action_invoke(&result_object);
    c2187_l2205_action_invoke(&result_object);
    c2188_l2206_action_invoke(&result_object);
    c2189_l2207_action_invoke(&result_object);
    c2190_l2208_action_invoke(&result_object);
    c2191_l2209_action_invoke(&result_object);
    c2192_l2210_action_invoke(&result_object);
    c2193_l2211_assert_return_canonical_nan(&result_object);
    c2194_l2212_assert_return_arithmetic_nan(&result_object);
    c2195_l2213_assert_return_canonical_nan(&result_object);
    c2196_l2214_assert_return_arithmetic_nan(&result_object);
    c2197_l2215_assert_return_canonical_nan(&result_object);
    c2198_l2216_assert_return_arithmetic_nan(&result_object);
    c2199_l2217_assert_return_canonical_nan(&result_object);
    c2200_l2218_assert_return_arithmetic_nan(&result_object);
    c2201_l2219_action_invoke(&result_object);
    c2202_l2220_action_invoke(&result_object);
    c2203_l2221_action_invoke(&result_object);
    c2204_l2222_action_invoke(&result_object);
    c2205_l2223_action_invoke(&result_object);
    c2206_l2224_action_invoke(&result_object);
    c2207_l2225_action_invoke(&result_object);
    c2208_l2226_action_invoke(&result_object);
    c2209_l2227_action_invoke(&result_object);
    c2210_l2228_action_invoke(&result_object);
    c2211_l2229_action_invoke(&result_object);
    c2212_l2230_action_invoke(&result_object);
    c2213_l2231_action_invoke(&result_object);
    c2214_l2232_action_invoke(&result_object);
    c2215_l2233_action_invoke(&result_object);
    c2216_l2234_action_invoke(&result_object);
    c2217_l2235_action_invoke(&result_object);
    c2218_l2236_action_invoke(&result_object);
    c2219_l2237_action_invoke(&result_object);
    c2220_l2238_action_invoke(&result_object);
    c2221_l2239_action_invoke(&result_object);
    c2222_l2240_action_invoke(&result_object);
    c2223_l2241_action_invoke(&result_object);
    c2224_l2242_action_invoke(&result_object);
    c2225_l2243_action_invoke(&result_object);
    c2226_l2244_action_invoke(&result_object);
    c2227_l2245_action_invoke(&result_object);
    c2228_l2246_action_invoke(&result_object);
    c2229_l2247_action_invoke(&result_object);
    c2230_l2248_action_invoke(&result_object);
    c2231_l2249_action_invoke(&result_object);
    c2232_l2250_action_invoke(&result_object);
    c2233_l2251_assert_return_canonical_nan(&result_object);
    c2234_l2252_assert_return_arithmetic_nan(&result_object);
    c2235_l2253_assert_return_canonical_nan(&result_object);
    c2236_l2254_assert_return_arithmetic_nan(&result_object);
    c2237_l2255_assert_return_canonical_nan(&result_object);
    c2238_l2256_assert_return_arithmetic_nan(&result_object);
    c2239_l2257_assert_return_canonical_nan(&result_object);
    c2240_l2258_assert_return_arithmetic_nan(&result_object);
    c2241_l2259_action_invoke(&result_object);
    c2242_l2260_action_invoke(&result_object);
    c2243_l2261_action_invoke(&result_object);
    c2244_l2262_action_invoke(&result_object);
    c2245_l2263_action_invoke(&result_object);
    c2246_l2264_action_invoke(&result_object);
    c2247_l2265_action_invoke(&result_object);
    c2248_l2266_action_invoke(&result_object);
    c2249_l2267_action_invoke(&result_object);
    c2250_l2268_action_invoke(&result_object);
    c2251_l2269_action_invoke(&result_object);
    c2252_l2270_action_invoke(&result_object);
    c2253_l2271_action_invoke(&result_object);
    c2254_l2272_action_invoke(&result_object);
    c2255_l2273_action_invoke(&result_object);
    c2256_l2274_action_invoke(&result_object);
    c2257_l2275_action_invoke(&result_object);
    c2258_l2276_action_invoke(&result_object);
    c2259_l2277_action_invoke(&result_object);
    c2260_l2278_action_invoke(&result_object);
    c2261_l2279_action_invoke(&result_object);
    c2262_l2280_action_invoke(&result_object);
    c2263_l2281_action_invoke(&result_object);
    c2264_l2282_action_invoke(&result_object);
    c2265_l2283_action_invoke(&result_object);
    c2266_l2284_action_invoke(&result_object);
    c2267_l2285_action_invoke(&result_object);
    c2268_l2286_action_invoke(&result_object);
    c2269_l2287_action_invoke(&result_object);
    c2270_l2288_action_invoke(&result_object);
    c2271_l2289_action_invoke(&result_object);
    c2272_l2290_action_invoke(&result_object);
    c2273_l2291_assert_return_canonical_nan(&result_object);
    c2274_l2292_assert_return_arithmetic_nan(&result_object);
    c2275_l2293_assert_return_canonical_nan(&result_object);
    c2276_l2294_assert_return_arithmetic_nan(&result_object);
    c2277_l2295_assert_return_canonical_nan(&result_object);
    c2278_l2296_assert_return_arithmetic_nan(&result_object);
    c2279_l2297_assert_return_canonical_nan(&result_object);
    c2280_l2298_assert_return_arithmetic_nan(&result_object);
    c2281_l2299_action_invoke(&result_object);
    c2282_l2300_action_invoke(&result_object);
    c2283_l2301_action_invoke(&result_object);
    c2284_l2302_action_invoke(&result_object);
    c2285_l2303_action_invoke(&result_object);
    c2286_l2304_action_invoke(&result_object);
    c2287_l2305_action_invoke(&result_object);
    c2288_l2306_action_invoke(&result_object);
    c2289_l2307_action_invoke(&result_object);
    c2290_l2308_action_invoke(&result_object);
    c2291_l2309_action_invoke(&result_object);
    c2292_l2310_action_invoke(&result_object);
    c2293_l2311_action_invoke(&result_object);
    c2294_l2312_action_invoke(&result_object);
    c2295_l2313_action_invoke(&result_object);
    c2296_l2314_action_invoke(&result_object);
    c2297_l2315_action_invoke(&result_object);
    c2298_l2316_action_invoke(&result_object);
    c2299_l2317_action_invoke(&result_object);
    c2300_l2318_action_invoke(&result_object);
    c2301_l2319_action_invoke(&result_object);
    c2302_l2320_action_invoke(&result_object);
    c2303_l2321_action_invoke(&result_object);
    c2304_l2322_action_invoke(&result_object);
    c2305_l2323_action_invoke(&result_object);
    c2306_l2324_action_invoke(&result_object);
    c2307_l2325_action_invoke(&result_object);
    c2308_l2326_action_invoke(&result_object);
    c2309_l2327_action_invoke(&result_object);
    c2310_l2328_action_invoke(&result_object);
    c2311_l2329_action_invoke(&result_object);
    c2312_l2330_action_invoke(&result_object);
    c2313_l2331_assert_return_canonical_nan(&result_object);
    c2314_l2332_assert_return_arithmetic_nan(&result_object);
    c2315_l2333_assert_return_canonical_nan(&result_object);
    c2316_l2334_assert_return_arithmetic_nan(&result_object);
    c2317_l2335_assert_return_canonical_nan(&result_object);
    c2318_l2336_assert_return_arithmetic_nan(&result_object);
    c2319_l2337_assert_return_canonical_nan(&result_object);
    c2320_l2338_assert_return_arithmetic_nan(&result_object);
    c2321_l2339_assert_return_canonical_nan(&result_object);
    c2322_l2340_assert_return_arithmetic_nan(&result_object);
    c2323_l2341_assert_return_canonical_nan(&result_object);
    c2324_l2342_assert_return_arithmetic_nan(&result_object);
    c2325_l2343_assert_return_canonical_nan(&result_object);
    c2326_l2344_assert_return_arithmetic_nan(&result_object);
    c2327_l2345_assert_return_canonical_nan(&result_object);
    c2328_l2346_assert_return_arithmetic_nan(&result_object);
    c2329_l2347_assert_return_canonical_nan(&result_object);
    c2330_l2348_assert_return_arithmetic_nan(&result_object);
    c2331_l2349_assert_return_canonical_nan(&result_object);
    c2332_l2350_assert_return_arithmetic_nan(&result_object);
    c2333_l2351_assert_return_canonical_nan(&result_object);
    c2334_l2352_assert_return_arithmetic_nan(&result_object);
    c2335_l2353_assert_return_canonical_nan(&result_object);
    c2336_l2354_assert_return_arithmetic_nan(&result_object);
    c2337_l2355_assert_return_canonical_nan(&result_object);
    c2338_l2356_assert_return_arithmetic_nan(&result_object);
    c2339_l2357_assert_return_canonical_nan(&result_object);
    c2340_l2358_assert_return_arithmetic_nan(&result_object);
    c2341_l2359_assert_return_canonical_nan(&result_object);
    c2342_l2360_assert_return_arithmetic_nan(&result_object);
    c2343_l2361_assert_return_canonical_nan(&result_object);
    c2344_l2362_assert_return_arithmetic_nan(&result_object);
    c2345_l2363_assert_return_canonical_nan(&result_object);
    c2346_l2364_assert_return_arithmetic_nan(&result_object);
    c2347_l2365_assert_return_canonical_nan(&result_object);
    c2348_l2366_assert_return_arithmetic_nan(&result_object);
    c2349_l2367_assert_return_canonical_nan(&result_object);
    c2350_l2368_assert_return_arithmetic_nan(&result_object);
    c2351_l2369_assert_return_canonical_nan(&result_object);
    c2352_l2370_assert_return_arithmetic_nan(&result_object);
    c2353_l2371_assert_return_canonical_nan(&result_object);
    c2354_l2372_assert_return_arithmetic_nan(&result_object);
    c2355_l2373_assert_return_canonical_nan(&result_object);
    c2356_l2374_assert_return_arithmetic_nan(&result_object);
    c2357_l2375_assert_return_canonical_nan(&result_object);
    c2358_l2376_assert_return_arithmetic_nan(&result_object);
    c2359_l2377_assert_return_canonical_nan(&result_object);
    c2360_l2378_assert_return_arithmetic_nan(&result_object);
    c2361_l2379_assert_return_canonical_nan(&result_object);
    c2362_l2380_assert_return_arithmetic_nan(&result_object);
    c2363_l2381_assert_return_canonical_nan(&result_object);
    c2364_l2382_assert_return_arithmetic_nan(&result_object);
    c2365_l2383_assert_return_canonical_nan(&result_object);
    c2366_l2384_assert_return_arithmetic_nan(&result_object);
    c2367_l2385_assert_return_canonical_nan(&result_object);
    c2368_l2386_assert_return_arithmetic_nan(&result_object);
    c2369_l2387_assert_return_canonical_nan(&result_object);
    c2370_l2388_assert_return_arithmetic_nan(&result_object);
    c2371_l2389_assert_return_canonical_nan(&result_object);
    c2372_l2390_assert_return_arithmetic_nan(&result_object);
    c2373_l2391_assert_return_canonical_nan(&result_object);
    c2374_l2392_assert_return_arithmetic_nan(&result_object);
    c2375_l2393_assert_return_canonical_nan(&result_object);
    c2376_l2394_assert_return_arithmetic_nan(&result_object);
    c2377_l2395_assert_return_canonical_nan(&result_object);
    c2378_l2396_assert_return_arithmetic_nan(&result_object);
    c2379_l2397_assert_return_canonical_nan(&result_object);
    c2380_l2398_assert_return_arithmetic_nan(&result_object);
    c2381_l2399_assert_return_canonical_nan(&result_object);
    c2382_l2400_assert_return_arithmetic_nan(&result_object);
    c2383_l2401_assert_return_canonical_nan(&result_object);
    c2384_l2402_assert_return_arithmetic_nan(&result_object);
    c2385_l2403_assert_return_canonical_nan(&result_object);
    c2386_l2404_assert_return_arithmetic_nan(&result_object);
    c2387_l2405_assert_return_arithmetic_nan(&result_object);
    c2388_l2406_assert_return_arithmetic_nan(&result_object);
    c2389_l2407_assert_return_canonical_nan(&result_object);
    c2390_l2408_assert_return_arithmetic_nan(&result_object);
    c2391_l2409_assert_return_arithmetic_nan(&result_object);
    c2392_l2410_assert_return_arithmetic_nan(&result_object);
    c2393_l2411_assert_return_canonical_nan(&result_object);
    c2394_l2412_assert_return_arithmetic_nan(&result_object);
    c2395_l2413_assert_return_arithmetic_nan(&result_object);
    c2396_l2414_assert_return_arithmetic_nan(&result_object);
    c2397_l2415_assert_return_canonical_nan(&result_object);
    c2398_l2416_assert_return_arithmetic_nan(&result_object);
    c2399_l2417_assert_return_arithmetic_nan(&result_object);
    c2400_l2418_assert_return_arithmetic_nan(&result_object);
    c2401_l2419_action_invoke(&result_object);
    c2402_l2420_action_invoke(&result_object);
    c2403_l2421_assert_return_canonical_nan(&result_object);
    c2404_l2422_action_invoke(&result_object);
    c2405_l2423_assert_return_canonical_nan(&result_object);
    c2406_l2424_action_invoke(&result_object);
    c2407_l2425_assert_return_canonical_nan(&result_object);
    c2408_l2426_action_invoke(&result_object);
    c2409_l2427_assert_return_canonical_nan(&result_object);
    c2410_l2428_action_invoke(&result_object);
    c2411_l2429_assert_return_canonical_nan(&result_object);
    c2412_l2430_action_invoke(&result_object);
    c2413_l2431_assert_return_canonical_nan(&result_object);
    c2414_l2432_action_invoke(&result_object);
    c2415_l2433_assert_return_canonical_nan(&result_object);
    c2416_l2434_action_invoke(&result_object);
    c2417_l2435_assert_return_canonical_nan(&result_object);
    c2418_l2436_assert_return_arithmetic_nan(&result_object);
    c2419_l2437_assert_return_canonical_nan(&result_object);
    c2420_l2438_assert_return_arithmetic_nan(&result_object);
    c2421_l2439_action_invoke(&result_object);
    c2422_l2440_action_invoke(&result_object);
    c2423_l2441_action_invoke(&result_object);
    c2424_l2442_action_invoke(&result_object);
    c2425_l2443_action_invoke(&result_object);
    c2426_l2444_action_invoke(&result_object);
    c2427_l2445_action_invoke(&result_object);
    c2428_l2446_action_invoke(&result_object);
    c2429_l2447_action_invoke(&result_object);
    c2430_l2448_action_invoke(&result_object);
    c2431_l2449_action_invoke(&result_object);
    c2432_l2450_action_invoke(&result_object);
    c2433_l2451_action_invoke(&result_object);
    c2434_l2452_action_invoke(&result_object);
    c2435_l2453_action_invoke(&result_object);
    c2436_l2454_action_invoke(&result_object);
    c2437_l2455_assert_return_canonical_nan(&result_object);
    c2438_l2456_assert_return_arithmetic_nan(&result_object);
    c2439_l2457_assert_return_canonical_nan(&result_object);
    c2440_l2458_assert_return_arithmetic_nan(&result_object);
    c2441_l2459_action_invoke(&result_object);
    c2442_l2460_action_invoke(&result_object);
    c2443_l2461_action_invoke(&result_object);
    c2444_l2462_action_invoke(&result_object);
    c2445_l2463_action_invoke(&result_object);
    c2446_l2464_action_invoke(&result_object);
    c2447_l2465_action_invoke(&result_object);
    c2448_l2466_action_invoke(&result_object);
    c2449_l2467_action_invoke(&result_object);
    c2450_l2468_action_invoke(&result_object);
    c2451_l2469_action_invoke(&result_object);
    c2452_l2470_action_invoke(&result_object);
    c2453_l2471_action_invoke(&result_object);
    c2454_l2472_action_invoke(&result_object);
    c2455_l2473_action_invoke(&result_object);
    c2456_l2474_action_invoke(&result_object);
    c2457_l2475_assert_return_canonical_nan(&result_object);
    c2458_l2476_assert_return_arithmetic_nan(&result_object);
    c2459_l2477_assert_return_canonical_nan(&result_object);
    c2460_l2478_assert_return_arithmetic_nan(&result_object);
    c2461_l2479_action_invoke(&result_object);
    c2462_l2480_action_invoke(&result_object);
    c2463_l2481_action_invoke(&result_object);
    c2464_l2482_action_invoke(&result_object);
    c2465_l2483_action_invoke(&result_object);
    c2466_l2484_action_invoke(&result_object);
    c2467_l2485_action_invoke(&result_object);
    c2468_l2486_action_invoke(&result_object);
    c2469_l2487_action_invoke(&result_object);
    c2470_l2488_action_invoke(&result_object);
    c2471_l2489_action_invoke(&result_object);
    c2472_l2490_action_invoke(&result_object);
    c2473_l2491_action_invoke(&result_object);
    c2474_l2492_action_invoke(&result_object);
    c2475_l2493_action_invoke(&result_object);
    c2476_l2494_action_invoke(&result_object);
    c2477_l2495_assert_return_canonical_nan(&result_object);
    c2478_l2496_assert_return_arithmetic_nan(&result_object);
    c2479_l2497_assert_return_canonical_nan(&result_object);
    c2480_l2498_assert_return_arithmetic_nan(&result_object);
    c2481_l2499_action_invoke(&result_object);
    c2482_l2500_action_invoke(&result_object);
    c2483_l2501_action_invoke(&result_object);
    c2484_l2502_action_invoke(&result_object);
    c2485_l2503_action_invoke(&result_object);
    c2486_l2504_action_invoke(&result_object);
    c2487_l2505_action_invoke(&result_object);
    c2488_l2506_action_invoke(&result_object);
    c2489_l2507_action_invoke(&result_object);
    c2490_l2508_action_invoke(&result_object);
    c2491_l2509_action_invoke(&result_object);
    c2492_l2510_action_invoke(&result_object);
    c2493_l2511_action_invoke(&result_object);
    c2494_l2512_action_invoke(&result_object);
    c2495_l2513_action_invoke(&result_object);
    c2496_l2514_action_invoke(&result_object);
    c2497_l2515_assert_return_canonical_nan(&result_object);
    c2498_l2516_assert_return_arithmetic_nan(&result_object);
    c2499_l2517_assert_return_canonical_nan(&result_object);
    c2500_l2518_assert_return_arithmetic_nan(&result_object);
}
