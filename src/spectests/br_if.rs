// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/br_if.wast
#![allow(
    warnings,
    dead_code
)]
use wabt::wat2wasm;

use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, Instance, Export};
use super::_common::{
    spectest_importobject,
    NaNCheck,
};


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32 i32) (result i32)))
      (type (;1;) (func))
      (type (;2;) (func (result i32)))
      (type (;3;) (func (result i64)))
      (type (;4;) (func (result f32)))
      (type (;5;) (func (result f64)))
      (type (;6;) (func (param i32) (result i32)))
      (type (;7;) (func (param i32)))
      (type (;8;) (func (param i32 i32)))
      (func (;0;) (type 1))
      (func (;1;) (type 1)
        block  ;; label = @1
          i32.const 0
          i32.const 1
          br_if 0 (;@1;)
          i32.ctz
          drop
        end)
      (func (;2;) (type 1)
        block  ;; label = @1
          i64.const 0
          i32.const 1
          br_if 0 (;@1;)
          i64.ctz
          drop
        end)
      (func (;3;) (type 1)
        block  ;; label = @1
          f32.const 0x0p+0 (;=0;)
          i32.const 1
          br_if 0 (;@1;)
          f32.neg
          drop
        end)
      (func (;4;) (type 1)
        block  ;; label = @1
          f64.const 0x0p+0 (;=0;)
          i32.const 1
          br_if 0 (;@1;)
          f64.neg
          drop
        end)
      (func (;5;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          i32.ctz
        end)
      (func (;6;) (type 3) (result i64)
        block (result i64)  ;; label = @1
          i64.const 2
          i32.const 1
          br_if 0 (;@1;)
          i64.ctz
        end)
      (func (;7;) (type 4) (result f32)
        block (result f32)  ;; label = @1
          f32.const 0x1.8p+1 (;=3;)
          i32.const 1
          br_if 0 (;@1;)
          f32.neg
        end)
      (func (;8;) (type 5) (result f64)
        block (result f64)  ;; label = @1
          f64.const 0x1p+2 (;=4;)
          i32.const 1
          br_if 0 (;@1;)
          f64.neg
        end)
      (func (;9;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          get_local 0
          br_if 0 (;@1;)
          i32.const 2
          return
        end
        i32.const 3)
      (func (;10;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          call 0
          get_local 0
          br_if 0 (;@1;)
          i32.const 2
          return
        end
        i32.const 3)
      (func (;11;) (type 7) (param i32)
        block  ;; label = @1
          call 0
          call 0
          get_local 0
          br_if 0 (;@1;)
        end)
      (func (;12;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 10
          get_local 0
          br_if 0 (;@1;)
          drop
          i32.const 11
          return
        end)
      (func (;13;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          call 0
          i32.const 20
          get_local 0
          br_if 0 (;@1;)
          drop
          i32.const 21
          return
        end)
      (func (;14;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          call 0
          call 0
          i32.const 11
          get_local 0
          br_if 0 (;@1;)
        end)
      (func (;15;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          loop  ;; label = @2
            get_local 0
            br_if 1 (;@1;)
            i32.const 2
            return
          end
        end
        i32.const 3)
      (func (;16;) (type 6) (param i32) (result i32)
        block  ;; label = @1
          loop  ;; label = @2
            call 0
            get_local 0
            br_if 1 (;@1;)
            i32.const 2
            return
          end
        end
        i32.const 4)
      (func (;17;) (type 7) (param i32)
        loop  ;; label = @1
          call 0
          get_local 0
          br_if 1 (;@0;)
        end)
      (func (;18;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          br 0 (;@1;)
        end)
      (func (;19;) (type 1)
        block  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          br_if 0 (;@1;)
        end)
      (func (;20;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          i32.const 3
          br_if 0 (;@1;)
          drop
          i32.const 4
        end)
      (func (;21;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 1
          get_local 0
          br_if 0 (;@1;)
          br_if 0 (;@1;)
          drop
          i32.const 4
        end)
      (func (;22;) (type 1)
        block  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          br_table 0 (;@1;) 0 (;@1;) 0 (;@1;)
        end)
      (func (;23;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          br_if 0 (;@1;)
          i32.const 3
          br_table 0 (;@1;) 0 (;@1;) 0 (;@1;)
          i32.const 4
        end)
      (func (;24;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 1
          i32.const 3
          br_if 0 (;@1;)
          br_table 0 (;@1;) 0 (;@1;)
          i32.const 4
        end)
      (func (;25;) (type 3) (result i64)
        block (result i64)  ;; label = @1
          i64.const 1
          i32.const 2
          br_if 0 (;@1;)
          return
        end)
      (func (;26;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          get_local 0
          br_if 0 (;@1;)
          if (result i32)  ;; label = @2
            i32.const 2
          else
            i32.const 3
          end
        end)
      (func (;27;) (type 8) (param i32 i32)
        block  ;; label = @1
          get_local 0
          if  ;; label = @2
            get_local 1
            br_if 1 (;@1;)
          else
            call 0
          end
        end)
      (func (;28;) (type 8) (param i32 i32)
        block  ;; label = @1
          get_local 0
          if  ;; label = @2
            call 0
          else
            get_local 1
            br_if 1 (;@1;)
          end
        end)
      (func (;29;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 3
          i32.const 10
          br_if 0 (;@1;)
          i32.const 2
          get_local 0
          select
        end)
      (func (;30;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 3
          i32.const 10
          br_if 0 (;@1;)
          get_local 0
          select
        end)
      (func (;31;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 3
          i32.const 10
          br_if 0 (;@1;)
          select
        end)
      (func (;32;) (type 0) (param i32 i32 i32) (result i32)
        i32.const -1)
      (func (;33;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 12
          i32.const 1
          br_if 0 (;@1;)
          i32.const 2
          i32.const 3
          call 32
        end)
      (func (;34;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 13
          i32.const 1
          br_if 0 (;@1;)
          i32.const 3
          call 32
        end)
      (func (;35;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 14
          i32.const 1
          br_if 0 (;@1;)
          call 32
        end)
      (func (;36;) (type 0) (param i32 i32 i32) (result i32)
        get_local 0)
      (func (;37;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          i32.const 1
          i32.const 2
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;38;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          i32.const 2
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;39;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          i32.const 0
          call_indirect (type 0)
        end)
      (func (;40;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 2
          i32.const 3
          i32.const 4
          i32.const 10
          br_if 0 (;@1;)
          call_indirect (type 0)
        end)
      (func (;41;) (type 6) (param i32) (result i32)
        (local i32)
        block (result i32)  ;; label = @1
          i32.const 17
          get_local 0
          br_if 0 (;@1;)
          set_local 0
          i32.const -1
        end)
      (func (;42;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          get_local 0
          br_if 0 (;@1;)
          tee_local 0
          i32.const -1
          return
        end)
      (func (;43;) (type 6) (param i32) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          get_local 0
          br_if 0 (;@1;)
          set_global 0
          i32.const -1
          return
        end)
      (func (;44;) (type 5) (result f64)
        block (result f64)  ;; label = @1
          f64.const 0x1p+0 (;=1;)
          i32.const 1
          br_if 0 (;@1;)
          f64.neg
        end)
      (func (;45;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          i32.const 10
          i32.add
        end)
      (func (;46;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 10
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          i32.sub
        end)
      (func (;47;) (type 2) (result i32)
        block (result i32)  ;; label = @1
          i32.const 1
          i32.const 1
          br_if 0 (;@1;)
          memory.grow
        end)
      (func (;48;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          i32.const 4
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 16
          end
          i32.add
        end
        i32.add)
      (func (;49;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 4
          end
          br 0 (;@1;)
          i32.const 16
        end
        i32.add)
      (func (;50;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 4
          end
          i32.const 1
          br_if 0 (;@1;)
          drop
          i32.const 16
        end
        i32.add)
      (func (;51;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          i32.const 4
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 1
          end
          br_if 0 (;@1;)
          drop
          i32.const 16
        end
        i32.add)
      (func (;52;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 4
          end
          i32.const 1
          br_table 0 (;@1;)
          i32.const 16
        end
        i32.add)
      (func (;53;) (type 6) (param i32) (result i32)
        i32.const 1
        block (result i32)  ;; label = @1
          i32.const 2
          drop
          i32.const 4
          block (result i32)  ;; label = @2
            i32.const 8
            get_local 0
            br_if 1 (;@1;)
            drop
            i32.const 1
          end
          br_table 0 (;@1;)
          i32.const 16
        end
        i32.add)
      (table (;0;) 1 1 anyfunc)
      (memory (;0;) 0)
      (global (;0;) (mut i32) (i32.const 10))
      (export \"type-i32\" (func 1))
      (export \"type-i64\" (func 2))
      (export \"type-f32\" (func 3))
      (export \"type-f64\" (func 4))
      (export \"type-i32-value\" (func 5))
      (export \"type-i64-value\" (func 6))
      (export \"type-f32-value\" (func 7))
      (export \"type-f64-value\" (func 8))
      (export \"as-block-first\" (func 9))
      (export \"as-block-mid\" (func 10))
      (export \"as-block-last\" (func 11))
      (export \"as-block-first-value\" (func 12))
      (export \"as-block-mid-value\" (func 13))
      (export \"as-block-last-value\" (func 14))
      (export \"as-loop-first\" (func 15))
      (export \"as-loop-mid\" (func 16))
      (export \"as-loop-last\" (func 17))
      (export \"as-br-value\" (func 18))
      (export \"as-br_if-cond\" (func 19))
      (export \"as-br_if-value\" (func 20))
      (export \"as-br_if-value-cond\" (func 21))
      (export \"as-br_table-index\" (func 22))
      (export \"as-br_table-value\" (func 23))
      (export \"as-br_table-value-index\" (func 24))
      (export \"as-return-value\" (func 25))
      (export \"as-if-cond\" (func 26))
      (export \"as-if-then\" (func 27))
      (export \"as-if-else\" (func 28))
      (export \"as-select-first\" (func 29))
      (export \"as-select-second\" (func 30))
      (export \"as-select-cond\" (func 31))
      (export \"as-call-first\" (func 33))
      (export \"as-call-mid\" (func 34))
      (export \"as-call-last\" (func 35))
      (export \"as-call_indirect-func\" (func 37))
      (export \"as-call_indirect-first\" (func 38))
      (export \"as-call_indirect-mid\" (func 39))
      (export \"as-call_indirect-last\" (func 40))
      (export \"as-set_local-value\" (func 41))
      (export \"as-tee_local-value\" (func 42))
      (export \"as-set_global-value\" (func 43))
      (export \"as-unary-operand\" (func 44))
      (export \"as-binary-left\" (func 45))
      (export \"as-binary-right\" (func 46))
      (export \"as-memory.grow-size\" (func 47))
      (export \"nested-block-value\" (func 48))
      (export \"nested-br-value\" (func 49))
      (export \"nested-br_if-value\" (func 50))
      (export \"nested-br_if-value-cond\" (func 51))
      (export \"nested-br_table-value\" (func 52))
      (export \"nested-br_table-value-index\" (func 53))
      (elem (;0;) (i32.const 0) 36))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

fn start_module_1(result_object: &ResultObject) {
    result_object.instance.start();
}

// Line 334
fn c1_l334_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1_l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 335
fn c2_l335_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2_l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 336
fn c3_l336_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c3_l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 337
fn c4_l337_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c4_l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 339
fn c5_l339_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c5_l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-i32-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 340
fn c6_l340_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c6_l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-i64-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 341
fn c7_l341_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c7_l341_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-f32-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 3.0 as f32);
}

// Line 342
fn c8_l342_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c8_l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-f64-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 4.0 as f64);
}

// Line 344
fn c9_l344_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c9_l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 345
fn c10_l345_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c10_l345_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 346
fn c11_l346_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c11_l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 347
fn c12_l347_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c12_l347_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 348
fn c13_l348_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c13_l348_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 349
fn c14_l349_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c14_l349_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 351
fn c15_l351_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c15_l351_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-first-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 11 as i32);
}

// Line 352
fn c16_l352_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c16_l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-first-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 10 as i32);
}

// Line 353
fn c17_l353_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c17_l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-mid-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 21 as i32);
}

// Line 354
fn c18_l354_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c18_l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-mid-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 20 as i32);
}

// Line 355
fn c19_l355_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c19_l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-last-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 11 as i32);
}

// Line 356
fn c20_l356_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c20_l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-block-last-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 11 as i32);
}

// Line 358
fn c21_l358_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c21_l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 359
fn c22_l359_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c22_l359_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 360
fn c23_l360_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c23_l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 361
fn c24_l361_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c24_l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 4 as i32);
}

// Line 362
fn c25_l362_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c25_l362_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 363
fn c26_l363_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c26_l363_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-loop-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 365
fn c27_l365_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c27_l365_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 367
fn c28_l367_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c28_l367_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 368
fn c29_l368_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c29_l368_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 369
fn c30_l369_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c30_l369_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 370
fn c31_l370_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c31_l370_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 372
fn c32_l372_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c32_l372_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 373
fn c33_l373_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c33_l373_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 374
fn c34_l374_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c34_l374_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-value-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 376
fn c35_l376_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c35_l376_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-return-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 378
fn c36_l378_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c36_l378_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 379
fn c37_l379_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c37_l379_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 380
fn c38_l380_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c38_l380_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 0 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 381
fn c39_l381_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c39_l381_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4 as i32, 0 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 382
fn c40_l382_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c40_l382_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 1 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 383
fn c41_l383_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c41_l383_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-then") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4 as i32, 1 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 384
fn c42_l384_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c42_l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 0 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 385
fn c43_l385_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c43_l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3 as i32, 0 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 386
fn c44_l386_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c44_l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, 1 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 387
fn c45_l387_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c45_l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-else") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i32, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(3 as i32, 1 as i32, &result_object.instance);
    assert_eq!(result, ());
}

// Line 389
fn c46_l389_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c46_l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 390
fn c47_l390_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c47_l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 391
fn c48_l391_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c48_l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-second") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 392
fn c49_l392_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c49_l392_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-second") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 393
fn c50_l393_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c50_l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 3 as i32);
}

// Line 395
fn c51_l395_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c51_l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 12 as i32);
}

// Line 396
fn c52_l396_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c52_l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 13 as i32);
}

// Line 397
fn c53_l397_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c53_l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 14 as i32);
}

// Line 399
fn c54_l399_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c54_l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-func") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 4 as i32);
}

// Line 400
fn c55_l400_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c55_l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 4 as i32);
}

// Line 401
fn c56_l401_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c56_l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 4 as i32);
}

// Line 402
fn c57_l402_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c57_l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-call_indirect-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 4 as i32);
}

// Line 404
fn c58_l404_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c58_l404_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, -1 as i32);
}

// Line 405
fn c59_l405_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c59_l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 17 as i32);
}

// Line 407
fn c60_l407_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c60_l407_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-tee_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, -1 as i32);
}

// Line 408
fn c61_l408_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c61_l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-tee_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 410
fn c62_l410_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c62_l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_global-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, -1 as i32);
}

// Line 411
fn c63_l411_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c63_l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_global-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 413
fn c64_l413_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c64_l413_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-unary-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 414
fn c65_l414_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c65_l414_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-binary-left") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 415
fn c66_l415_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c66_l415_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-binary-right") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 416
fn c67_l416_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c67_l416_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-memory.grow-size") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 418
fn c68_l418_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c68_l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-block-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 21 as i32);
}

// Line 419
fn c69_l419_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c69_l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-block-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 420
fn c70_l420_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c70_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 5 as i32);
}

// Line 421
fn c71_l421_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c71_l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 422
fn c72_l422_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c72_l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_if-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 5 as i32);
}

// Line 423
fn c73_l423_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c73_l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_if-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 424
fn c74_l424_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c74_l424_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 5 as i32);
}

// Line 425
fn c75_l425_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c75_l425_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_if-value-cond") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 426
fn c76_l426_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c76_l426_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_table-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 5 as i32);
}

// Line 427
fn c77_l427_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c77_l427_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_table-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 428
fn c78_l428_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c78_l428_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_table-value-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 5 as i32);
}

// Line 429
fn c79_l429_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c79_l429_action_invoke");
    let func_index = match result_object.module.info.exports.get("nested-br_table-value-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 432
#[test]
fn c80_l432_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 104, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 436
#[test]
fn c81_l436_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 122, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 440
#[test]
fn c82_l440_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 140, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 444
#[test]
fn c83_l444_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 0, 13, 0, 154, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 449
#[test]
fn c84_l449_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 65, 1, 13, 0, 104, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 453
#[test]
fn c85_l453_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 66, 1, 13, 0, 122, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 457
#[test]
fn c86_l457_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 15, 1, 13, 0, 2, 64, 67, 0, 0, 128, 63, 13, 0, 140, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 461
#[test]
fn c87_l461_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 2, 64, 66, 1, 13, 0, 154, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 466
#[test]
fn c88_l466_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 127, 65, 0, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 472
#[test]
fn c89_l472_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 127, 65, 1, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 478
#[test]
fn c90_l478_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 64, 65, 0, 65, 0, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 484
#[test]
fn c91_l484_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 13, 1, 11, 0, 2, 64, 65, 0, 65, 1, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 491
#[test]
fn c92_l491_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 127, 1, 65, 0, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 497
#[test]
fn c93_l497_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 127, 1, 65, 1, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 503
#[test]
fn c94_l503_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 2, 127, 66, 1, 65, 0, 13, 0, 26, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 511
#[test]
fn c95_l511_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 2, 127, 66, 1, 65, 0, 13, 0, 26, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 520
#[test]
fn c96_l520_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 10, 1, 8, 0, 2, 64, 1, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 526
#[test]
fn c97_l526_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 11, 1, 9, 0, 2, 64, 66, 0, 13, 0, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 532
#[test]
fn c98_l532_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 127, 65, 0, 1, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 538
#[test]
fn c99_l538_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 16, 1, 14, 0, 2, 127, 65, 0, 2, 64, 65, 1, 13, 1, 11, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 544
#[test]
fn c100_l544_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 127, 3, 2, 1, 0, 10, 15, 1, 13, 0, 2, 127, 65, 0, 66, 0, 13, 0, 65, 1, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 551
#[test]
fn c101_l551_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 8, 1, 6, 0, 65, 1, 13, 1, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 555
#[test]
fn c102_l555_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 14, 1, 12, 0, 2, 64, 2, 64, 65, 1, 13, 5, 11, 11, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 559
#[test]
fn c103_l559_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 12, 1, 10, 0, 65, 1, 13, 129, 128, 128, 128, 1, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    start_module_1(&result_object);
    c1_l334_action_invoke(&result_object);
    c2_l335_action_invoke(&result_object);
    c3_l336_action_invoke(&result_object);
    c4_l337_action_invoke(&result_object);
    c5_l339_action_invoke(&result_object);
    c6_l340_action_invoke(&result_object);
    c7_l341_action_invoke(&result_object);
    c8_l342_action_invoke(&result_object);
    c9_l344_action_invoke(&result_object);
    c10_l345_action_invoke(&result_object);
    c11_l346_action_invoke(&result_object);
    c12_l347_action_invoke(&result_object);
    c13_l348_action_invoke(&result_object);
    c14_l349_action_invoke(&result_object);
    c15_l351_action_invoke(&result_object);
    c16_l352_action_invoke(&result_object);
    c17_l353_action_invoke(&result_object);
    c18_l354_action_invoke(&result_object);
    c19_l355_action_invoke(&result_object);
    c20_l356_action_invoke(&result_object);
    c21_l358_action_invoke(&result_object);
    c22_l359_action_invoke(&result_object);
    c23_l360_action_invoke(&result_object);
    c24_l361_action_invoke(&result_object);
    c25_l362_action_invoke(&result_object);
    c26_l363_action_invoke(&result_object);
    c27_l365_action_invoke(&result_object);
    c28_l367_action_invoke(&result_object);
    c29_l368_action_invoke(&result_object);
    c30_l369_action_invoke(&result_object);
    c31_l370_action_invoke(&result_object);
    c32_l372_action_invoke(&result_object);
    c33_l373_action_invoke(&result_object);
    c34_l374_action_invoke(&result_object);
    c35_l376_action_invoke(&result_object);
    c36_l378_action_invoke(&result_object);
    c37_l379_action_invoke(&result_object);
    c38_l380_action_invoke(&result_object);
    c39_l381_action_invoke(&result_object);
    c40_l382_action_invoke(&result_object);
    c41_l383_action_invoke(&result_object);
    c42_l384_action_invoke(&result_object);
    c43_l385_action_invoke(&result_object);
    c44_l386_action_invoke(&result_object);
    c45_l387_action_invoke(&result_object);
    c46_l389_action_invoke(&result_object);
    c47_l390_action_invoke(&result_object);
    c48_l391_action_invoke(&result_object);
    c49_l392_action_invoke(&result_object);
    c50_l393_action_invoke(&result_object);
    c51_l395_action_invoke(&result_object);
    c52_l396_action_invoke(&result_object);
    c53_l397_action_invoke(&result_object);
    c54_l399_action_invoke(&result_object);
    c55_l400_action_invoke(&result_object);
    c56_l401_action_invoke(&result_object);
    c57_l402_action_invoke(&result_object);
    c58_l404_action_invoke(&result_object);
    c59_l405_action_invoke(&result_object);
    c60_l407_action_invoke(&result_object);
    c61_l408_action_invoke(&result_object);
    c62_l410_action_invoke(&result_object);
    c63_l411_action_invoke(&result_object);
    c64_l413_action_invoke(&result_object);
    c65_l414_action_invoke(&result_object);
    c66_l415_action_invoke(&result_object);
    c67_l416_action_invoke(&result_object);
    c68_l418_action_invoke(&result_object);
    c69_l419_action_invoke(&result_object);
    c70_l420_action_invoke(&result_object);
    c71_l421_action_invoke(&result_object);
    c72_l422_action_invoke(&result_object);
    c73_l423_action_invoke(&result_object);
    c74_l424_action_invoke(&result_object);
    c75_l425_action_invoke(&result_object);
    c76_l426_action_invoke(&result_object);
    c77_l427_action_invoke(&result_object);
    c78_l428_action_invoke(&result_object);
    c79_l429_action_invoke(&result_object);
}
