// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/call_indirect.wast
#![allow(
    warnings,
    dead_code
)]
use wabt::wat2wasm;

use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, Instance, Export};
use super::_common::{
    spectest_importobject,
    NaNCheck,
};


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func))
      (type (;1;) (func (result i32)))
      (type (;2;) (func (result i64)))
      (type (;3;) (func (result f32)))
      (type (;4;) (func (result f64)))
      (type (;5;) (func (param i32) (result i32)))
      (type (;6;) (func (param i64) (result i64)))
      (type (;7;) (func (param f32) (result f32)))
      (type (;8;) (func (param f64) (result f64)))
      (type (;9;) (func (param f32 i32) (result i32)))
      (type (;10;) (func (param i32 i64) (result i64)))
      (type (;11;) (func (param f64 f32) (result f32)))
      (type (;12;) (func (param i64 f64) (result f64)))
      (type (;13;) (func (param i32) (result i32)))
      (type (;14;) (func (param i64) (result i64)))
      (type (;15;) (func (param f32) (result f32)))
      (type (;16;) (func (param f64) (result f64)))
      (type (;17;) (func (param i64)))
      (type (;18;) (func (param i64 f64 i32 i64)))
      (type (;19;) (func (param i64) (result i32)))
      (type (;20;) (func (param i64 f64 i32 i64) (result i32)))
      (type (;21;) (func (param i32) (result i64)))
      (type (;22;) (func (param i32) (result f32)))
      (type (;23;) (func (param i32) (result f64)))
      (func (;0;) (type 1) (result i32)
        i32.const 306)
      (func (;1;) (type 2) (result i64)
        i64.const 356)
      (func (;2;) (type 3) (result f32)
        f32.const 0x1.e64p+11 (;=3890;))
      (func (;3;) (type 4) (result f64)
        f64.const 0x1.ec8p+11 (;=3940;))
      (func (;4;) (type 5) (param i32) (result i32)
        get_local 0)
      (func (;5;) (type 6) (param i64) (result i64)
        get_local 0)
      (func (;6;) (type 7) (param f32) (result f32)
        get_local 0)
      (func (;7;) (type 8) (param f64) (result f64)
        get_local 0)
      (func (;8;) (type 10) (param i32 i64) (result i64)
        get_local 1)
      (func (;9;) (type 12) (param i64 f64) (result f64)
        get_local 1)
      (func (;10;) (type 9) (param f32 i32) (result i32)
        get_local 1)
      (func (;11;) (type 11) (param f64 f32) (result f32)
        get_local 1)
      (func (;12;) (type 13) (param i32) (result i32)
        get_local 0)
      (func (;13;) (type 14) (param i64) (result i64)
        get_local 0)
      (func (;14;) (type 15) (param f32) (result f32)
        get_local 0)
      (func (;15;) (type 16) (param f64) (result f64)
        get_local 0)
      (func (;16;) (type 0)
        i32.const 0
        call_indirect (type 0)
        i64.const 0
        i32.const 0
        call_indirect (type 17)
        i64.const 0
        f64.const 0x0p+0 (;=0;)
        i32.const 0
        i64.const 0
        i32.const 0
        call_indirect (type 18)
        i32.const 0
        call_indirect (type 0)
        i32.const 0
        call_indirect (type 1)
        i32.eqz
        drop
        i32.const 0
        call_indirect (type 1)
        i32.eqz
        drop
        i64.const 0
        i32.const 0
        call_indirect (type 19)
        i32.eqz
        drop
        i64.const 0
        f64.const 0x0p+0 (;=0;)
        i32.const 0
        i64.const 0
        i32.const 0
        call_indirect (type 20)
        i32.eqz
        drop
        i64.const 0
        i32.const 0
        call_indirect (type 6)
        i64.eqz
        drop)
      (func (;17;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1))
      (func (;18;) (type 2) (result i64)
        i32.const 1
        call_indirect (type 2))
      (func (;19;) (type 3) (result f32)
        i32.const 2
        call_indirect (type 3))
      (func (;20;) (type 4) (result f64)
        i32.const 3
        call_indirect (type 4))
      (func (;21;) (type 2) (result i64)
        i64.const 100
        i32.const 5
        call_indirect (type 6))
      (func (;22;) (type 1) (result i32)
        i32.const 32
        i32.const 4
        call_indirect (type 5))
      (func (;23;) (type 2) (result i64)
        i64.const 64
        i32.const 5
        call_indirect (type 6))
      (func (;24;) (type 3) (result f32)
        f32.const 0x1.51eb86p+0 (;=1.32;)
        i32.const 6
        call_indirect (type 7))
      (func (;25;) (type 4) (result f64)
        f64.const 0x1.a3d70a3d70a3dp+0 (;=1.64;)
        i32.const 7
        call_indirect (type 8))
      (func (;26;) (type 1) (result i32)
        f32.const 0x1.00ccccp+5 (;=32.1;)
        i32.const 32
        i32.const 8
        call_indirect (type 9))
      (func (;27;) (type 2) (result i64)
        i32.const 32
        i64.const 64
        i32.const 9
        call_indirect (type 10))
      (func (;28;) (type 3) (result f32)
        f64.const 0x1p+6 (;=64;)
        f32.const 0x1p+5 (;=32;)
        i32.const 10
        call_indirect (type 11))
      (func (;29;) (type 4) (result f64)
        i64.const 64
        f64.const 0x1.0066666666666p+6 (;=64.1;)
        i32.const 11
        call_indirect (type 12))
      (func (;30;) (type 10) (param i32 i64) (result i64)
        get_local 1
        get_local 0
        call_indirect (type 6))
      (func (;31;) (type 21) (param i32) (result i64)
        i64.const 9
        get_local 0
        call_indirect (type 14))
      (func (;32;) (type 5) (param i32) (result i32)
        i32.const 9
        get_local 0
        call_indirect (type 13))
      (func (;33;) (type 22) (param i32) (result f32)
        f32.const 0x1.2p+3 (;=9;)
        get_local 0
        call_indirect (type 15))
      (func (;34;) (type 23) (param i32) (result f64)
        f64.const 0x1.2p+3 (;=9;)
        get_local 0
        call_indirect (type 16))
      (func (;35;) (type 6) (param i64) (result i64)
        get_local 0
        i64.eqz
        if (result i64)  ;; label = @1
          i64.const 1
        else
          get_local 0
          get_local 0
          i64.const 1
          i64.sub
          i32.const 12
          call_indirect (type 6)
          i64.mul
        end)
      (func (;36;) (type 6) (param i64) (result i64)
        get_local 0
        i64.const 1
        i64.le_u
        if (result i64)  ;; label = @1
          i64.const 1
        else
          get_local 0
          i64.const 2
          i64.sub
          i32.const 13
          call_indirect (type 6)
          get_local 0
          i64.const 1
          i64.sub
          i32.const 13
          call_indirect (type 6)
          i64.add
        end)
      (func (;37;) (type 5) (param i32) (result i32)
        get_local 0
        i32.eqz
        if (result i32)  ;; label = @1
          i32.const 1
        else
          get_local 0
          get_local 0
          i32.const 1
          i32.sub
          i32.const 23
          call_indirect (type 5)
          i32.mul
        end)
      (func (;38;) (type 7) (param f32) (result f32)
        get_local 0
        f32.const 0x0p+0 (;=0;)
        f32.eq
        if (result f32)  ;; label = @1
          f32.const 0x1p+0 (;=1;)
        else
          get_local 0
          get_local 0
          f32.const 0x1p+0 (;=1;)
          f32.sub
          i32.const 24
          call_indirect (type 7)
          f32.mul
        end)
      (func (;39;) (type 8) (param f64) (result f64)
        get_local 0
        f64.const 0x0p+0 (;=0;)
        f64.eq
        if (result f64)  ;; label = @1
          f64.const 0x1p+0 (;=1;)
        else
          get_local 0
          get_local 0
          f64.const 0x1p+0 (;=1;)
          f64.sub
          i32.const 25
          call_indirect (type 8)
          f64.mul
        end)
      (func (;40;) (type 5) (param i32) (result i32)
        get_local 0
        i32.const 1
        i32.le_u
        if (result i32)  ;; label = @1
          i32.const 1
        else
          get_local 0
          i32.const 2
          i32.sub
          i32.const 26
          call_indirect (type 5)
          get_local 0
          i32.const 1
          i32.sub
          i32.const 26
          call_indirect (type 5)
          i32.add
        end)
      (func (;41;) (type 7) (param f32) (result f32)
        get_local 0
        f32.const 0x1p+0 (;=1;)
        f32.le
        if (result f32)  ;; label = @1
          f32.const 0x1p+0 (;=1;)
        else
          get_local 0
          f32.const 0x1p+1 (;=2;)
          f32.sub
          i32.const 27
          call_indirect (type 7)
          get_local 0
          f32.const 0x1p+0 (;=1;)
          f32.sub
          i32.const 27
          call_indirect (type 7)
          f32.add
        end)
      (func (;42;) (type 8) (param f64) (result f64)
        get_local 0
        f64.const 0x1p+0 (;=1;)
        f64.le
        if (result f64)  ;; label = @1
          f64.const 0x1p+0 (;=1;)
        else
          get_local 0
          f64.const 0x1p+1 (;=2;)
          f64.sub
          i32.const 28
          call_indirect (type 8)
          get_local 0
          f64.const 0x1p+0 (;=1;)
          f64.sub
          i32.const 28
          call_indirect (type 8)
          f64.add
        end)
      (func (;43;) (type 5) (param i32) (result i32)
        get_local 0
        i32.eqz
        if (result i32)  ;; label = @1
          i32.const 44
        else
          get_local 0
          i32.const 1
          i32.sub
          i32.const 15
          call_indirect (type 5)
        end)
      (func (;44;) (type 5) (param i32) (result i32)
        get_local 0
        i32.eqz
        if (result i32)  ;; label = @1
          i32.const 99
        else
          get_local 0
          i32.const 1
          i32.sub
          i32.const 14
          call_indirect (type 5)
        end)
      (func (;45;) (type 0)
        i32.const 16
        call_indirect (type 0))
      (func (;46;) (type 0)
        i32.const 18
        call_indirect (type 0))
      (func (;47;) (type 0)
        i32.const 17
        call_indirect (type 0))
      (func (;48;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        i32.const 2
        i32.const 3
        select)
      (func (;49;) (type 1) (result i32)
        i32.const 2
        i32.const 0
        call_indirect (type 1)
        i32.const 3
        select)
      (func (;50;) (type 1) (result i32)
        i32.const 2
        i32.const 3
        i32.const 0
        call_indirect (type 1)
        select)
      (func (;51;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        if (result i32)  ;; label = @1
          i32.const 1
        else
          i32.const 2
        end)
      (func (;52;) (type 2) (result i64)
        block (result i64)  ;; label = @1
          i32.const 1
          call_indirect (type 2)
          i32.const 2
          br_if 0 (;@1;)
        end)
      (func (;53;) (type 1) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 0
          call_indirect (type 1)
          br_if 0 (;@1;)
        end)
      (func (;54;) (type 3) (result f32)
        block (result f32)  ;; label = @1
          i32.const 2
          call_indirect (type 3)
          i32.const 2
          br_table 0 (;@1;) 0 (;@1;)
        end)
      (func (;55;) (type 1) (result i32)
        block (result i32)  ;; label = @1
          i32.const 2
          i32.const 0
          call_indirect (type 1)
          br_table 0 (;@1;) 0 (;@1;)
        end)
      (func (;56;) (type 0)
        i32.const 0
        call_indirect (type 1)
        i32.const 1
        i32.store)
      (func (;57;) (type 0)
        i32.const 10
        i32.const 3
        call_indirect (type 4)
        f64.store)
      (func (;58;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        memory.grow)
      (func (;59;) (type 1) (result i32)
        i32.const 1
        i32.const 4
        call_indirect (type 5)
        return)
      (func (;60;) (type 0)
        i64.const 1
        i32.const 5
        call_indirect (type 6)
        drop)
      (func (;61;) (type 3) (result f32)
        block (result f32)  ;; label = @1
          f32.const 0x1p+0 (;=1;)
          i32.const 6
          call_indirect (type 7)
          br 0 (;@1;)
        end)
      (func (;62;) (type 4) (result f64)
        (local f64)
        f64.const 0x1p+0 (;=1;)
        i32.const 7
        call_indirect (type 8)
        set_local 0
        get_local 0)
      (func (;63;) (type 4) (result f64)
        (local f64)
        f64.const 0x1p+0 (;=1;)
        i32.const 7
        call_indirect (type 8)
        tee_local 0)
      (func (;64;) (type 4) (result f64)
        f64.const 0x1p+0 (;=1;)
        i32.const 7
        call_indirect (type 8)
        set_global 0
        get_global 0)
      (func (;65;) (type 1) (result i32)
        i32.const 0
        call_indirect (type 1)
        i32.load)
      (table (;0;) 29 29 anyfunc)
      (memory (;0;) 1)
      (global (;0;) (mut f64) (f64.const 0x1.4p+3 (;=10;)))
      (export \"type-i32\" (func 17))
      (export \"type-i64\" (func 18))
      (export \"type-f32\" (func 19))
      (export \"type-f64\" (func 20))
      (export \"type-index\" (func 21))
      (export \"type-first-i32\" (func 22))
      (export \"type-first-i64\" (func 23))
      (export \"type-first-f32\" (func 24))
      (export \"type-first-f64\" (func 25))
      (export \"type-second-i32\" (func 26))
      (export \"type-second-i64\" (func 27))
      (export \"type-second-f32\" (func 28))
      (export \"type-second-f64\" (func 29))
      (export \"dispatch\" (func 30))
      (export \"dispatch-structural-i64\" (func 31))
      (export \"dispatch-structural-i32\" (func 32))
      (export \"dispatch-structural-f32\" (func 33))
      (export \"dispatch-structural-f64\" (func 34))
      (export \"fac-i64\" (func 35))
      (export \"fib-i64\" (func 36))
      (export \"fac-i32\" (func 37))
      (export \"fac-f32\" (func 38))
      (export \"fac-f64\" (func 39))
      (export \"fib-i32\" (func 40))
      (export \"fib-f32\" (func 41))
      (export \"fib-f64\" (func 42))
      (export \"even\" (func 43))
      (export \"odd\" (func 44))
      (export \"runaway\" (func 45))
      (export \"mutual-runaway\" (func 46))
      (export \"as-select-first\" (func 48))
      (export \"as-select-mid\" (func 49))
      (export \"as-select-last\" (func 50))
      (export \"as-if-condition\" (func 51))
      (export \"as-br_if-first\" (func 52))
      (export \"as-br_if-last\" (func 53))
      (export \"as-br_table-first\" (func 54))
      (export \"as-br_table-last\" (func 55))
      (export \"as-store-first\" (func 56))
      (export \"as-store-last\" (func 57))
      (export \"as-memory.grow-value\" (func 58))
      (export \"as-return-value\" (func 59))
      (export \"as-drop-operand\" (func 60))
      (export \"as-br-value\" (func 61))
      (export \"as-set_local-value\" (func 62))
      (export \"as-tee_local-value\" (func 63))
      (export \"as-set_global-value\" (func 64))
      (export \"as-load-operand\" (func 65))
      (elem (;0;) (i32.const 0) 0 1 2 3 4 5 6 7 10 8 11 9 35 36 43 44 45 46 47 12 13 14 15 37 38 39 40 41 42))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

fn start_module_1(result_object: &ResultObject) {
    result_object.instance.start();
}

// Line 388
fn c1_l388_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1_l388_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 306 as i32);
}

// Line 389
fn c2_l389_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2_l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 356 as i64);
}

// Line 390
fn c3_l390_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c3_l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 3890.0 as f32);
}

// Line 391
fn c4_l391_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c4_l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 3940.0 as f64);
}

// Line 393
fn c5_l393_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c5_l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-index") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 100 as i64);
}

// Line 395
fn c6_l395_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c6_l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-first-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 32 as i32);
}

// Line 396
fn c7_l396_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c7_l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-first-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 64 as i64);
}

// Line 397
fn c8_l397_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c8_l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-first-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.32 as f32);
}

// Line 398
fn c9_l398_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c9_l398_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-first-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.64 as f64);
}

// Line 400
fn c10_l400_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c10_l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-second-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 32 as i32);
}

// Line 401
fn c11_l401_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c11_l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-second-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 64 as i64);
}

// Line 402
fn c12_l402_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c12_l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-second-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 32.0 as f32);
}

// Line 403
fn c13_l403_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c13_l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("type-second-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 64.1 as f64);
}

// Line 405
fn c14_l405_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c14_l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, 2 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 406
fn c15_l406_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c15_l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, 5 as i64, &result_object.instance);
    assert_eq!(result, 5 as i64);
}

// Line 407
fn c16_l407_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c16_l407_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(12 as i32, 5 as i64, &result_object.instance);
    assert_eq!(result, 120 as i64);
}

// Line 408
fn c17_l408_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c17_l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(13 as i32, 5 as i64, &result_object.instance);
    assert_eq!(result, 8 as i64);
}

// Line 409
fn c18_l409_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c18_l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(20 as i32, 2 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 420
fn c19_l420_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c19_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, &result_object.instance);
    assert_eq!(result, 9 as i64);
}

// Line 421
fn c20_l421_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c20_l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(12 as i32, &result_object.instance);
    assert_eq!(result, 362880 as i64);
}

// Line 422
fn c21_l422_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c21_l422_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(13 as i32, &result_object.instance);
    assert_eq!(result, 55 as i64);
}

// Line 423
fn c22_l423_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c22_l423_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(20 as i32, &result_object.instance);
    assert_eq!(result, 9 as i64);
}

// Line 429
fn c23_l429_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c23_l429_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 430
fn c24_l430_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c24_l430_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(23 as i32, &result_object.instance);
    assert_eq!(result, 362880 as i32);
}

// Line 431
fn c25_l431_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c25_l431_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(26 as i32, &result_object.instance);
    assert_eq!(result, 55 as i32);
}

// Line 432
fn c26_l432_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c26_l432_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(19 as i32, &result_object.instance);
    assert_eq!(result, 9 as i32);
}

// Line 438
fn c27_l438_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c27_l438_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(6 as i32, &result_object.instance);
    assert_eq!(result, 9.0 as f32);
}

// Line 439
fn c28_l439_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c28_l439_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(24 as i32, &result_object.instance);
    assert_eq!(result, 362880.0 as f32);
}

// Line 440
fn c29_l440_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c29_l440_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(27 as i32, &result_object.instance);
    assert_eq!(result, 55.0 as f32);
}

// Line 441
fn c30_l441_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c30_l441_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(21 as i32, &result_object.instance);
    assert_eq!(result, 9.0 as f32);
}

// Line 447
fn c31_l447_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c31_l447_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i32, &result_object.instance);
    assert_eq!(result, 9.0 as f64);
}

// Line 448
fn c32_l448_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c32_l448_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(25 as i32, &result_object.instance);
    assert_eq!(result, 362880.0 as f64);
}

// Line 449
fn c33_l449_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c33_l449_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(28 as i32, &result_object.instance);
    assert_eq!(result, 55.0 as f64);
}

// Line 450
fn c34_l450_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c34_l450_action_invoke");
    let func_index = match result_object.module.info.exports.get("dispatch-structural-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(22 as i32, &result_object.instance);
    assert_eq!(result, 9.0 as f64);
}

// Line 456
fn c35_l456_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c35_l456_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 457
fn c36_l457_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c36_l457_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 458
fn c37_l458_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c37_l458_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, &result_object.instance);
    assert_eq!(result, 120 as i64);
}

// Line 459
fn c38_l459_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c38_l459_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(25 as i64, &result_object.instance);
    assert_eq!(result, 7034535277573963776 as i64);
}

// Line 461
fn c39_l461_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c39_l461_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 462
fn c40_l462_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c40_l462_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 463
fn c41_l463_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c41_l463_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, &result_object.instance);
    assert_eq!(result, 120 as i32);
}

// Line 464
fn c42_l464_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c42_l464_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10 as i32, &result_object.instance);
    assert_eq!(result, 3628800 as i32);
}

// Line 466
fn c43_l466_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c43_l466_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 467
fn c44_l467_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c44_l467_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 468
fn c45_l468_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c45_l468_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5.0 as f32, &result_object.instance);
    assert_eq!(result, 120.0 as f32);
}

// Line 469
fn c46_l469_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c46_l469_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10.0 as f32, &result_object.instance);
    assert_eq!(result, 3628800.0 as f32);
}

// Line 471
fn c47_l471_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c47_l471_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 472
fn c48_l472_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c48_l472_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 473
fn c49_l473_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c49_l473_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5.0 as f64, &result_object.instance);
    assert_eq!(result, 120.0 as f64);
}

// Line 474
fn c50_l474_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c50_l474_action_invoke");
    let func_index = match result_object.module.info.exports.get("fac-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(10.0 as f64, &result_object.instance);
    assert_eq!(result, 3628800.0 as f64);
}

// Line 476
fn c51_l476_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c51_l476_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 477
fn c52_l477_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c52_l477_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 478
fn c53_l478_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c53_l478_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 479
fn c54_l479_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c54_l479_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, &result_object.instance);
    assert_eq!(result, 8 as i64);
}

// Line 480
fn c55_l480_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c55_l480_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(20 as i64, &result_object.instance);
    assert_eq!(result, 10946 as i64);
}

// Line 482
fn c56_l482_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c56_l482_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 483
fn c57_l483_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c57_l483_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 484
fn c58_l484_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c58_l484_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2 as i32, &result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 485
fn c59_l485_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c59_l485_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i32, &result_object.instance);
    assert_eq!(result, 8 as i32);
}

// Line 486
fn c60_l486_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c60_l486_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-i32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(20 as i32, &result_object.instance);
    assert_eq!(result, 10946 as i32);
}

// Line 488
fn c61_l488_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c61_l488_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 489
fn c62_l489_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c62_l489_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f32, &result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 490
fn c63_l490_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c63_l490_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f32, &result_object.instance);
    assert_eq!(result, 2.0 as f32);
}

// Line 491
fn c64_l491_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c64_l491_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5.0 as f32, &result_object.instance);
    assert_eq!(result, 8.0 as f32);
}

// Line 492
fn c65_l492_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c65_l492_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f32, &Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(20.0 as f32, &result_object.instance);
    assert_eq!(result, 10946.0 as f32);
}

// Line 494
fn c66_l494_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c66_l494_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0.0 as f64, &result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 495
fn c67_l495_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c67_l495_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1.0 as f64, &result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 496
fn c68_l496_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c68_l496_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2.0 as f64, &result_object.instance);
    assert_eq!(result, 2.0 as f64);
}

// Line 497
fn c69_l497_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c69_l497_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5.0 as f64, &result_object.instance);
    assert_eq!(result, 8.0 as f64);
}

// Line 498
fn c70_l498_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c70_l498_action_invoke");
    let func_index = match result_object.module.info.exports.get("fib-f64") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(f64, &Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(20.0 as f64, &result_object.instance);
    assert_eq!(result, 10946.0 as f64);
}

// Line 500
fn c71_l500_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c71_l500_action_invoke");
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 44 as i32);
}

// Line 501
fn c72_l501_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c72_l501_action_invoke");
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 99 as i32);
}

// Line 502
fn c73_l502_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c73_l502_action_invoke");
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(100 as i32, &result_object.instance);
    assert_eq!(result, 44 as i32);
}

// Line 503
fn c74_l503_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c74_l503_action_invoke");
    let func_index = match result_object.module.info.exports.get("even") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(77 as i32, &result_object.instance);
    assert_eq!(result, 99 as i32);
}

// Line 504
fn c75_l504_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c75_l504_action_invoke");
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i32, &result_object.instance);
    assert_eq!(result, 99 as i32);
}

// Line 505
fn c76_l505_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c76_l505_action_invoke");
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i32, &result_object.instance);
    assert_eq!(result, 44 as i32);
}

// Line 506
fn c77_l506_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c77_l506_action_invoke");
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(200 as i32, &result_object.instance);
    assert_eq!(result, 99 as i32);
}

// Line 507
fn c78_l507_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c78_l507_action_invoke");
    let func_index = match result_object.module.info.exports.get("odd") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i32, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(77 as i32, &result_object.instance);
    assert_eq!(result, 44 as i32);
}

// Line 509

// Line 510

// Line 512
fn c81_l512_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c81_l512_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 306 as i32);
}

// Line 513
fn c82_l513_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c82_l513_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-mid") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 514
fn c83_l514_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c83_l514_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-select-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 516
fn c84_l516_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c84_l516_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-if-condition") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 518
fn c85_l518_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c85_l518_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 356 as i64);
}

// Line 519
fn c86_l519_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c86_l519_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_if-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 521
fn c87_l521_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c87_l521_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 3890.0 as f32);
}

// Line 522
fn c88_l522_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c88_l522_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br_table-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 2 as i32);
}

// Line 524
fn c89_l524_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c89_l524_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-store-first") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 525
fn c90_l525_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c90_l525_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-store-last") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 527
fn c91_l527_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c91_l527_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-memory.grow-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 528
fn c92_l528_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c92_l528_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-return-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 529
fn c93_l529_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c93_l529_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-drop-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, ());
}

// Line 530
fn c94_l530_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c94_l530_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-br-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.0 as f32);
}

// Line 531
fn c95_l531_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c95_l531_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 532
fn c96_l532_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c96_l532_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-tee_local-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 533
fn c97_l533_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c97_l533_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-set_global-value") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> f64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1.0 as f64);
}

// Line 534
fn c98_l534_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c98_l534_action_invoke");
    let func_index = match result_object.module.info.exports.get("as-load-operand") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 539
#[test]
fn c99_l539_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 551
#[test]
fn c100_l551_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 563
#[test]
fn c101_l563_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 575
#[test]
fn c102_l575_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 587
#[test]
fn c103_l587_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 599
#[test]
fn c104_l599_assert_malformed() {
    let wasm_binary = [40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 609
#[test]
fn c105_l609_assert_malformed() {
    let wasm_binary = [40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 112, 97, 114, 97, 109, 32, 36, 120, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 616
#[test]
fn c106_l616_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 626
#[test]
fn c107_l626_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 636
#[test]
fn c108_l636_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 646
#[test]
fn c109_l646_assert_malformed() {
    let wasm_binary = [40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 32, 40, 102, 117, 110, 99, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 41, 41, 40, 116, 97, 98, 108, 101, 32, 48, 32, 97, 110, 121, 102, 117, 110, 99, 41, 40, 102, 117, 110, 99, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 40, 99, 97, 108, 108, 95, 105, 110, 100, 105, 114, 101, 99, 116, 32, 40, 116, 121, 112, 101, 32, 36, 115, 105, 103, 41, 32, 40, 112, 97, 114, 97, 109, 32, 105, 51, 50, 41, 32, 40, 114, 101, 115, 117, 108, 116, 32, 105, 51, 50, 41, 32, 32, 32, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 40, 105, 51, 50, 46, 99, 111, 110, 115, 116, 32, 48, 41, 32, 32, 41, 41];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is malformed");
}

// Line 661
#[test]
fn c110_l661_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 669
#[test]
fn c111_l669_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 10, 1, 8, 0, 65, 0, 17, 0, 0, 69, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 677
#[test]
fn c112_l677_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 0, 1, 126, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 10, 1, 8, 0, 65, 0, 17, 0, 0, 69, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 686
#[test]
fn c113_l686_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 1, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 694
#[test]
fn c114_l694_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 124, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 702
#[test]
fn c115_l702_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 11, 1, 9, 0, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 710
#[test]
fn c116_l710_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 20, 1, 18, 0, 68, 0, 0, 0, 0, 0, 0, 0, 64, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 721
#[test]
fn c117_l721_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 1, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 10, 1, 8, 0, 65, 1, 1, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 729
#[test]
fn c118_l729_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 8, 2, 96, 1, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 11, 1, 9, 0, 65, 0, 66, 1, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 738
#[test]
fn c119_l738_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 12, 1, 10, 0, 1, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 748
#[test]
fn c120_l748_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 127, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 12, 1, 10, 0, 65, 1, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 758
#[test]
fn c121_l758_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 127, 124, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 20, 1, 18, 0, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 1, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 768
#[test]
fn c122_l768_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 9, 2, 96, 2, 124, 127, 0, 96, 0, 0, 3, 2, 1, 1, 4, 4, 1, 112, 0, 0, 10, 20, 1, 18, 0, 65, 1, 68, 0, 0, 0, 0, 0, 0, 240, 63, 65, 0, 17, 0, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 782
#[test]
fn c123_l782_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 9, 1, 7, 0, 65, 0, 17, 1, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 789
#[test]
fn c124_l789_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 4, 4, 1, 112, 0, 0, 10, 13, 1, 11, 0, 65, 0, 17, 148, 152, 219, 226, 3, 0, 11];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

// Line 800
#[test]
fn c125_l800_assert_invalid() {
    let wasm_binary = [0, 97, 115, 109, 1, 0, 0, 0, 4, 5, 1, 112, 1, 2, 2, 9, 8, 1, 0, 65, 0, 11, 2, 0, 0];
    let compilation = compile(wasm_binary.to_vec());
    assert!(compilation.is_err(), "WASM should not compile as is invalid");
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    start_module_1(&result_object);
    c1_l388_action_invoke(&result_object);
    c2_l389_action_invoke(&result_object);
    c3_l390_action_invoke(&result_object);
    c4_l391_action_invoke(&result_object);
    c5_l393_action_invoke(&result_object);
    c6_l395_action_invoke(&result_object);
    c7_l396_action_invoke(&result_object);
    c8_l397_action_invoke(&result_object);
    c9_l398_action_invoke(&result_object);
    c10_l400_action_invoke(&result_object);
    c11_l401_action_invoke(&result_object);
    c12_l402_action_invoke(&result_object);
    c13_l403_action_invoke(&result_object);
    c14_l405_action_invoke(&result_object);
    c15_l406_action_invoke(&result_object);
    c16_l407_action_invoke(&result_object);
    c17_l408_action_invoke(&result_object);
    c18_l409_action_invoke(&result_object);
    c19_l420_action_invoke(&result_object);
    c20_l421_action_invoke(&result_object);
    c21_l422_action_invoke(&result_object);
    c22_l423_action_invoke(&result_object);
    c23_l429_action_invoke(&result_object);
    c24_l430_action_invoke(&result_object);
    c25_l431_action_invoke(&result_object);
    c26_l432_action_invoke(&result_object);
    c27_l438_action_invoke(&result_object);
    c28_l439_action_invoke(&result_object);
    c29_l440_action_invoke(&result_object);
    c30_l441_action_invoke(&result_object);
    c31_l447_action_invoke(&result_object);
    c32_l448_action_invoke(&result_object);
    c33_l449_action_invoke(&result_object);
    c34_l450_action_invoke(&result_object);
    c35_l456_action_invoke(&result_object);
    c36_l457_action_invoke(&result_object);
    c37_l458_action_invoke(&result_object);
    c38_l459_action_invoke(&result_object);
    c39_l461_action_invoke(&result_object);
    c40_l462_action_invoke(&result_object);
    c41_l463_action_invoke(&result_object);
    c42_l464_action_invoke(&result_object);
    c43_l466_action_invoke(&result_object);
    c44_l467_action_invoke(&result_object);
    c45_l468_action_invoke(&result_object);
    c46_l469_action_invoke(&result_object);
    c47_l471_action_invoke(&result_object);
    c48_l472_action_invoke(&result_object);
    c49_l473_action_invoke(&result_object);
    c50_l474_action_invoke(&result_object);
    c51_l476_action_invoke(&result_object);
    c52_l477_action_invoke(&result_object);
    c53_l478_action_invoke(&result_object);
    c54_l479_action_invoke(&result_object);
    c55_l480_action_invoke(&result_object);
    c56_l482_action_invoke(&result_object);
    c57_l483_action_invoke(&result_object);
    c58_l484_action_invoke(&result_object);
    c59_l485_action_invoke(&result_object);
    c60_l486_action_invoke(&result_object);
    c61_l488_action_invoke(&result_object);
    c62_l489_action_invoke(&result_object);
    c63_l490_action_invoke(&result_object);
    c64_l491_action_invoke(&result_object);
    c65_l492_action_invoke(&result_object);
    c66_l494_action_invoke(&result_object);
    c67_l495_action_invoke(&result_object);
    c68_l496_action_invoke(&result_object);
    c69_l497_action_invoke(&result_object);
    c70_l498_action_invoke(&result_object);
    c71_l500_action_invoke(&result_object);
    c72_l501_action_invoke(&result_object);
    c73_l502_action_invoke(&result_object);
    c74_l503_action_invoke(&result_object);
    c75_l504_action_invoke(&result_object);
    c76_l505_action_invoke(&result_object);
    c77_l506_action_invoke(&result_object);
    c78_l507_action_invoke(&result_object);
    c81_l512_action_invoke(&result_object);
    c82_l513_action_invoke(&result_object);
    c83_l514_action_invoke(&result_object);
    c84_l516_action_invoke(&result_object);
    c85_l518_action_invoke(&result_object);
    c86_l519_action_invoke(&result_object);
    c87_l521_action_invoke(&result_object);
    c88_l522_action_invoke(&result_object);
    c89_l524_action_invoke(&result_object);
    c90_l525_action_invoke(&result_object);
    c91_l527_action_invoke(&result_object);
    c92_l528_action_invoke(&result_object);
    c93_l529_action_invoke(&result_object);
    c94_l530_action_invoke(&result_object);
    c95_l531_action_invoke(&result_object);
    c96_l532_action_invoke(&result_object);
    c97_l533_action_invoke(&result_object);
    c98_l534_action_invoke(&result_object);
}
