// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/i64_.wast
#![allow(
    warnings,
    dead_code
)]
use wabt::wat2wasm;

use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, Instance, Export};
use super::_common::{
    spectest_importobject,
    NaNCheck,
};


// Line 3
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i64 i64) (result i64)))
      (type (;1;) (func (param i64) (result i64)))
      (type (;2;) (func (param i64) (result i32)))
      (type (;3;) (func (param i64 i64) (result i32)))
      (func (;0;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.add)
      (func (;1;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.sub)
      (func (;2;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.mul)
      (func (;3;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.div_s)
      (func (;4;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.div_u)
      (func (;5;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rem_s)
      (func (;6;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rem_u)
      (func (;7;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.and)
      (func (;8;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.or)
      (func (;9;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.xor)
      (func (;10;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.shl)
      (func (;11;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.shr_s)
      (func (;12;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.shr_u)
      (func (;13;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rotl)
      (func (;14;) (type 0) (param i64 i64) (result i64)
        get_local 0
        get_local 1
        i64.rotr)
      (func (;15;) (type 1) (param i64) (result i64)
        get_local 0
        i64.clz)
      (func (;16;) (type 1) (param i64) (result i64)
        get_local 0
        i64.ctz)
      (func (;17;) (type 1) (param i64) (result i64)
        get_local 0
        i64.popcnt)
      (func (;18;) (type 2) (param i64) (result i32)
        get_local 0
        i64.eqz)
      (func (;19;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.eq)
      (func (;20;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.ne)
      (func (;21;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.lt_s)
      (func (;22;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.lt_u)
      (func (;23;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.le_s)
      (func (;24;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.le_u)
      (func (;25;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.gt_s)
      (func (;26;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.gt_u)
      (func (;27;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.ge_s)
      (func (;28;) (type 3) (param i64 i64) (result i32)
        get_local 0
        get_local 1
        i64.ge_u)
      (export \"add\" (func 0))
      (export \"sub\" (func 1))
      (export \"mul\" (func 2))
      (export \"div_s\" (func 3))
      (export \"div_u\" (func 4))
      (export \"rem_s\" (func 5))
      (export \"rem_u\" (func 6))
      (export \"and\" (func 7))
      (export \"or\" (func 8))
      (export \"xor\" (func 9))
      (export \"shl\" (func 10))
      (export \"shr_s\" (func 11))
      (export \"shr_u\" (func 12))
      (export \"rotl\" (func 13))
      (export \"rotr\" (func 14))
      (export \"clz\" (func 15))
      (export \"ctz\" (func 16))
      (export \"popcnt\" (func 17))
      (export \"eqz\" (func 18))
      (export \"eq\" (func 19))
      (export \"ne\" (func 20))
      (export \"lt_s\" (func 21))
      (export \"lt_u\" (func 22))
      (export \"le_s\" (func 23))
      (export \"le_u\" (func 24))
      (export \"gt_s\" (func 25))
      (export \"gt_u\" (func 26))
      (export \"ge_s\" (func 27))
      (export \"ge_u\" (func 28)))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

fn start_module_1(result_object: &ResultObject) {
    result_object.instance.start();
}

// Line 35
fn c1_l35_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1_l35_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 36
fn c2_l36_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2_l36_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 37
fn c3_l37_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c3_l37_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 38
fn c4_l38_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c4_l38_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 39
fn c5_l39_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c5_l39_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 40
fn c6_l40_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c6_l40_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 41
fn c7_l41_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c7_l41_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 42
fn c8_l42_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c8_l42_action_invoke");
    let func_index = match result_object.module.info.exports.get("add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1073741823 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1073741824 as i64);
}

// Line 44
fn c9_l44_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c9_l44_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 45
fn c10_l45_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c10_l45_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 46
fn c11_l46_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c11_l46_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 47
fn c12_l47_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c12_l47_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 48
fn c13_l48_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c13_l48_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 49
fn c14_l49_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c14_l49_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 50
fn c15_l50_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c15_l50_action_invoke");
    let func_index = match result_object.module.info.exports.get("sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1073741823 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1073741824 as i64);
}

// Line 52
fn c16_l52_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c16_l52_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 53
fn c17_l53_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c17_l53_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 54
fn c18_l54_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c18_l54_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 55
fn c19_l55_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c19_l55_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1152921504606846976 as i64, 4096 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 56
fn c20_l56_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c20_l56_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 57
fn c21_l57_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c21_l57_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 58
fn c22_l58_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c22_l58_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775807 as i64);
}

// Line 59
fn c23_l59_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c23_l59_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(81985529216486895 as i64, -81985529216486896 as i64, &result_object.instance);
    assert_eq!(result, 2465395958572223728 as i64);
}

// Line 60
fn c24_l60_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c24_l60_action_invoke");
    let func_index = match result_object.module.info.exports.get("mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 62
fn c25_l62_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c25_l62_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c25_l62_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c25_l62_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 63
fn c26_l63_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c26_l63_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c26_l63_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c26_l63_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 64
fn c27_l64_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c27_l64_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    
}

#[test]
fn c27_l64_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c27_l64_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 65
fn c28_l65_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c28_l65_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 66
fn c29_l66_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c29_l66_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 67
fn c30_l67_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c30_l67_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 68
fn c31_l68_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c31_l68_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 69
fn c32_l69_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c32_l69_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, -4611686018427387904 as i64);
}

// Line 70
fn c33_l70_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c33_l70_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775 as i64);
}

// Line 71
fn c34_l71_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c34_l71_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 72
fn c35_l72_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c35_l72_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 73
fn c36_l73_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c36_l73_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 74
fn c37_l74_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c37_l74_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 75
fn c38_l75_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c38_l75_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 76
fn c39_l76_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c39_l76_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, 3 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 77
fn c40_l77_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c40_l77_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, -3 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 78
fn c41_l78_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c41_l78_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, -3 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 79
fn c42_l79_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c42_l79_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 80
fn c43_l80_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c43_l80_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 82
fn c44_l82_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c44_l82_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c44_l82_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c44_l82_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 83
fn c45_l83_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c45_l83_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c45_l83_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c45_l83_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 84
fn c46_l84_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c46_l84_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 85
fn c47_l85_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c47_l85_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 86
fn c48_l86_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c48_l86_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 87
fn c49_l87_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c49_l87_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 88
fn c50_l88_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c50_l88_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 4611686018427387904 as i64);
}

// Line 89
fn c51_l89_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c51_l89_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8074936608141340688 as i64, 4294967297 as i64, &result_object.instance);
    assert_eq!(result, 2414874607 as i64);
}

// Line 90
fn c52_l90_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c52_l90_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775 as i64);
}

// Line 91
fn c53_l91_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c53_l91_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 92
fn c54_l92_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c54_l92_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775805 as i64);
}

// Line 93
fn c55_l93_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c55_l93_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 94
fn c56_l94_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c56_l94_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 95
fn c57_l95_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c57_l95_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 96
fn c58_l96_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c58_l96_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 97
fn c59_l97_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c59_l97_action_invoke");
    let func_index = match result_object.module.info.exports.get("div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 99
fn c60_l99_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c60_l99_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c60_l99_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c60_l99_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 100
fn c61_l100_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c61_l100_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c61_l100_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c61_l100_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 101
fn c62_l101_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c62_l101_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 102
fn c63_l102_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c63_l102_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 103
fn c64_l103_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c64_l103_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 104
fn c65_l104_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c65_l104_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 105
fn c66_l105_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c66_l105_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 106
fn c67_l106_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c67_l106_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 107
fn c68_l107_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c68_l107_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 108
fn c69_l108_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c69_l108_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &result_object.instance);
    assert_eq!(result, -807 as i64);
}

// Line 109
fn c70_l109_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c70_l109_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 110
fn c71_l110_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c71_l110_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 111
fn c72_l111_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c72_l111_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 112
fn c73_l112_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c73_l112_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 113
fn c74_l113_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c74_l113_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 114
fn c75_l114_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c75_l114_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, 3 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 115
fn c76_l115_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c76_l115_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, -3 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 116
fn c77_l116_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c77_l116_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7 as i64, -3 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 117
fn c78_l117_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c78_l117_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 118
fn c79_l118_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c79_l118_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &result_object.instance);
    assert_eq!(result, 3 as i64);
}

// Line 120
fn c80_l120_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c80_l120_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c80_l120_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c80_l120_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 121
fn c81_l121_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c81_l121_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    
}

#[test]
fn c81_l121_assert_trap() {
    let result_object = create_module_1();
    let result = call_protected!(c81_l121_action_invoke(&result_object));
    assert!(result.is_err());
}

// Line 122
fn c82_l122_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c82_l122_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 123
fn c83_l123_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c83_l123_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 124
fn c84_l124_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c84_l124_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 125
fn c85_l125_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c85_l125_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 126
fn c86_l126_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c86_l126_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 127
fn c87_l127_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c87_l127_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-8074936608141340688 as i64, 4294967297 as i64, &result_object.instance);
    assert_eq!(result, 2147483649 as i64);
}

// Line 128
fn c88_l128_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c88_l128_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775807 as i64, 1000 as i64, &result_object.instance);
    assert_eq!(result, 809 as i64);
}

// Line 129
fn c89_l129_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c89_l129_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 130
fn c90_l130_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c90_l130_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, 2 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 131
fn c91_l131_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c91_l131_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, 5 as i64);
}

// Line 132
fn c92_l132_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c92_l132_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-5 as i64, -2 as i64, &result_object.instance);
    assert_eq!(result, -5 as i64);
}

// Line 133
fn c93_l133_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c93_l133_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(7 as i64, 3 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 134
fn c94_l134_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c94_l134_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(11 as i64, 5 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 135
fn c95_l135_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c95_l135_action_invoke");
    let func_index = match result_object.module.info.exports.get("rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(17 as i64, 7 as i64, &result_object.instance);
    assert_eq!(result, 3 as i64);
}

// Line 137
fn c96_l137_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c96_l137_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 138
fn c97_l138_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c97_l138_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 139
fn c98_l139_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c98_l139_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 140
fn c99_l140_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c99_l140_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 141
fn c100_l141_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c100_l141_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 142
fn c101_l142_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c101_l142_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 143
fn c102_l143_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c102_l143_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4042326015 as i64, 4294963440 as i64, &result_object.instance);
    assert_eq!(result, 4042322160 as i64);
}

// Line 144
fn c103_l144_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c103_l144_action_invoke");
    let func_index = match result_object.module.info.exports.get("and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 146
fn c104_l146_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c104_l146_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 147
fn c105_l147_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c105_l147_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 148
fn c106_l148_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c106_l148_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 149
fn c107_l149_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c107_l149_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 150
fn c108_l150_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c108_l150_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 151
fn c109_l151_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c109_l151_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 152
fn c110_l152_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c110_l152_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4042326015 as i64, 4294963440 as i64, &result_object.instance);
    assert_eq!(result, 4294967295 as i64);
}

// Line 153
fn c111_l153_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c111_l153_action_invoke");
    let func_index = match result_object.module.info.exports.get("or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 155
fn c112_l155_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c112_l155_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 156
fn c113_l156_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c113_l156_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 157
fn c114_l157_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c114_l157_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 158
fn c115_l158_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c115_l158_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 159
fn c116_l159_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c116_l159_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 160
fn c117_l160_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c117_l160_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 161
fn c118_l161_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c118_l161_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 162
fn c119_l162_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c119_l162_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 163
fn c120_l163_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c120_l163_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4042326015 as i64, 4294963440 as i64, &result_object.instance);
    assert_eq!(result, 252645135 as i64);
}

// Line 164
fn c121_l164_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c121_l164_action_invoke");
    let func_index = match result_object.module.info.exports.get("xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 166
fn c122_l166_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c122_l166_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 167
fn c123_l167_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c123_l167_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 168
fn c124_l168_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c124_l168_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 169
fn c125_l169_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c125_l169_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -2 as i64);
}

// Line 170
fn c126_l170_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c126_l170_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 171
fn c127_l171_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c127_l171_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4611686018427387904 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 172
fn c128_l172_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c128_l172_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 173
fn c129_l173_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c129_l173_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 174
fn c130_l174_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c130_l174_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 65 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 175
fn c131_l175_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c131_l175_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 176
fn c132_l176_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c132_l176_action_invoke");
    let func_index = match result_object.module.info.exports.get("shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 178
fn c133_l178_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c133_l178_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 179
fn c134_l179_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c134_l179_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 180
fn c135_l180_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c135_l180_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 181
fn c136_l181_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c136_l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 4611686018427387903 as i64);
}

// Line 182
fn c137_l182_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c137_l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -4611686018427387904 as i64);
}

// Line 183
fn c138_l183_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c138_l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4611686018427387904 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 2305843009213693952 as i64);
}

// Line 184
fn c139_l184_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c139_l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 185
fn c140_l185_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c140_l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 65 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 186
fn c141_l186_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c141_l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 187
fn c142_l187_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c142_l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 188
fn c143_l188_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c143_l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 189
fn c144_l189_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c144_l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 190
fn c145_l190_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c145_l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 191
fn c146_l191_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c146_l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 65 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 192
fn c147_l192_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c147_l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 193
fn c148_l193_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c148_l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 194
fn c149_l194_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c149_l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 196
fn c150_l196_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c150_l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 197
fn c151_l197_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c151_l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 198
fn c152_l198_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c152_l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 199
fn c153_l199_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c153_l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 4611686018427387903 as i64);
}

// Line 200
fn c154_l200_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c154_l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 4611686018427387904 as i64);
}

// Line 201
fn c155_l201_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c155_l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(4611686018427387904 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 2305843009213693952 as i64);
}

// Line 202
fn c156_l202_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c156_l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 203
fn c157_l203_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c157_l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 65 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 204
fn c158_l204_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c158_l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 205
fn c159_l205_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c159_l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 206
fn c160_l206_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c160_l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 207
fn c161_l207_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c161_l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 208
fn c162_l208_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c162_l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 209
fn c163_l209_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c163_l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 65 as i64, &result_object.instance);
    assert_eq!(result, 9223372036854775807 as i64);
}

// Line 210
fn c164_l210_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c164_l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 211
fn c165_l211_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c165_l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 212
fn c166_l212_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c166_l212_action_invoke");
    let func_index = match result_object.module.info.exports.get("shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 214
fn c167_l214_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c167_l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 215
fn c168_l215_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c168_l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 216
fn c169_l216_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c169_l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 217
fn c170_l217_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c170_l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 218
fn c171_l218_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c171_l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067025490386449714 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 6312693092936652189 as i64);
}

// Line 219
fn c172_l219_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c172_l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-144115184384868352 as i64, 4 as i64, &result_object.instance);
    assert_eq!(result, -2305842950157893617 as i64);
}

// Line 220
fn c173_l220_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c173_l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 53 as i64, &result_object.instance);
    assert_eq!(result, 87109505680009935 as i64);
}

// Line 221
fn c174_l221_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c174_l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, 6190357836324913230 as i64);
}

// Line 222
fn c175_l222_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c175_l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 245 as i64, &result_object.instance);
    assert_eq!(result, 87109505680009935 as i64);
}

// Line 223
fn c176_l223_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c176_l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067067139002042359 as i64, -19 as i64, &result_object.instance);
    assert_eq!(result, -3530481836149793302 as i64);
}

// Line 224
fn c177_l224_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c177_l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, -9223372036854775745 as i64, &result_object.instance);
    assert_eq!(result, 6190357836324913230 as i64);
}

// Line 225
fn c178_l225_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c178_l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 226
fn c179_l226_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c179_l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 228
fn c180_l228_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c180_l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -9223372036854775808 as i64);
}

// Line 229
fn c181_l229_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c181_l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 230
fn c182_l230_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c182_l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, -1 as i64);
}

// Line 231
fn c183_l231_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c183_l231_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 64 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 232
fn c184_l232_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c184_l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067025490386449714 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 6189859291661550951 as i64);
}

// Line 233
fn c185_l233_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c185_l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-144115184384868352 as i64, 4 as i64, &result_object.instance);
    assert_eq!(result, 1143914305582792704 as i64);
}

// Line 234
fn c186_l234_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c186_l234_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 53 as i64, &result_object.instance);
    assert_eq!(result, 7534987797011123550 as i64);
}

// Line 235
fn c187_l235_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c187_l235_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, 6314687271590101305 as i64);
}

// Line 236
fn c188_l236_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c188_l236_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067173104435169271 as i64, 245 as i64, &result_object.instance);
    assert_eq!(result, 7534987797011123550 as i64);
}

// Line 237
fn c189_l237_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c189_l237_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6067067139002042359 as i64, -19 as i64, &result_object.instance);
    assert_eq!(result, -7735078922541506965 as i64);
}

// Line 238
fn c190_l238_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c190_l238_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6066028401059725156 as i64, -9223372036854775745 as i64, &result_object.instance);
    assert_eq!(result, 6314687271590101305 as i64);
}

// Line 239
fn c191_l239_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c191_l239_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, 2 as i64);
}

// Line 240
fn c192_l240_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c192_l240_action_invoke");
    let func_index = match result_object.module.info.exports.get("rotr") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 63 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 242
fn c193_l242_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c193_l242_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 243
fn c194_l243_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c194_l243_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &result_object.instance);
    assert_eq!(result, 64 as i64);
}

// Line 244
fn c195_l244_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c195_l244_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(32768 as i64, &result_object.instance);
    assert_eq!(result, 48 as i64);
}

// Line 245
fn c196_l245_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c196_l245_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(255 as i64, &result_object.instance);
    assert_eq!(result, 56 as i64);
}

// Line 246
fn c197_l246_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c197_l246_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 247
fn c198_l247_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c198_l247_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &result_object.instance);
    assert_eq!(result, 63 as i64);
}

// Line 248
fn c199_l248_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c199_l248_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(2 as i64, &result_object.instance);
    assert_eq!(result, 62 as i64);
}

// Line 249
fn c200_l249_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c200_l249_action_invoke");
    let func_index = match result_object.module.info.exports.get("clz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 251
fn c201_l251_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c201_l251_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 252
fn c202_l252_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c202_l252_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &result_object.instance);
    assert_eq!(result, 64 as i64);
}

// Line 253
fn c203_l253_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c203_l253_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(32768 as i64, &result_object.instance);
    assert_eq!(result, 15 as i64);
}

// Line 254
fn c204_l254_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c204_l254_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(65536 as i64, &result_object.instance);
    assert_eq!(result, 16 as i64);
}

// Line 255
fn c205_l255_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c205_l255_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 63 as i64);
}

// Line 256
fn c206_l256_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c206_l256_action_invoke");
    let func_index = match result_object.module.info.exports.get("ctz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 258
fn c207_l258_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c207_l258_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &result_object.instance);
    assert_eq!(result, 64 as i64);
}

// Line 259
fn c208_l259_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c208_l259_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i64);
}

// Line 260
fn c209_l260_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c209_l260_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(32768 as i64, &result_object.instance);
    assert_eq!(result, 1 as i64);
}

// Line 261
fn c210_l261_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c210_l261_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223231297218904064 as i64, &result_object.instance);
    assert_eq!(result, 4 as i64);
}

// Line 262
fn c211_l262_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c211_l262_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 63 as i64);
}

// Line 263
fn c212_l263_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c212_l263_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-6148914692668172971 as i64, &result_object.instance);
    assert_eq!(result, 32 as i64);
}

// Line 264
fn c213_l264_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c213_l264_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-7378697629197489494 as i64, &result_object.instance);
    assert_eq!(result, 32 as i64);
}

// Line 265
fn c214_l265_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c214_l265_action_invoke");
    let func_index = match result_object.module.info.exports.get("popcnt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i64 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-2401053088876216593 as i64, &result_object.instance);
    assert_eq!(result, 48 as i64);
}

// Line 267
fn c215_l267_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c215_l267_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 268
fn c216_l268_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c216_l268_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 269
fn c217_l269_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c217_l269_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 270
fn c218_l270_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c218_l270_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 271
fn c219_l271_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c219_l271_action_invoke");
    let func_index = match result_object.module.info.exports.get("eqz") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 273
fn c220_l273_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c220_l273_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 274
fn c221_l274_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c221_l274_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 275
fn c222_l275_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c222_l275_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 276
fn c223_l276_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c223_l276_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 277
fn c224_l277_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c224_l277_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 278
fn c225_l278_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c225_l278_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 279
fn c226_l279_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c226_l279_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 280
fn c227_l280_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c227_l280_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 281
fn c228_l281_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c228_l281_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 282
fn c229_l282_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c229_l282_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 283
fn c230_l283_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c230_l283_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 284
fn c231_l284_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c231_l284_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 285
fn c232_l285_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c232_l285_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 286
fn c233_l286_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c233_l286_action_invoke");
    let func_index = match result_object.module.info.exports.get("eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 288
fn c234_l288_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c234_l288_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 289
fn c235_l289_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c235_l289_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 290
fn c236_l290_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c236_l290_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 291
fn c237_l291_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c237_l291_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 292
fn c238_l292_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c238_l292_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 293
fn c239_l293_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c239_l293_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 294
fn c240_l294_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c240_l294_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 295
fn c241_l295_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c241_l295_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 296
fn c242_l296_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c242_l296_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 297
fn c243_l297_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c243_l297_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 298
fn c244_l298_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c244_l298_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 299
fn c245_l299_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c245_l299_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 300
fn c246_l300_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c246_l300_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 301
fn c247_l301_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c247_l301_action_invoke");
    let func_index = match result_object.module.info.exports.get("ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 303
fn c248_l303_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c248_l303_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 304
fn c249_l304_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c249_l304_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 305
fn c250_l305_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c250_l305_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 306
fn c251_l306_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c251_l306_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 307
fn c252_l307_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c252_l307_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 308
fn c253_l308_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c253_l308_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 309
fn c254_l309_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c254_l309_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 310
fn c255_l310_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c255_l310_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 311
fn c256_l311_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c256_l311_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 312
fn c257_l312_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c257_l312_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 313
fn c258_l313_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c258_l313_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 314
fn c259_l314_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c259_l314_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 315
fn c260_l315_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c260_l315_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 316
fn c261_l316_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c261_l316_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 318
fn c262_l318_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c262_l318_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 319
fn c263_l319_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c263_l319_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 320
fn c264_l320_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c264_l320_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 321
fn c265_l321_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c265_l321_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 322
fn c266_l322_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c266_l322_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 323
fn c267_l323_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c267_l323_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 324
fn c268_l324_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c268_l324_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 325
fn c269_l325_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c269_l325_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 326
fn c270_l326_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c270_l326_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 327
fn c271_l327_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c271_l327_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 328
fn c272_l328_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c272_l328_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 329
fn c273_l329_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c273_l329_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 330
fn c274_l330_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c274_l330_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 331
fn c275_l331_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c275_l331_action_invoke");
    let func_index = match result_object.module.info.exports.get("lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 333
fn c276_l333_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c276_l333_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 334
fn c277_l334_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c277_l334_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 335
fn c278_l335_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c278_l335_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 336
fn c279_l336_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c279_l336_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 337
fn c280_l337_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c280_l337_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 338
fn c281_l338_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c281_l338_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 339
fn c282_l339_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c282_l339_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 340
fn c283_l340_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c283_l340_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 341
fn c284_l341_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c284_l341_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 342
fn c285_l342_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c285_l342_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 343
fn c286_l343_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c286_l343_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 344
fn c287_l344_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c287_l344_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 345
fn c288_l345_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c288_l345_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 346
fn c289_l346_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c289_l346_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 348
fn c290_l348_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c290_l348_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 349
fn c291_l349_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c291_l349_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 350
fn c292_l350_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c292_l350_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 351
fn c293_l351_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c293_l351_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 352
fn c294_l352_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c294_l352_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 353
fn c295_l353_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c295_l353_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 354
fn c296_l354_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c296_l354_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 355
fn c297_l355_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c297_l355_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 356
fn c298_l356_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c298_l356_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 357
fn c299_l357_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c299_l357_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 358
fn c300_l358_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c300_l358_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 359
fn c301_l359_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c301_l359_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 360
fn c302_l360_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c302_l360_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 361
fn c303_l361_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c303_l361_action_invoke");
    let func_index = match result_object.module.info.exports.get("le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 363
fn c304_l363_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c304_l363_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 364
fn c305_l364_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c305_l364_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 365
fn c306_l365_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c306_l365_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 366
fn c307_l366_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c307_l366_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 367
fn c308_l367_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c308_l367_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 368
fn c309_l368_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c309_l368_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 369
fn c310_l369_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c310_l369_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 370
fn c311_l370_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c311_l370_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 371
fn c312_l371_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c312_l371_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 372
fn c313_l372_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c313_l372_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 373
fn c314_l373_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c314_l373_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 374
fn c315_l374_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c315_l374_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 375
fn c316_l375_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c316_l375_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 376
fn c317_l376_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c317_l376_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 378
fn c318_l378_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c318_l378_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 379
fn c319_l379_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c319_l379_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 380
fn c320_l380_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c320_l380_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 381
fn c321_l381_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c321_l381_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 382
fn c322_l382_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c322_l382_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 383
fn c323_l383_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c323_l383_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 384
fn c324_l384_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c324_l384_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 385
fn c325_l385_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c325_l385_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 386
fn c326_l386_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c326_l386_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 387
fn c327_l387_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c327_l387_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 388
fn c328_l388_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c328_l388_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 389
fn c329_l389_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c329_l389_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 390
fn c330_l390_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c330_l390_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 391
fn c331_l391_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c331_l391_action_invoke");
    let func_index = match result_object.module.info.exports.get("gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 393
fn c332_l393_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c332_l393_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 394
fn c333_l394_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c333_l394_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 395
fn c334_l395_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c334_l395_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 396
fn c335_l396_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c335_l396_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 397
fn c336_l397_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c336_l397_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 398
fn c337_l398_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c337_l398_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 399
fn c338_l399_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c338_l399_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 400
fn c339_l400_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c339_l400_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 401
fn c340_l401_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c340_l401_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 402
fn c341_l402_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c341_l402_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 403
fn c342_l403_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c342_l403_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 404
fn c343_l404_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c343_l404_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 405
fn c344_l405_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c344_l405_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 406
fn c345_l406_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c345_l406_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 408
fn c346_l408_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c346_l408_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 409
fn c347_l409_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c347_l409_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 410
fn c348_l410_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c348_l410_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 411
fn c349_l411_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c349_l411_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 412
fn c350_l412_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c350_l412_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 413
fn c351_l413_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c351_l413_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 414
fn c352_l414_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c352_l414_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(1 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 415
fn c353_l415_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c353_l415_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, 1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 416
fn c354_l416_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c354_l416_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 0 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 417
fn c355_l417_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c355_l417_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(0 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 418
fn c356_l418_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c356_l418_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, -1 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

// Line 419
fn c357_l419_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c357_l419_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-1 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 420
fn c358_l420_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c358_l420_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(-9223372036854775808 as i64, 9223372036854775807 as i64, &result_object.instance);
    assert_eq!(result, 1 as i32);
}

// Line 421
fn c359_l421_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c359_l421_action_invoke");
    let func_index = match result_object.module.info.exports.get("ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(i64, i64, &Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(9223372036854775807 as i64, -9223372036854775808 as i64, &result_object.instance);
    assert_eq!(result, 0 as i32);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    start_module_1(&result_object);
    c1_l35_action_invoke(&result_object);
    c2_l36_action_invoke(&result_object);
    c3_l37_action_invoke(&result_object);
    c4_l38_action_invoke(&result_object);
    c5_l39_action_invoke(&result_object);
    c6_l40_action_invoke(&result_object);
    c7_l41_action_invoke(&result_object);
    c8_l42_action_invoke(&result_object);
    c9_l44_action_invoke(&result_object);
    c10_l45_action_invoke(&result_object);
    c11_l46_action_invoke(&result_object);
    c12_l47_action_invoke(&result_object);
    c13_l48_action_invoke(&result_object);
    c14_l49_action_invoke(&result_object);
    c15_l50_action_invoke(&result_object);
    c16_l52_action_invoke(&result_object);
    c17_l53_action_invoke(&result_object);
    c18_l54_action_invoke(&result_object);
    c19_l55_action_invoke(&result_object);
    c20_l56_action_invoke(&result_object);
    c21_l57_action_invoke(&result_object);
    c22_l58_action_invoke(&result_object);
    c23_l59_action_invoke(&result_object);
    c24_l60_action_invoke(&result_object);
    c28_l65_action_invoke(&result_object);
    c29_l66_action_invoke(&result_object);
    c30_l67_action_invoke(&result_object);
    c31_l68_action_invoke(&result_object);
    c32_l69_action_invoke(&result_object);
    c33_l70_action_invoke(&result_object);
    c34_l71_action_invoke(&result_object);
    c35_l72_action_invoke(&result_object);
    c36_l73_action_invoke(&result_object);
    c37_l74_action_invoke(&result_object);
    c38_l75_action_invoke(&result_object);
    c39_l76_action_invoke(&result_object);
    c40_l77_action_invoke(&result_object);
    c41_l78_action_invoke(&result_object);
    c42_l79_action_invoke(&result_object);
    c43_l80_action_invoke(&result_object);
    c46_l84_action_invoke(&result_object);
    c47_l85_action_invoke(&result_object);
    c48_l86_action_invoke(&result_object);
    c49_l87_action_invoke(&result_object);
    c50_l88_action_invoke(&result_object);
    c51_l89_action_invoke(&result_object);
    c52_l90_action_invoke(&result_object);
    c53_l91_action_invoke(&result_object);
    c54_l92_action_invoke(&result_object);
    c55_l93_action_invoke(&result_object);
    c56_l94_action_invoke(&result_object);
    c57_l95_action_invoke(&result_object);
    c58_l96_action_invoke(&result_object);
    c59_l97_action_invoke(&result_object);
    c62_l101_action_invoke(&result_object);
    c63_l102_action_invoke(&result_object);
    c64_l103_action_invoke(&result_object);
    c65_l104_action_invoke(&result_object);
    c66_l105_action_invoke(&result_object);
    c67_l106_action_invoke(&result_object);
    c68_l107_action_invoke(&result_object);
    c69_l108_action_invoke(&result_object);
    c70_l109_action_invoke(&result_object);
    c71_l110_action_invoke(&result_object);
    c72_l111_action_invoke(&result_object);
    c73_l112_action_invoke(&result_object);
    c74_l113_action_invoke(&result_object);
    c75_l114_action_invoke(&result_object);
    c76_l115_action_invoke(&result_object);
    c77_l116_action_invoke(&result_object);
    c78_l117_action_invoke(&result_object);
    c79_l118_action_invoke(&result_object);
    c82_l122_action_invoke(&result_object);
    c83_l123_action_invoke(&result_object);
    c84_l124_action_invoke(&result_object);
    c85_l125_action_invoke(&result_object);
    c86_l126_action_invoke(&result_object);
    c87_l127_action_invoke(&result_object);
    c88_l128_action_invoke(&result_object);
    c89_l129_action_invoke(&result_object);
    c90_l130_action_invoke(&result_object);
    c91_l131_action_invoke(&result_object);
    c92_l132_action_invoke(&result_object);
    c93_l133_action_invoke(&result_object);
    c94_l134_action_invoke(&result_object);
    c95_l135_action_invoke(&result_object);
    c96_l137_action_invoke(&result_object);
    c97_l138_action_invoke(&result_object);
    c98_l139_action_invoke(&result_object);
    c99_l140_action_invoke(&result_object);
    c100_l141_action_invoke(&result_object);
    c101_l142_action_invoke(&result_object);
    c102_l143_action_invoke(&result_object);
    c103_l144_action_invoke(&result_object);
    c104_l146_action_invoke(&result_object);
    c105_l147_action_invoke(&result_object);
    c106_l148_action_invoke(&result_object);
    c107_l149_action_invoke(&result_object);
    c108_l150_action_invoke(&result_object);
    c109_l151_action_invoke(&result_object);
    c110_l152_action_invoke(&result_object);
    c111_l153_action_invoke(&result_object);
    c112_l155_action_invoke(&result_object);
    c113_l156_action_invoke(&result_object);
    c114_l157_action_invoke(&result_object);
    c115_l158_action_invoke(&result_object);
    c116_l159_action_invoke(&result_object);
    c117_l160_action_invoke(&result_object);
    c118_l161_action_invoke(&result_object);
    c119_l162_action_invoke(&result_object);
    c120_l163_action_invoke(&result_object);
    c121_l164_action_invoke(&result_object);
    c122_l166_action_invoke(&result_object);
    c123_l167_action_invoke(&result_object);
    c124_l168_action_invoke(&result_object);
    c125_l169_action_invoke(&result_object);
    c126_l170_action_invoke(&result_object);
    c127_l171_action_invoke(&result_object);
    c128_l172_action_invoke(&result_object);
    c129_l173_action_invoke(&result_object);
    c130_l174_action_invoke(&result_object);
    c131_l175_action_invoke(&result_object);
    c132_l176_action_invoke(&result_object);
    c133_l178_action_invoke(&result_object);
    c134_l179_action_invoke(&result_object);
    c135_l180_action_invoke(&result_object);
    c136_l181_action_invoke(&result_object);
    c137_l182_action_invoke(&result_object);
    c138_l183_action_invoke(&result_object);
    c139_l184_action_invoke(&result_object);
    c140_l185_action_invoke(&result_object);
    c141_l186_action_invoke(&result_object);
    c142_l187_action_invoke(&result_object);
    c143_l188_action_invoke(&result_object);
    c144_l189_action_invoke(&result_object);
    c145_l190_action_invoke(&result_object);
    c146_l191_action_invoke(&result_object);
    c147_l192_action_invoke(&result_object);
    c148_l193_action_invoke(&result_object);
    c149_l194_action_invoke(&result_object);
    c150_l196_action_invoke(&result_object);
    c151_l197_action_invoke(&result_object);
    c152_l198_action_invoke(&result_object);
    c153_l199_action_invoke(&result_object);
    c154_l200_action_invoke(&result_object);
    c155_l201_action_invoke(&result_object);
    c156_l202_action_invoke(&result_object);
    c157_l203_action_invoke(&result_object);
    c158_l204_action_invoke(&result_object);
    c159_l205_action_invoke(&result_object);
    c160_l206_action_invoke(&result_object);
    c161_l207_action_invoke(&result_object);
    c162_l208_action_invoke(&result_object);
    c163_l209_action_invoke(&result_object);
    c164_l210_action_invoke(&result_object);
    c165_l211_action_invoke(&result_object);
    c166_l212_action_invoke(&result_object);
    c167_l214_action_invoke(&result_object);
    c168_l215_action_invoke(&result_object);
    c169_l216_action_invoke(&result_object);
    c170_l217_action_invoke(&result_object);
    c171_l218_action_invoke(&result_object);
    c172_l219_action_invoke(&result_object);
    c173_l220_action_invoke(&result_object);
    c174_l221_action_invoke(&result_object);
    c175_l222_action_invoke(&result_object);
    c176_l223_action_invoke(&result_object);
    c177_l224_action_invoke(&result_object);
    c178_l225_action_invoke(&result_object);
    c179_l226_action_invoke(&result_object);
    c180_l228_action_invoke(&result_object);
    c181_l229_action_invoke(&result_object);
    c182_l230_action_invoke(&result_object);
    c183_l231_action_invoke(&result_object);
    c184_l232_action_invoke(&result_object);
    c185_l233_action_invoke(&result_object);
    c186_l234_action_invoke(&result_object);
    c187_l235_action_invoke(&result_object);
    c188_l236_action_invoke(&result_object);
    c189_l237_action_invoke(&result_object);
    c190_l238_action_invoke(&result_object);
    c191_l239_action_invoke(&result_object);
    c192_l240_action_invoke(&result_object);
    c193_l242_action_invoke(&result_object);
    c194_l243_action_invoke(&result_object);
    c195_l244_action_invoke(&result_object);
    c196_l245_action_invoke(&result_object);
    c197_l246_action_invoke(&result_object);
    c198_l247_action_invoke(&result_object);
    c199_l248_action_invoke(&result_object);
    c200_l249_action_invoke(&result_object);
    c201_l251_action_invoke(&result_object);
    c202_l252_action_invoke(&result_object);
    c203_l253_action_invoke(&result_object);
    c204_l254_action_invoke(&result_object);
    c205_l255_action_invoke(&result_object);
    c206_l256_action_invoke(&result_object);
    c207_l258_action_invoke(&result_object);
    c208_l259_action_invoke(&result_object);
    c209_l260_action_invoke(&result_object);
    c210_l261_action_invoke(&result_object);
    c211_l262_action_invoke(&result_object);
    c212_l263_action_invoke(&result_object);
    c213_l264_action_invoke(&result_object);
    c214_l265_action_invoke(&result_object);
    c215_l267_action_invoke(&result_object);
    c216_l268_action_invoke(&result_object);
    c217_l269_action_invoke(&result_object);
    c218_l270_action_invoke(&result_object);
    c219_l271_action_invoke(&result_object);
    c220_l273_action_invoke(&result_object);
    c221_l274_action_invoke(&result_object);
    c222_l275_action_invoke(&result_object);
    c223_l276_action_invoke(&result_object);
    c224_l277_action_invoke(&result_object);
    c225_l278_action_invoke(&result_object);
    c226_l279_action_invoke(&result_object);
    c227_l280_action_invoke(&result_object);
    c228_l281_action_invoke(&result_object);
    c229_l282_action_invoke(&result_object);
    c230_l283_action_invoke(&result_object);
    c231_l284_action_invoke(&result_object);
    c232_l285_action_invoke(&result_object);
    c233_l286_action_invoke(&result_object);
    c234_l288_action_invoke(&result_object);
    c235_l289_action_invoke(&result_object);
    c236_l290_action_invoke(&result_object);
    c237_l291_action_invoke(&result_object);
    c238_l292_action_invoke(&result_object);
    c239_l293_action_invoke(&result_object);
    c240_l294_action_invoke(&result_object);
    c241_l295_action_invoke(&result_object);
    c242_l296_action_invoke(&result_object);
    c243_l297_action_invoke(&result_object);
    c244_l298_action_invoke(&result_object);
    c245_l299_action_invoke(&result_object);
    c246_l300_action_invoke(&result_object);
    c247_l301_action_invoke(&result_object);
    c248_l303_action_invoke(&result_object);
    c249_l304_action_invoke(&result_object);
    c250_l305_action_invoke(&result_object);
    c251_l306_action_invoke(&result_object);
    c252_l307_action_invoke(&result_object);
    c253_l308_action_invoke(&result_object);
    c254_l309_action_invoke(&result_object);
    c255_l310_action_invoke(&result_object);
    c256_l311_action_invoke(&result_object);
    c257_l312_action_invoke(&result_object);
    c258_l313_action_invoke(&result_object);
    c259_l314_action_invoke(&result_object);
    c260_l315_action_invoke(&result_object);
    c261_l316_action_invoke(&result_object);
    c262_l318_action_invoke(&result_object);
    c263_l319_action_invoke(&result_object);
    c264_l320_action_invoke(&result_object);
    c265_l321_action_invoke(&result_object);
    c266_l322_action_invoke(&result_object);
    c267_l323_action_invoke(&result_object);
    c268_l324_action_invoke(&result_object);
    c269_l325_action_invoke(&result_object);
    c270_l326_action_invoke(&result_object);
    c271_l327_action_invoke(&result_object);
    c272_l328_action_invoke(&result_object);
    c273_l329_action_invoke(&result_object);
    c274_l330_action_invoke(&result_object);
    c275_l331_action_invoke(&result_object);
    c276_l333_action_invoke(&result_object);
    c277_l334_action_invoke(&result_object);
    c278_l335_action_invoke(&result_object);
    c279_l336_action_invoke(&result_object);
    c280_l337_action_invoke(&result_object);
    c281_l338_action_invoke(&result_object);
    c282_l339_action_invoke(&result_object);
    c283_l340_action_invoke(&result_object);
    c284_l341_action_invoke(&result_object);
    c285_l342_action_invoke(&result_object);
    c286_l343_action_invoke(&result_object);
    c287_l344_action_invoke(&result_object);
    c288_l345_action_invoke(&result_object);
    c289_l346_action_invoke(&result_object);
    c290_l348_action_invoke(&result_object);
    c291_l349_action_invoke(&result_object);
    c292_l350_action_invoke(&result_object);
    c293_l351_action_invoke(&result_object);
    c294_l352_action_invoke(&result_object);
    c295_l353_action_invoke(&result_object);
    c296_l354_action_invoke(&result_object);
    c297_l355_action_invoke(&result_object);
    c298_l356_action_invoke(&result_object);
    c299_l357_action_invoke(&result_object);
    c300_l358_action_invoke(&result_object);
    c301_l359_action_invoke(&result_object);
    c302_l360_action_invoke(&result_object);
    c303_l361_action_invoke(&result_object);
    c304_l363_action_invoke(&result_object);
    c305_l364_action_invoke(&result_object);
    c306_l365_action_invoke(&result_object);
    c307_l366_action_invoke(&result_object);
    c308_l367_action_invoke(&result_object);
    c309_l368_action_invoke(&result_object);
    c310_l369_action_invoke(&result_object);
    c311_l370_action_invoke(&result_object);
    c312_l371_action_invoke(&result_object);
    c313_l372_action_invoke(&result_object);
    c314_l373_action_invoke(&result_object);
    c315_l374_action_invoke(&result_object);
    c316_l375_action_invoke(&result_object);
    c317_l376_action_invoke(&result_object);
    c318_l378_action_invoke(&result_object);
    c319_l379_action_invoke(&result_object);
    c320_l380_action_invoke(&result_object);
    c321_l381_action_invoke(&result_object);
    c322_l382_action_invoke(&result_object);
    c323_l383_action_invoke(&result_object);
    c324_l384_action_invoke(&result_object);
    c325_l385_action_invoke(&result_object);
    c326_l386_action_invoke(&result_object);
    c327_l387_action_invoke(&result_object);
    c328_l388_action_invoke(&result_object);
    c329_l389_action_invoke(&result_object);
    c330_l390_action_invoke(&result_object);
    c331_l391_action_invoke(&result_object);
    c332_l393_action_invoke(&result_object);
    c333_l394_action_invoke(&result_object);
    c334_l395_action_invoke(&result_object);
    c335_l396_action_invoke(&result_object);
    c336_l397_action_invoke(&result_object);
    c337_l398_action_invoke(&result_object);
    c338_l399_action_invoke(&result_object);
    c339_l400_action_invoke(&result_object);
    c340_l401_action_invoke(&result_object);
    c341_l402_action_invoke(&result_object);
    c342_l403_action_invoke(&result_object);
    c343_l404_action_invoke(&result_object);
    c344_l405_action_invoke(&result_object);
    c345_l406_action_invoke(&result_object);
    c346_l408_action_invoke(&result_object);
    c347_l409_action_invoke(&result_object);
    c348_l410_action_invoke(&result_object);
    c349_l411_action_invoke(&result_object);
    c350_l412_action_invoke(&result_object);
    c351_l413_action_invoke(&result_object);
    c352_l414_action_invoke(&result_object);
    c353_l415_action_invoke(&result_object);
    c354_l416_action_invoke(&result_object);
    c355_l417_action_invoke(&result_object);
    c356_l418_action_invoke(&result_object);
    c357_l419_action_invoke(&result_object);
    c358_l420_action_invoke(&result_object);
    c359_l421_action_invoke(&result_object);
}
