// Rust test file autogenerated with cargo build (src/build_spectests.rs).
// Please do NOT modify it by hand, as it will be reseted on next build.
// Test based on spectests/left_to_right.wast
#![allow(
    warnings,
    dead_code
)]
use wabt::wat2wasm;

use crate::webassembly::{instantiate, compile, ImportObject, ResultObject, Instance, Export};
use super::_common::{
    spectest_importobject,
    NaNCheck,
};


// Line 1
fn create_module_1() -> ResultObject {
    let module_str = "(module
      (type (;0;) (func (param i32 i32) (result i32)))
      (type (;1;) (func (param i64 i64) (result i32)))
      (type (;2;) (func (param f32 f32) (result i32)))
      (type (;3;) (func (param f64 f64) (result i32)))
      (type (;4;) (func))
      (type (;5;) (func (result i32)))
      (type (;6;) (func (result i64)))
      (type (;7;) (func (result f32)))
      (type (;8;) (func (result f64)))
      (type (;9;) (func (param i32 i32)))
      (type (;10;) (func (param i64 i64)))
      (type (;11;) (func (param f32 f32)))
      (type (;12;) (func (param f64 f64)))
      (func (;0;) (type 0) (param i32 i32) (result i32)
        i32.const -1)
      (func (;1;) (type 0) (param i32 i32) (result i32)
        i32.const -2)
      (func (;2;) (type 1) (param i64 i64) (result i32)
        i32.const -1)
      (func (;3;) (type 1) (param i64 i64) (result i32)
        i32.const -2)
      (func (;4;) (type 2) (param f32 f32) (result i32)
        i32.const -1)
      (func (;5;) (type 2) (param f32 f32) (result i32)
        i32.const -2)
      (func (;6;) (type 3) (param f64 f64) (result i32)
        i32.const -1)
      (func (;7;) (type 3) (param f64 f64) (result i32)
        i32.const -2)
      (func (;8;) (type 4)
        i32.const 8
        i32.const 0
        i32.store)
      (func (;9;) (type 4)
        i32.const 11
        i32.const 10
        i32.load8_u
        i32.store8
        i32.const 10
        i32.const 9
        i32.load8_u
        i32.store8
        i32.const 9
        i32.const 8
        i32.load8_u
        i32.store8
        i32.const 8
        i32.const -3
        i32.store8)
      (func (;10;) (type 5) (result i32)
        i32.const 8
        i32.load)
      (func (;11;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 1
        i32.store8
        i32.const 0)
      (func (;12;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 2
        i32.store8
        i32.const 1)
      (func (;13;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 3
        i32.store8
        i32.const 1)
      (func (;14;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 4
        i32.store8
        i32.const 0)
      (func (;15;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 5
        i32.store8
        i32.const 0)
      (func (;16;) (type 6) (result i64)
        call 9
        i32.const 8
        i32.const 1
        i32.store8
        i64.const 0)
      (func (;17;) (type 6) (result i64)
        call 9
        i32.const 8
        i32.const 2
        i32.store8
        i64.const 1)
      (func (;18;) (type 6) (result i64)
        call 9
        i32.const 8
        i32.const 3
        i32.store8
        i64.const 1)
      (func (;19;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 4
        i32.store8
        i32.const 2)
      (func (;20;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 5
        i32.store8
        i32.const 0)
      (func (;21;) (type 7) (result f32)
        call 9
        i32.const 8
        i32.const 1
        i32.store8
        f32.const 0x0p+0 (;=0;))
      (func (;22;) (type 7) (result f32)
        call 9
        i32.const 8
        i32.const 2
        i32.store8
        f32.const 0x1p+0 (;=1;))
      (func (;23;) (type 7) (result f32)
        call 9
        i32.const 8
        i32.const 3
        i32.store8
        f32.const 0x1p+0 (;=1;))
      (func (;24;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 4
        i32.store8
        i32.const 4)
      (func (;25;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 5
        i32.store8
        i32.const 0)
      (func (;26;) (type 8) (result f64)
        call 9
        i32.const 8
        i32.const 1
        i32.store8
        f64.const 0x0p+0 (;=0;))
      (func (;27;) (type 8) (result f64)
        call 9
        i32.const 8
        i32.const 2
        i32.store8
        f64.const 0x1p+0 (;=1;))
      (func (;28;) (type 8) (result f64)
        call 9
        i32.const 8
        i32.const 3
        i32.store8
        f64.const 0x1p+0 (;=1;))
      (func (;29;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 4
        i32.store8
        i32.const 6)
      (func (;30;) (type 5) (result i32)
        call 9
        i32.const 8
        i32.const 5
        i32.store8
        i32.const 0)
      (func (;31;) (type 9) (param i32 i32))
      (func (;32;) (type 10) (param i64 i64))
      (func (;33;) (type 11) (param f32 f32))
      (func (;34;) (type 12) (param f64 f64))
      (func (;35;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.add
        drop
        call 10)
      (func (;36;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.sub
        drop
        call 10)
      (func (;37;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.mul
        drop
        call 10)
      (func (;38;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.div_s
        drop
        call 10)
      (func (;39;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.div_u
        drop
        call 10)
      (func (;40;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.rem_s
        drop
        call 10)
      (func (;41;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.rem_u
        drop
        call 10)
      (func (;42;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.and
        drop
        call 10)
      (func (;43;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.or
        drop
        call 10)
      (func (;44;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.xor
        drop
        call 10)
      (func (;45;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.shl
        drop
        call 10)
      (func (;46;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.shr_u
        drop
        call 10)
      (func (;47;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.shr_s
        drop
        call 10)
      (func (;48;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.eq
        drop
        call 10)
      (func (;49;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.ne
        drop
        call 10)
      (func (;50;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.lt_s
        drop
        call 10)
      (func (;51;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.le_s
        drop
        call 10)
      (func (;52;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.lt_u
        drop
        call 10)
      (func (;53;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.le_u
        drop
        call 10)
      (func (;54;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.gt_s
        drop
        call 10)
      (func (;55;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.ge_s
        drop
        call 10)
      (func (;56;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.gt_u
        drop
        call 10)
      (func (;57;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.ge_u
        drop
        call 10)
      (func (;58;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.store
        call 10)
      (func (;59;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.store8
        call 10)
      (func (;60;) (type 5) (result i32)
        call 8
        call 11
        call 12
        i32.store16
        call 10)
      (func (;61;) (type 5) (result i32)
        call 8
        call 11
        call 12
        call 31
        call 10)
      (func (;62;) (type 5) (result i32)
        call 8
        call 11
        call 12
        call 14
        call_indirect (type 0)
        drop
        call 10)
      (func (;63;) (type 5) (result i32)
        call 8
        call 11
        call 12
        call 15
        select
        drop
        call 10)
      (func (;64;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.add
        drop
        call 10)
      (func (;65;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.sub
        drop
        call 10)
      (func (;66;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.mul
        drop
        call 10)
      (func (;67;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.div_s
        drop
        call 10)
      (func (;68;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.div_u
        drop
        call 10)
      (func (;69;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.rem_s
        drop
        call 10)
      (func (;70;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.rem_u
        drop
        call 10)
      (func (;71;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.and
        drop
        call 10)
      (func (;72;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.or
        drop
        call 10)
      (func (;73;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.xor
        drop
        call 10)
      (func (;74;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.shl
        drop
        call 10)
      (func (;75;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.shr_u
        drop
        call 10)
      (func (;76;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.shr_s
        drop
        call 10)
      (func (;77;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.eq
        drop
        call 10)
      (func (;78;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.ne
        drop
        call 10)
      (func (;79;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.lt_s
        drop
        call 10)
      (func (;80;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.le_s
        drop
        call 10)
      (func (;81;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.lt_u
        drop
        call 10)
      (func (;82;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.le_u
        drop
        call 10)
      (func (;83;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.gt_s
        drop
        call 10)
      (func (;84;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.ge_s
        drop
        call 10)
      (func (;85;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.gt_u
        drop
        call 10)
      (func (;86;) (type 5) (result i32)
        call 8
        call 16
        call 17
        i64.ge_u
        drop
        call 10)
      (func (;87;) (type 5) (result i32)
        call 8
        call 11
        call 17
        i64.store
        call 10)
      (func (;88;) (type 5) (result i32)
        call 8
        call 11
        call 17
        i64.store8
        call 10)
      (func (;89;) (type 5) (result i32)
        call 8
        call 11
        call 17
        i64.store16
        call 10)
      (func (;90;) (type 5) (result i32)
        call 8
        call 11
        call 17
        i64.store32
        call 10)
      (func (;91;) (type 5) (result i32)
        call 8
        call 16
        call 17
        call 32
        call 10)
      (func (;92;) (type 5) (result i32)
        call 8
        call 16
        call 17
        call 19
        call_indirect (type 1)
        drop
        call 10)
      (func (;93;) (type 5) (result i32)
        call 8
        call 16
        call 17
        call 20
        select
        drop
        call 10)
      (func (;94;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.add
        drop
        call 10)
      (func (;95;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.sub
        drop
        call 10)
      (func (;96;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.mul
        drop
        call 10)
      (func (;97;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.div
        drop
        call 10)
      (func (;98;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.copysign
        drop
        call 10)
      (func (;99;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.eq
        drop
        call 10)
      (func (;100;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.ne
        drop
        call 10)
      (func (;101;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.lt
        drop
        call 10)
      (func (;102;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.le
        drop
        call 10)
      (func (;103;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.gt
        drop
        call 10)
      (func (;104;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.ge
        drop
        call 10)
      (func (;105;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.min
        drop
        call 10)
      (func (;106;) (type 5) (result i32)
        call 8
        call 21
        call 22
        f32.max
        drop
        call 10)
      (func (;107;) (type 5) (result i32)
        call 8
        call 11
        call 22
        f32.store
        call 10)
      (func (;108;) (type 5) (result i32)
        call 8
        call 21
        call 22
        call 33
        call 10)
      (func (;109;) (type 5) (result i32)
        call 8
        call 21
        call 22
        call 24
        call_indirect (type 2)
        drop
        call 10)
      (func (;110;) (type 5) (result i32)
        call 8
        call 21
        call 22
        call 25
        select
        drop
        call 10)
      (func (;111;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.add
        drop
        call 10)
      (func (;112;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.sub
        drop
        call 10)
      (func (;113;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.mul
        drop
        call 10)
      (func (;114;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.div
        drop
        call 10)
      (func (;115;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.copysign
        drop
        call 10)
      (func (;116;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.eq
        drop
        call 10)
      (func (;117;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.ne
        drop
        call 10)
      (func (;118;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.lt
        drop
        call 10)
      (func (;119;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.le
        drop
        call 10)
      (func (;120;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.gt
        drop
        call 10)
      (func (;121;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.ge
        drop
        call 10)
      (func (;122;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.min
        drop
        call 10)
      (func (;123;) (type 5) (result i32)
        call 8
        call 26
        call 27
        f64.max
        drop
        call 10)
      (func (;124;) (type 5) (result i32)
        call 8
        call 11
        call 27
        f64.store
        call 10)
      (func (;125;) (type 5) (result i32)
        call 8
        call 26
        call 27
        call 34
        call 10)
      (func (;126;) (type 5) (result i32)
        call 8
        call 26
        call 27
        call 29
        call_indirect (type 3)
        drop
        call 10)
      (func (;127;) (type 5) (result i32)
        call 8
        call 26
        call 27
        call 30
        select
        drop
        call 10)
      (func (;128;) (type 5) (result i32)
        block (result i32)  ;; label = @1
          call 8
          call 11
          call 12
          i32.const 0
          i32.and
          br_if 0 (;@1;)
          drop
          call 10
        end)
      (func (;129;) (type 5) (result i32)
        block (result i32)  ;; label = @1
          call 8
          block (result i32)  ;; label = @2
            call 11
            call 12
            br_table 1 (;@1;) 0 (;@2;)
          end
          drop
          call 10
        end)
      (table (;0;) 8 8 anyfunc)
      (memory (;0;) 1)
      (export \"i32_add\" (func 35))
      (export \"i32_sub\" (func 36))
      (export \"i32_mul\" (func 37))
      (export \"i32_div_s\" (func 38))
      (export \"i32_div_u\" (func 39))
      (export \"i32_rem_s\" (func 40))
      (export \"i32_rem_u\" (func 41))
      (export \"i32_and\" (func 42))
      (export \"i32_or\" (func 43))
      (export \"i32_xor\" (func 44))
      (export \"i32_shl\" (func 45))
      (export \"i32_shr_u\" (func 46))
      (export \"i32_shr_s\" (func 47))
      (export \"i32_eq\" (func 48))
      (export \"i32_ne\" (func 49))
      (export \"i32_lt_s\" (func 50))
      (export \"i32_le_s\" (func 51))
      (export \"i32_lt_u\" (func 52))
      (export \"i32_le_u\" (func 53))
      (export \"i32_gt_s\" (func 54))
      (export \"i32_ge_s\" (func 55))
      (export \"i32_gt_u\" (func 56))
      (export \"i32_ge_u\" (func 57))
      (export \"i32_store\" (func 58))
      (export \"i32_store8\" (func 59))
      (export \"i32_store16\" (func 60))
      (export \"i32_call\" (func 61))
      (export \"i32_call_indirect\" (func 62))
      (export \"i32_select\" (func 63))
      (export \"i64_add\" (func 64))
      (export \"i64_sub\" (func 65))
      (export \"i64_mul\" (func 66))
      (export \"i64_div_s\" (func 67))
      (export \"i64_div_u\" (func 68))
      (export \"i64_rem_s\" (func 69))
      (export \"i64_rem_u\" (func 70))
      (export \"i64_and\" (func 71))
      (export \"i64_or\" (func 72))
      (export \"i64_xor\" (func 73))
      (export \"i64_shl\" (func 74))
      (export \"i64_shr_u\" (func 75))
      (export \"i64_shr_s\" (func 76))
      (export \"i64_eq\" (func 77))
      (export \"i64_ne\" (func 78))
      (export \"i64_lt_s\" (func 79))
      (export \"i64_le_s\" (func 80))
      (export \"i64_lt_u\" (func 81))
      (export \"i64_le_u\" (func 82))
      (export \"i64_gt_s\" (func 83))
      (export \"i64_ge_s\" (func 84))
      (export \"i64_gt_u\" (func 85))
      (export \"i64_ge_u\" (func 86))
      (export \"i64_store\" (func 87))
      (export \"i64_store8\" (func 88))
      (export \"i64_store16\" (func 89))
      (export \"i64_store32\" (func 90))
      (export \"i64_call\" (func 91))
      (export \"i64_call_indirect\" (func 92))
      (export \"i64_select\" (func 93))
      (export \"f32_add\" (func 94))
      (export \"f32_sub\" (func 95))
      (export \"f32_mul\" (func 96))
      (export \"f32_div\" (func 97))
      (export \"f32_copysign\" (func 98))
      (export \"f32_eq\" (func 99))
      (export \"f32_ne\" (func 100))
      (export \"f32_lt\" (func 101))
      (export \"f32_le\" (func 102))
      (export \"f32_gt\" (func 103))
      (export \"f32_ge\" (func 104))
      (export \"f32_min\" (func 105))
      (export \"f32_max\" (func 106))
      (export \"f32_store\" (func 107))
      (export \"f32_call\" (func 108))
      (export \"f32_call_indirect\" (func 109))
      (export \"f32_select\" (func 110))
      (export \"f64_add\" (func 111))
      (export \"f64_sub\" (func 112))
      (export \"f64_mul\" (func 113))
      (export \"f64_div\" (func 114))
      (export \"f64_copysign\" (func 115))
      (export \"f64_eq\" (func 116))
      (export \"f64_ne\" (func 117))
      (export \"f64_lt\" (func 118))
      (export \"f64_le\" (func 119))
      (export \"f64_gt\" (func 120))
      (export \"f64_ge\" (func 121))
      (export \"f64_min\" (func 122))
      (export \"f64_max\" (func 123))
      (export \"f64_store\" (func 124))
      (export \"f64_call\" (func 125))
      (export \"f64_call_indirect\" (func 126))
      (export \"f64_select\" (func 127))
      (export \"br_if\" (func 128))
      (export \"br_table\" (func 129))
      (elem (;0;) (i32.const 0) 0 1 2 3 4 5 6 7))
    ";
    let wasm_binary = wat2wasm(module_str.as_bytes()).expect("WAST not valid or malformed");
    instantiate(wasm_binary, spectest_importobject()).expect("WASM can't be instantiated")
}

fn start_module_1(result_object: &ResultObject) {
    result_object.instance.start();
}

// Line 181
fn c1_l181_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c1_l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 181
fn c2_l181_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c2_l181_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 182
fn c3_l182_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c3_l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 182
fn c4_l182_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c4_l182_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 183
fn c5_l183_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c5_l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 183
fn c6_l183_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c6_l183_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 184
fn c7_l184_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c7_l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 184
fn c8_l184_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c8_l184_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_div_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 185
fn c9_l185_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c9_l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 185
fn c10_l185_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c10_l185_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_div_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 186
fn c11_l186_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c11_l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 186
fn c12_l186_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c12_l186_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_rem_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 187
fn c13_l187_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c13_l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 187
fn c14_l187_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c14_l187_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_rem_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 188
fn c15_l188_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c15_l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 188
fn c16_l188_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c16_l188_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_and") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 189
fn c17_l189_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c17_l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 189
fn c18_l189_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c18_l189_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_or") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 190
fn c19_l190_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c19_l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 190
fn c20_l190_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c20_l190_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_xor") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 191
fn c21_l191_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c21_l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 191
fn c22_l191_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c22_l191_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_shl") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 192
fn c23_l192_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c23_l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 192
fn c24_l192_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c24_l192_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_shr_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 193
fn c25_l193_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c25_l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 193
fn c26_l193_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c26_l193_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_shr_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 194
fn c27_l194_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c27_l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 194
fn c28_l194_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c28_l194_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 195
fn c29_l195_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c29_l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 195
fn c30_l195_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c30_l195_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 196
fn c31_l196_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c31_l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 196
fn c32_l196_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c32_l196_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_lt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 197
fn c33_l197_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c33_l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 197
fn c34_l197_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c34_l197_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_le_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 198
fn c35_l198_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c35_l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 198
fn c36_l198_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c36_l198_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_lt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 199
fn c37_l199_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c37_l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 199
fn c38_l199_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c38_l199_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_le_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 200
fn c39_l200_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c39_l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 200
fn c40_l200_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c40_l200_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_gt_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 201
fn c41_l201_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c41_l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 201
fn c42_l201_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c42_l201_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_ge_s") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 202
fn c43_l202_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c43_l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 202
fn c44_l202_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c44_l202_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_gt_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 203
fn c45_l203_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c45_l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 203
fn c46_l203_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c46_l203_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_ge_u") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 204
fn c47_l204_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c47_l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 204
fn c48_l204_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c48_l204_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 205
fn c49_l205_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c49_l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store8") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 205
fn c50_l205_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c50_l205_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store8") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 206
fn c51_l206_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c51_l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 206
fn c52_l206_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c52_l206_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store16") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 207
fn c53_l207_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c53_l207_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_store32") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 208
fn c54_l208_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c54_l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_call") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 208
fn c55_l208_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c55_l208_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_call") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 209
fn c56_l209_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c56_l209_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_call_indirect") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66052 as i32);
}

// Line 210
fn c57_l210_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c57_l210_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_call_indirect") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66052 as i32);
}

// Line 211
fn c58_l211_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c58_l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("i32_select") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66053 as i32);
}

// Line 211
fn c59_l211_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c59_l211_action_invoke");
    let func_index = match result_object.module.info.exports.get("i64_select") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66053 as i32);
}

// Line 213
fn c60_l213_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c60_l213_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 213
fn c61_l213_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c61_l213_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_add") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 214
fn c62_l214_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c62_l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 214
fn c63_l214_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c63_l214_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_sub") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 215
fn c64_l215_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c64_l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 215
fn c65_l215_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c65_l215_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_mul") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 216
fn c66_l216_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c66_l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 216
fn c67_l216_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c67_l216_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_div") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 217
fn c68_l217_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c68_l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 217
fn c69_l217_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c69_l217_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_copysign") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 218
fn c70_l218_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c70_l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 218
fn c71_l218_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c71_l218_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_eq") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 219
fn c72_l219_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c72_l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 219
fn c73_l219_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c73_l219_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_ne") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 220
fn c74_l220_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c74_l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 220
fn c75_l220_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c75_l220_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_lt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 221
fn c76_l221_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c76_l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 221
fn c77_l221_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c77_l221_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_le") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 222
fn c78_l222_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c78_l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 222
fn c79_l222_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c79_l222_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_gt") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 223
fn c80_l223_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c80_l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 223
fn c81_l223_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c81_l223_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_ge") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 224
fn c82_l224_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c82_l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 224
fn c83_l224_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c83_l224_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_min") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 225
fn c84_l225_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c84_l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 225
fn c85_l225_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c85_l225_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_max") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 226
fn c86_l226_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c86_l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 226
fn c87_l226_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c87_l226_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_store") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 227
fn c88_l227_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c88_l227_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_call") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 227
fn c89_l227_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c89_l227_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_call") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 228
fn c90_l228_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c90_l228_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_call_indirect") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66052 as i32);
}

// Line 229
fn c91_l229_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c91_l229_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_call_indirect") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66052 as i32);
}

// Line 230
fn c92_l230_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c92_l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("f32_select") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66053 as i32);
}

// Line 230
fn c93_l230_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c93_l230_action_invoke");
    let func_index = match result_object.module.info.exports.get("f64_select") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 66053 as i32);
}

// Line 232
fn c94_l232_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c94_l232_action_invoke");
    let func_index = match result_object.module.info.exports.get("br_if") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

// Line 233
fn c95_l233_action_invoke(result_object: &ResultObject) {
    println!("Executing function {}", "c95_l233_action_invoke");
    let func_index = match result_object.module.info.exports.get("br_table") {
        Some(&Export::Function(index)) => index,
        _ => panic!("Function not found"),
    };
    let invoke_fn: fn(&Instance) -> i32 = get_instance_function!(result_object.instance, func_index);
    let result = invoke_fn(&result_object.instance);
    assert_eq!(result, 258 as i32);
}

#[test]
fn test_module_1() {
    let result_object = create_module_1();
    // We group the calls together
    start_module_1(&result_object);
    c1_l181_action_invoke(&result_object);
    c2_l181_action_invoke(&result_object);
    c3_l182_action_invoke(&result_object);
    c4_l182_action_invoke(&result_object);
    c5_l183_action_invoke(&result_object);
    c6_l183_action_invoke(&result_object);
    c7_l184_action_invoke(&result_object);
    c8_l184_action_invoke(&result_object);
    c9_l185_action_invoke(&result_object);
    c10_l185_action_invoke(&result_object);
    c11_l186_action_invoke(&result_object);
    c12_l186_action_invoke(&result_object);
    c13_l187_action_invoke(&result_object);
    c14_l187_action_invoke(&result_object);
    c15_l188_action_invoke(&result_object);
    c16_l188_action_invoke(&result_object);
    c17_l189_action_invoke(&result_object);
    c18_l189_action_invoke(&result_object);
    c19_l190_action_invoke(&result_object);
    c20_l190_action_invoke(&result_object);
    c21_l191_action_invoke(&result_object);
    c22_l191_action_invoke(&result_object);
    c23_l192_action_invoke(&result_object);
    c24_l192_action_invoke(&result_object);
    c25_l193_action_invoke(&result_object);
    c26_l193_action_invoke(&result_object);
    c27_l194_action_invoke(&result_object);
    c28_l194_action_invoke(&result_object);
    c29_l195_action_invoke(&result_object);
    c30_l195_action_invoke(&result_object);
    c31_l196_action_invoke(&result_object);
    c32_l196_action_invoke(&result_object);
    c33_l197_action_invoke(&result_object);
    c34_l197_action_invoke(&result_object);
    c35_l198_action_invoke(&result_object);
    c36_l198_action_invoke(&result_object);
    c37_l199_action_invoke(&result_object);
    c38_l199_action_invoke(&result_object);
    c39_l200_action_invoke(&result_object);
    c40_l200_action_invoke(&result_object);
    c41_l201_action_invoke(&result_object);
    c42_l201_action_invoke(&result_object);
    c43_l202_action_invoke(&result_object);
    c44_l202_action_invoke(&result_object);
    c45_l203_action_invoke(&result_object);
    c46_l203_action_invoke(&result_object);
    c47_l204_action_invoke(&result_object);
    c48_l204_action_invoke(&result_object);
    c49_l205_action_invoke(&result_object);
    c50_l205_action_invoke(&result_object);
    c51_l206_action_invoke(&result_object);
    c52_l206_action_invoke(&result_object);
    c53_l207_action_invoke(&result_object);
    c54_l208_action_invoke(&result_object);
    c55_l208_action_invoke(&result_object);
    c56_l209_action_invoke(&result_object);
    c57_l210_action_invoke(&result_object);
    c58_l211_action_invoke(&result_object);
    c59_l211_action_invoke(&result_object);
    c60_l213_action_invoke(&result_object);
    c61_l213_action_invoke(&result_object);
    c62_l214_action_invoke(&result_object);
    c63_l214_action_invoke(&result_object);
    c64_l215_action_invoke(&result_object);
    c65_l215_action_invoke(&result_object);
    c66_l216_action_invoke(&result_object);
    c67_l216_action_invoke(&result_object);
    c68_l217_action_invoke(&result_object);
    c69_l217_action_invoke(&result_object);
    c70_l218_action_invoke(&result_object);
    c71_l218_action_invoke(&result_object);
    c72_l219_action_invoke(&result_object);
    c73_l219_action_invoke(&result_object);
    c74_l220_action_invoke(&result_object);
    c75_l220_action_invoke(&result_object);
    c76_l221_action_invoke(&result_object);
    c77_l221_action_invoke(&result_object);
    c78_l222_action_invoke(&result_object);
    c79_l222_action_invoke(&result_object);
    c80_l223_action_invoke(&result_object);
    c81_l223_action_invoke(&result_object);
    c82_l224_action_invoke(&result_object);
    c83_l224_action_invoke(&result_object);
    c84_l225_action_invoke(&result_object);
    c85_l225_action_invoke(&result_object);
    c86_l226_action_invoke(&result_object);
    c87_l226_action_invoke(&result_object);
    c88_l227_action_invoke(&result_object);
    c89_l227_action_invoke(&result_object);
    c90_l228_action_invoke(&result_object);
    c91_l229_action_invoke(&result_object);
    c92_l230_action_invoke(&result_object);
    c93_l230_action_invoke(&result_object);
    c94_l232_action_invoke(&result_object);
    c95_l233_action_invoke(&result_object);
}
