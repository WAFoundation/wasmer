# Compilers
singlepass spec::multi_value
singlepass spec::simd

singlepass+windows *
singlepass+dylib *
windows+dylib *
musl+dylib * # Dynamic loading not supported in Musl

# Traps
singlepass traps::test_trap_trace
dylib     traps::test_trap_trace
aarch64    traps::test_trap_trace
singlepass traps::test_trap_stack_overflow
dylib     traps::test_trap_stack_overflow
aarch64    traps::test_trap_stack_overflow
singlepass traps::trap_display_pretty
llvm       traps::trap_display_pretty
dylib     traps::trap_display_pretty
aarch64    traps::trap_display_pretty
singlepass traps::trap_display_multi_module
llvm       traps::trap_display_multi_module
dylib     traps::trap_display_multi_module
aarch64    traps::trap_display_multi_module
singlepass traps::call_signature_mismatch
llvm       traps::call_signature_mismatch
dylib     traps::call_signature_mismatch
macos+aarch64    traps::call_signature_mismatch
singlepass traps::start_trap_pretty
llvm       traps::start_trap_pretty
dylib     traps::start_trap_pretty
aarch64    traps::start_trap_pretty

cranelift  multi_value_imports::dylib
singlepass multi_value_imports::dylib
singlepass multi_value_imports::dynamic

# LLVM/Universal doesn't work in macOS M1. Skip all tests
llvm+universal+macos+aarch64 *

# TODO: We need to fix this. The issue is caused by libunwind overflowing
# the stack while creating the stacktrace.
# https://github.com/rust-lang/backtrace-rs/issues/356
cranelift spec::skip_stack_guard_page
llvm      spec::skip_stack_guard_page

# TODO(https://github.com/wasmerio/wasmer/issues/1727): Traps in dylib engine
cranelift+dylib spec::linking
cranelift+dylib spec::bulk

# Some SIMD opperations are not yet supported by Cranelift
cranelift+aarch64 spec::simd::simd_boolean
cranelift spec::simd::simd_conversions
cranelift spec::simd::simd_i16x8_extadd_pairwise_i8x16
cranelift spec::simd::simd_i16x8_extmul_i8x16
cranelift spec::simd::simd_i16x8_q15mulr_sat_s
cranelift spec::simd::simd_i32x4_extadd_pairwise_i16x8
cranelift spec::simd::simd_i32x4_extmul_i16x8
cranelift spec::simd::simd_i32x4_trunc_sat_f64x2
cranelift spec::simd::simd_i64x2_extmul_i32x4
cranelift spec::simd::simd_i8x16_arith2
cranelift spec::simd::simd_int_to_int_extend

# Frontends

## WASI

### These tests don't pass due to race conditions in the new way we run tests.
### It's not built to be run in parallel with itself, so we disable it for now.

wasitests::snapshot1::host_fs::writing
wasitests::unstable::host_fs::writing
wasitests::snapshot1::mem_fs::writing
wasitests::unstable::mem_fs::writing

### due to hard-coded direct calls into WASI for wasi unstable

wasitests::snapshot1::host_fs::fd_read
wasitests::snapshot1::host_fs::poll_oneoff
wasitests::snapshot1::host_fs::fd_pread
wasitests::snapshot1::host_fs::fd_close
wasitests::snapshot1::host_fs::fd_allocate
wasitests::snapshot1::host_fs::close_preopen_fd
wasitests::snapshot1::host_fs::envvar
wasitests::snapshot1::mem_fs::fd_read
wasitests::snapshot1::mem_fs::poll_oneoff
wasitests::snapshot1::mem_fs::fd_pread
wasitests::snapshot1::mem_fs::fd_close
wasitests::snapshot1::mem_fs::fd_allocate
wasitests::snapshot1::mem_fs::close_preopen_fd
wasitests::snapshot1::mem_fs::envvar

### TODO: resolve the disabled tests below. These are newly disabled tests from the migration:

### due to git clone not preserving symlinks:
wasitests::snapshot1::host_fs::readlink
wasitests::unstable::host_fs::readlink
wasitests::snapshot1::mem_fs::readlink
wasitests::unstable::mem_fs::readlink

### failing due to `remove_dir_all`. this test is also bad for parallelism
wasitests::snapshot1::host_fs::create_dir
wasitests::unstable::host_fs::create_dir
wasitests::snapshot1::mem_fs::create_dir
wasitests::unstable::mem_fs::create_dir

### failing because it closes `stdout` which breaks our testing system
wasitests::unstable::host_fs::fd_close
wasitests::unstable::mem_fs::fd_close

### failing because we're operating on stdout which is now overridden.
### TODO: check WasiFile implementation
### Alterative: split test into 2 parts, one printing to stderr, the other printing to stdout to test the real versions
wasitests::unstable::host_fs::poll_oneoff
wasitests::unstable::mem_fs::poll_oneoff

## Failing due to different line endings on Windows
## we need a better solution to this problem:

windows wasitests::snapshot1::host_fs::file_metadata
windows wasitests::snapshot1::host_fs::fseek
windows wasitests::snapshot1::host_fs::path_link
windows wasitests::snapshot1::host_fs::path_symlink
windows wasitests::snapshot1::host_fs::mapdir_with_leading_slash
windows wasitests::unstable::host_fs::fd_pread
windows wasitests::unstable::host_fs::fd_read
windows wasitests::unstable::host_fs::file_metadata
windows wasitests::unstable::host_fs::fseek
windows wasitests::unstable::host_fs::path_link
windows wasitests::unstable::host_fs::path_symlink
windows wasitests::unstable::host_fs::mapdir_with_leading_slash
windows wasitests::snapshot1::mem_fs::file_metadata
windows wasitests::snapshot1::mem_fs::fseek
windows wasitests::snapshot1::mem_fs::path_link
windows wasitests::snapshot1::mem_fs::path_symlink
windows wasitests::snapshot1::mem_fs::mapdir_with_leading_slash
windows wasitests::unstable::mem_fs::fd_pread
windows wasitests::unstable::mem_fs::fd_read
windows wasitests::unstable::mem_fs::file_metadata
windows wasitests::unstable::mem_fs::fseek
windows wasitests::unstable::mem_fs::path_link
windows wasitests::unstable::mem_fs::path_symlink
windows wasitests::unstable::mem_fs::mapdir_with_leading_slash

# This tests are disabled for now
wasitests::unstable::host_fs::unix_open_special_files
wasitests::snapshot1::host_fs::unix_open_special_files
wasitests::unstable::mem_fs::unix_open_special_files
wasitests::snapshot1::mem_fs::unix_open_special_files
